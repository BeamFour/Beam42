
19 Dec 2015:  A190: Running Biconic
Biconic uses CurvX, AsphX, CurvY, AsphY.
OEJIF ternary logic gets iProfile=4; OSXCYL.


19 Dec 2015: What to do about Options::AutoAdjust
  weight Xgoal, weight Ygoal, ...   ?
  13 Jan 2016 deleting these options. 


18 Dec 2015:  A190: What curvature logic drives polynomial cylinders?
Classification is done in OEJIF starting at line 440; installed diagnostic display.
Test vehicle is T-Cylinder.OPT with nonzero A1, A3 entries.  Nine cases:
Headers:   Curve   Cx
           ------:-------- 
           blank   blank     ...OSPLANO  poly is circularly symmetric
            0      blank     ...OSPLANO  poly is circularly symmetric  
            0.01   blank     ...OSCONIC  poly is circularly symmetric
           blank   0         ...OSPLANO  poly is circularly symmetric
            0      0         ...OSPLANO  poly is circularly symmetric
            0.01   0         ...OSYCYL   poly is cylindrical "S", axis=X
           blank   0.01      ...OSXCYL   poly is "S" in y, circular curved in X
            0      0.01      ...OSXCYL   poly is "S" in y, circular curved in X
            0.01   0.01      ...OSTORIC  poly is "S" in y, circular curved in X

In other words...
Headers:   Curve   Cx
           ------:-------- 
           blank   blank     ...OSPLANO  poly is circularly symmetric in r      "CircPoly"
           blank   0         ...OSPLANO  poly is circularly symmetric in r      "CircPoly"
           blank   0.01      ...OSXCYL   poly is "S" in y, circular curved in X "ToricPoly"

            0      blank     ...OSPLANO  poly is circularly symmetric in r      "CircPoly"
            0      0         ...OSPLANO  poly is circularly symmetric in r      "CircPoly"
            0      0.01      ...OSXCYL   poly is "S" in y, circ in X, axis=Y    "ToricPoly"--bullet 2

            0.01   blank     ...OSCONIC  poly is circularly symmetric in r      "CircPoly"
            0.01   0         ...OSYCYL   poly is cylindrical "S" in y, axis=X   "Cylind-Y" --bullet 1
            0.01   0.01      ...OSTORIC  poly is "S" in y, circular curved in X "ToricPoly"--bullet 3

       Curve :   blank        0      nonzero
-------------:---------------------------------
Cx = blank   :  CircPoly   CircPoly  CircPoly
Cx = 0       :  CircPoly   CircPoly  Cylind-Y 
Cx = nonzero :  ToricPoly  ToricPoly ToricPoly

"Polynomials: these are available in circular form (i.e. functions of radius r)
and in cylindrical form (i.e. functions of y alone, not x).  Choice is governed
by the "Cx" field being empty, zero, or nonzero.  

1. With "Cx" being absent, or blank, we get a circularly symmetric polynomial in "r" (eqn MM).

2. With "Cx" being set to zero, we again get a circularly symmetric polynomial in "r",
    unless "Curve" is set nonzero: this mismatch forces a cylinder, axis=X and
    polynomial is a function of y: conic + polynomial  (eqn NN).

3. With Cx nonzero, we obtain the full set of toric polynomials: circular in
   the XZ plane and conic + polynomial in the YZ plane. 

Other headers show that Cy is ignored:
Headers:   Curve   Cy
           ------:--------
           blank   blank     ...OSPLANO
            0      blank     ...OSPLANO
            0.01   blank     ...OSCONIC
           blank   0         ...OSPLANO
            0      0         ...OSPLANO
            0.01   0         ...OSCONIC  <<< Cy is ignored
           blank   0.01      ...OSPLANO
            0      0.01      ...OSPLANO  <<< Cy is ignored
            0.01   0.01      ...OSCONIC  <<< Cy is ignored

Headers:   Cx      Cy       <<< Biconic.OPT uese this pair
           ------:--------
           blank   blank     ...OSPLANO
            0      blank     ...OSPLANO
            0.01   blank     ...OSXCYL   <<< Cy is ignored? No: Biconic runs OK
           blank   0         ...OSPLANO
            0      0         ...OSPLANO
            0.01   0         ...OSXCYL   <<< Cy is ignored? NO: Biconic runs OK
           blank   0.01      ...OSPLANO
            0      0.01      ...OSPLANO
            0.01   0.01      ...OSXYL    <<< Cy is ignored? NO: Biconic runs OK

Apparent Rules, A190:
PolyCyl: requires axis=x, Cx=0 (uncurved in XZ plane), Curve=Nonzero, poly in y: OSYCYL.
CircCyl: can have axis=x, Cx=0 (uncurved in XZ plane), Curve=Nonzero, no poly;  OSYCYL.
CircCyl: or have  axis=y, Cx=nonzero, Curve=blank or zero, no poly terms:  OSXCYL
Toric:   requires Curve=nonzero, Cx=nonzero. 


Shell scripts:
in A190, a.sh fails to compile.  It has two lines:

    javac -version
    javac -Xlint com/stellarsoftware/beam/*.java

in A166_working, a.sh succeeds.  It has one line:

    javac -Xlint com/stellarsoftware/beam/*.java

Copying a.sh from A166_working into A190, a.sh runs OK!
And runs OK with added line "javac -version"  -- no difference!

Adopting this bash script in A190...  runs OK:

echo "...To set compiler version..."         # handy reminder
echo "source ~/.profile"
echo "setJDK6"    
echo "...Obtaining compiler version..."      # inform the user
javac -version
echo "...Compile with Xlint..."              # inform the user
javac -Xlint com/stellarsoftware/beam/*.java



17 Dec 2015  A190: Removing absolute values of |y| in cylindrical polynomials
..  so that a true smooth polynomial cylinder can be constructed. 
..  Requested by John Hart 15 Dec
..  Installed into Z.java; seems to work using "S-Cylinder" demo files
..  Posted at MikeLampton.com to John Hart 17 Dec; he acknowledges receipt, approved 18 Dec.



2 November 2015  A190  Introducing weights for AutoAdjust
 -not done.
 -options removed 13 Jan 2016.


19 Oct 2015: A189 7 October running E22 files
Edit::Paste sometimes gets wrong destination if caret is keystroked to desired location, 
yet always gets correct destination if caret is placed by mouse click.
In both cases the "Row=NN" display at top of editor shows correct caret row. 


8 Oct 2015: prospective new feature: set & fix a Layout pixel scale.
But wait. What is "Sticky Pan/Zoom? Ah: if you do not pan or zoom, can
dismiss Layout, then make changes, then do a new Layout: same pan zoom!
Very nice, this is what I want, already implemented.  


7 October 2015 afternoon  A189
Yikes, now the command line javac -Xlint com/stellarsoftware/beam/*.java
fails; not just the bash script "a.sh".  

Rebooting solves this problem.
Rebooting does not solve bash script "a.sh" failure. 
Bash scripts "b.sh" and "c.sh" work just fine. 
Yet, moving to A166_Working, bash a.sh runs OK.  Why? In A166_working, a.sh is simply:

    javac -Xlint com/stellarsoftware/beam/*.java

7 October 2015 Two problems with Angles and {i,j,k}

1. These use the -Z normal on mirrors.  Should always use the
  incoming normal, so that incoming angles are w.r.t. incoming normal.
  RT13.vGetPerp() uses Z.vGetZnorm();
  Previous Z.vGetZnorm() starts with norm[2]=-1; 
  Changing Z.vGetZnorm() to start with norm[2]=1.
  This requires that the unnormlized norm[0]= -dZ/dx and norm[1]=-dZ/dY.
  Since there are two opposite normals, I guess posting Angle that
  is 0<a<90 should suffice.  
  ^^ Done in RT13.vSetAngle() line 1851. Looks OK, except "k" is negative.
     k would be positive if we had the +Z normal sense. 
  But still best to get to the origin of the need for norm[2]=-1.

2. These should get posted for all incoming rays, not just those that
are OK outgoing. 




6 October 2015  A189, yikes shell script a.sh has broken.
bash a.sh  :
   "javac: invalid flag: -version
   Usage: javac <options> <source files>
   use -help for a list of possible options
   javac: invalid flag: com/stellarsoftware/beam/*.java
   Usage: javac <options> <source files>
   use -help for a list of possible options"

Yet, typed by hand, javac -version reports proper version....
   "javac 1.6.0_65"

And,typed by hand, javac -Xlint com/stellarsoftware/beam/*.java  compiles OK.
Also, bash c.sh works properly: jars the application as it should. 

Moving to another directory /Java/TripleTest, running the shell script a.sh
   javac -version
   javac *.java
works OK, revealing JDK=1.8.0_20 so the 1.6.0_65 has been lost. 

Returning to A189, c.sh is still OK under JDK8, a.sh is still broken.
Strange. 



5 October 2015  A188 "Angle" output is sometimes not zero:
 ... in Rowland.OPT, where all rays start at the center of curvature
 of the concave grating, all angles "A1" ought to be zero.
 Most of them are. but a few are +0.000000853773 degrees.  ?!?
This angle is obtained in RT13::vSetAngle() line 1852 using U.arccosd(dotProduct).
The arc cosine has infinite slope at x=1, U parallel to Norm, therefore limited accuracy.
Slightly better is U.arcsind(crossProduct) that is linear for U parallel to Norm,
hence good accuracy, but it blows up at U perp Norm.
Better still is the full angle resolver arctan2(crossProduct, dotProduct)
that is well behaved everywhere, zero and infinity are OK. 
PLAN: Write and Test a generally good angle finder. U.getAngle()...
^^ Done; see Java/TripleTest.
^^ Modified RT13::vSetAngle() line 1852 to use Triple::getAngle(). 


5 October 2015  A188 Layout Radial Arcs vanish if Gx is nonzero
 ... as if Gx interferes with drawing radial arcs.
 ... peripheral arcs are OK. 
 ... see Rowland.OPT


18 Sept 2015:  "Save" flag misbehavior
If I save a dirty file using Cmd-S, it saves OK, but upon exitting,
I get the dirty flag dialog, as if Cmd-S fails to clear that flag.
^^ Hmmm: EJIF line 468 appears to properly clear that flag. 
^^ Hmmm: DMF does not have any bDirty flags.  Its vMasterExit checks its BJIFs.
^^ Hmmm: BJIF has an abstract method bExitOK() for each EJIF to implement. 
^^ Hmmm: EJIF's bExitOK() returns true if !bDirty.  Should work!



17 Sept 2015  A188
Oddity in Layout: Displaying Hyper, all surface arcs display properly.
But displaying Transmission, the first surface NSEW fail to display on surface 1
while all peripheral arcs are OK and all radial arcs are OK on surfaces 2 and up.
Same problem with refractor shading on or off so it is not a shading issue. 



16 Sept 2015  A188 installing new class Triple, simplifying iTG routines.
iTG should replace iSnell, a further simplification.
^^ Done.  Also added HOE; tests OK. 


14 Sept 2015  A187 Reverting to Old Hierarchy, for portability. 
  Eliminated /sources and /classes subfolders.
  Moved /com into project root;
  Sources and classes are all found in /com/stellarsoftware/beam.
  Modified a.sh (still won't work but command line is OK)
  Modified b.sh, c.sh, d.sh -- all these work OK
  ^^ and now: BEAM4U.jar is portable, runs anywhere.    (whew)




14 Sept 2015: "The java JAR file 'BEAM4_186_1.6.0.jar' could not be launched.
  Check the Console for possible error messages.  [OK]"

Within A186, double clicking BEAM4U.jar or BEAM4_186.1.6.0.jar works.
Copies of them in /General/Web fail to run with this message.
Copies of them downloaded from MikeLampton.com, in Downloads, also fail.
Somehow the .jar files have become location dependent!

Older compiles like BEAM4_184_1.6.0.jar double click and run anywhere. 
Could my new file system have messed up some key library information?
New files = 290kB; older files = 290kB.  Not much can be missing! 

In A186, bash b.sh "java -cp classes com.stellarsoftware.beam.B4" works;
In A186, bash d.sh "java -jar BEAM4U.jar"  works; entrypoint OK; 
In A186, trying "java BEAM4U.jar" fails:
   "Error: Could not find or load main class BEAM4U.jar"
Could this nonportability be some failure in my manifest?
Could this nonportability be a consequence of my new file hierarchy?
 Maybe!  185 is similarly nonportable!
Drop the terminal "/" in "classes/" in manifest: compiles, and runs, and jars,
but Yikes, bash d.sh "Error: could not find or load main class com.stellarsotware.beam.B4"
Replace that "/" and bash d.sh runs OK.
A185 BEAM4U.jar double clicks OK within A185
A185 BEAM4U.jar double click fails when moved to Downloads. 

Could reverting to a simpler hierarchy eliminate this nonportability??


14 Sept A186:  Bash script failure in a.sh
In A173, a.sh script contains one line, and it runs OK:

    javac -Xlint com/stellarsoftware/beam/*.java

In A185_Mac, a.sh script contains six lines (one is blank), and it runs OK: 
no error messages about the blank line nor the compiler:

    # Compiler needs explicit direction to source files.
    # Compiler "-d" destination hierarchy follows the package specification;
    #   here "classes" is the headwater of com.stellarsoftware.beam 
    #

    javac -Xlint -d classes sources/com/stellarsoftware/beam/*.java

In A185_Mac_PC, a.sh script is five lines (one is blank), and it runs OK once:
no error messages about the blank line nor the compiler:

    # Compiler needs explicit direction to source files.
    # Compiler "-d" destination hierarchy follows the package specification;
    #   here "classes" is the headwater of com.stellarsoftware.beam 

    javac -Xlint -d classes sources/com/stellarsoftware/beam/*.java

but on subsequent tries, it fails (same a.sh!) with two error messages:

    : command not found
    javac: invalid flag: sources/com/stellarsoftware/beam/*.java
    Usage: javac <options> <source files>
    use -help for a list of possible options

The first error message is a complaint about the empty line.
This complaint was absent on the initial run today, or last week.
The second error message reports an invalid flag in the compiler.
Yet it works OK when typed into the command line bypassing bash.
The sources directory hierarchy here is the same as in A185_Mac.
The classes directory hierarchy here is the same as in A185_Mac.

Temporary fix is to copy and paste the javac command into the command line.
Works.  strange.  The other bash scripts b.sh, c.sh, and d.sh work fine.

In A186, a.sh has just one line:

    javac -Xlint -d classes sources/com/stellarsoftware/beam/*.java

which triggers the compiler error message...

    javac: invalid flag: sources/com/stellarsoftware/beam/*.java
    Usage: javac <options> <source files>
    use -help for a list of possible options

186, trying an enlarged a.sh shell script:

    javac -version
    javac -Xlint -d classes sources/com/stellarsoftware/beam/*.java

This produces two error messages, as if javac is unavailable:

    javac: invalid flag: -version
    Usage: javac <options> <source files>
    use -help for a list of possible options
    javac: invalid flag: sources/com/stellarsoftware/beam/*.java
    Usage: javac <options> <source files>
    use -help for a list of possible options

Yet, again, javac -version works fine on the command line. 
And, b.sh, c.sh, d.sh continue to work OK as well.  


13 Sept A186 addressing TransmissionGrating error

Problem is that diffracting into a non-vacuum medium, the diffraction angle
is not attenuated by that final medium.

Should be:     N2*sin(beta) = N1*sin(alpha) + M*G*lambda
but acts like  N2*sin(beta) = N1*sin(alpha) + N2*M*G*lambda

Testing with BacksideTGTest.OPT; compare Excel BacksideTGTest.xls

Revising RT13 iSnell() to agree with Spencer & Murty's "gamma" notation.
Previous iTgrating() routine was simply iGrating() then iSnell().
That has both a sequence error and a conceptual refraction error.

Test plan should include eight cases:

FwdFrontTG with Gx and Gy, U0 and V0   TG is surface 1
FwdBackTG  with Gx and Gy, U0 and V0   TG is surface 2
RevFrontTG with Gx and Gy, U0 and V0   TG is surface 2
RevBackTG  with Gx and Gy, U0 and V0   TG is surface 3

The reverse (Z decreasing) tests use a single initial reversing mirror
to reverse the rays prior to passing through the TG.  They assure
that the signs of Wfinal are correctly managed. 



 
13 Sept A186 addressing InitialFinalMedia bug

If ALL media in an optics table have a defined index, say 2.0, 
then Ufinal should remain in that medium, but it refracts into vacuum!
^^ Created InitialFinalIndexTest.OPT and .RAY
^^ Reveals TIR failure from transition to vacuum
^^ There should be NO transition to vacuum.
^^ Error was found RT13, getRefraction() line 601-602 limits jsurf <= nsurfs.
^^ Works. 



9 Sept 2015  A185  New parallel file system.
  Seems to work:  sources and classes are now separated. 
  Mac and PC editions both compile and run. 
  See M.Lampton "Java Folder Hierarchy: Compiling and Testing"


31 August 2015   A184 and the UnderScoot problem
There are two ways to install a Desktop.
   1. Replace the native contentpane with a JDesktopPane, then add JMenuBar.
or
   2. Add the JMenuBar and a JDesktopPane to the native contentpane.

It might be the case that 1 underscoots but 2 does not because its workspace
excludes the MenuBar. 

Or, it might be the case that 1 does not underscoot because JDP knows about JMenuBar.

In A184/DMF, I use method 1; "this" means this JFrame; it requires Headroom.

        jdp = new JDesktopPane(); 

        // Headroom here is mandatory to eliminate underscoot
        jdp.setDesktopManager(new HeadroomDesktopManager());
        .....
        this.setContentPane(jdp);
        this.setJMenuBar(menubar); 

In /Java/Desktop, Underscoot.java uses method 2 and also needs Headroom:

        Container contentPane = getContentPane(); 
        JMenuBar menuBar = new JMenuBar();
        setJMenuBar(menuBar); 
        jdp = new JDesktopPane();    
        contentPane.add(jdp, BorderLayout.CENTER);

        // Headroom here is mandatory to eliminate underscoot
        jdp.setDesktopManager(new HeadroomDesktopManager()); 

        jdp.setDragMode(JDesktopPane.OUTLINE_DRAG_MODE); 
        jdp.setOpaque(true);  // false);

Result: either way underscoots unless a HeadroomDesktopManager is installed. 


26 August 2015   A184: persistent rays
When I close my .RAY editor, I expect the rays to vanish.
They do not: a pre-existing layout still traces them.
as if the master parser has not been alerted to the disappearance
of the ray information.  However if I click the Run menu, then
I get the report "Ray Table is Absent" although the on-screen
Layout continues to show its rays. 
 ^^ Added bNeedsParse = true to EJIF exit routine.
Oooops: when the window exits, the blinker is off!
Better to directly beg DMF for its vMasterParse(true).
^^ works.  

The Run::Random progress dialog needs the same Container treatment
that my new three-button dirty exit has: it presently likes to go outside
of the B4 desktop. 
 ^^ Gave my JDialog with DMF.dmf as the working JFrame. 
 No joy, works the same.


25 August 2015  A184: Scooting Under
Testing reveals that there is still a way to have UnderScoot,
in spite of my new desktop manager.  Do this: 
  1. Run B4 and load some files.
  2. Drag the main frame display upwards, making insufficient height.
  3. Click and drag any internal frame...
  ...it will jump upwards, safeguarding its bottom, but hiding its top.
Ha, a much simplified BoundedDesktopManager fixes this:

    public void setBoundsForFrame(JComponent f, int x, int y, int w, int h) 
    {
        y = Math.max(y, 1); 
        f.setBounds(x, y, w, h); 
    }      
    

25 August 2015  A184: MAXBUNCH = 10000 in B4constants.java.
used to be 1000 random rays max per refresh
Now at customer request raised to 10000.

There's still a bug in the dirty exit logic:
Dirty flag is detected, but "Cancel" at the window exit button
discards the editor.  

Did I forget EJIF's DO_NOTHING_ON_CLOSE?
Yup.  Fixed.  Works.


24 August 2015  A183, 184: Improved exit logic:

1. Converted bTryClosing() into bExitOK():
  false means cancel, otherwise dialog save and return true; 
2. Eliminated dispose() from bExitOK
  -- dispose within EJIF only if locally called and OK; 
  -- GJIF is always OK yet never disposes.
  -- vMasterExit does not bother with dispose(): it exits if no cancels.
Bail out of vMasterExit at the very first cancel.
A184 has improved cleanup logic in EJIF's close listener.
^^ Done: works. 

A184: increased Random maxBunch to one million (was one thousand). 

Java release history:  https://en.wikipedia.org/wiki/Java_version_history
Through 1.6.0_21: July 2010, from Sun Microsystems.
At 1.6.0_22 and above: Oct 2010 from Oracle Corporation

===Test notes on release 182, 23 August 2015 various machines====
My MacBook Air, Mac OS X 10.9.5, JRT 1.6.0_65 is OK; 
  however JRT7 and 8 crash when MacOS iconified.
  Glad I installed that permission switch!

Susan’s Retina MacBook  Mac OS X 10.9.5,  JRT 1.6.0_65, runs great. 

Susan's non-Retina MacBook Pro 10.6.8 JRT 1.6.0_65, runs great.

Susan's hp Windows XP JRT 1.6.0-11
offers metal, nimbus, cde/motif, windows, windows classic.
All of them minimize and maximize ok.

Mike's Lenovo ThinkPad, Win Seven Pro SP1, JDK 1.6.0_21, JRT 1.6.0_38
Works great.


23 August 2015  A182: modifying three button action on dirty exit:
instead of H&C's VetoablechangeListener (which gives me two successive
exit dialogs, and refuses to consume!) I am trying something simpler...

  "Cancel"  uses built in DO_NOTHING_ON_CLOSE,
  "Abandon" uses dispose() method,
  "Save"    calls pleaseSave() then dispose().

Development vehicle for 3-button permissions:  /Java/Desktop/ExitOK.java

With multiple windows there are (at least) two approaches to main exit cleanup:
1. Cancel on a dirty file should retain all editor files including clean ones.
2. Cancel on a dirty file should drop all clean files.

I have adopted #2.  Works well.

One customer prefers #1.  Should be easy to change:
MasterExit should first poll all editors, draw up a list of dirties,
poll user for each dirty & save the responses, then...
  if any = cancel, abort the exit; 
  if any is save&exit, save but do not exit;



Under 1.6.0_65 (JRT6), MacOS minimization works beautifully: lower left corner.
Under 1.7.0_67 (JRT7) or 1.8.0_20 (JRT8), minimization crashes. 
Default MacOS Icon permission is OFF: see Options::StartupFiles::MacOS.
My Mac OS X is 10.9.5

22 August 2015 A180, 181:
User report that B4_180_1.6.0 posted at MikeLampton.com
crashes on minimizing a MacOS window, unlike my experience.
So the controlling crash factor is not simply JRT6: it is perhaps
a finer build number, or a foreign release.

Better is to lock out minimize on all MacOS windows, all JRTs:
  existing ones, via Options::LookAndFeel, via inflate() and deny;
  remember to reallow minimization going to non MacOS L&Fs; 
  new ones, via BJIF deny. 

Alternative: introduce a User Option allowing/forbidding MacOS L&F iconify.
Supply a brief text caution for crashy behavior.
^^ Done; works nicely.

Root of the problem lies in applying a MenuBar to a JDesktopPane.
The MacOS style is to put the menubar at Top-of-Screen, and not
use the top-of-frame; this way the default desktop manager works OK
with no slipping underneath the menubar. 
The Java style (also linux and Windows) is to let each app have its
own menubar. 


21 August A180: Applying smooth bounds manager to DMF;
test vehicle is /Java/InternalFrames/Test3.java.
All compiles use JDK6 since MacOS minimizer crashes under JDK8.
All runs use JRT6 since MacOS minimizer crashes under JRT8.
Smooth limiter avoids under scooting the MenuBar.

^^ Works, but needs to be made selective among L&Fs:
When changing to MacOS L&F, preinflate all JIFs lest icons vanish.
^^ Done, works.
Then if JRT>6, forbid minimization of all JIFs. 
For new BJIFs constructed with MacOS L&F and JRT>6, forbid minimization.



Installing three button dirty editor exit tool:
"Abandon"  "Return"  "Save and Exit": EJIF line 373. 
^^ Works. Nice to have. 




20 August 2015  A179: Possible lead on How To Write Desktop Manager methods:
http://docs.oracle.com/javase/7/docs/api/javax/swing/DesktopManager.html

"DesktopManager objects are owned by a JDesktopPane object. They are responsible 
for implementing L&F specific behaviors for the JDesktopPane. JInternalFrame 
implementations should delegate specific behaviors to the DesktopManager. 
For instance, if a JInternalFrame was asked to iconify, it should try:

    getDesktopPane().getDesktopManager().iconifyFrame(frame);
 
"This delegation allows each L&F to provide custom behaviors for desktop-specific 
actions. (For example, how and where the internal frame's icon would appear.)
This class provides a policy for the various JInternalFrame methods, it is not 
meant to be called directly rather the various JInternalFrame methods will 
call into the DesktopManager."

http://www.coderanch.com/t/545927/GUI/java/JInternalFrame-iconifying-size
...shows how to set bounds for an iconified JInternalFrame.

http://www.coderanch.com/t/545930/GUI/java/JInternalFrame-iconifying-position
...shows how to set icon position.

http://www.coderanch.com/t/333623/GUI/java/internal-frame-problems
...deals with disappearing icons  "moveToFront()".

http://stackoverflow.com/questions/6916163/jinternalframe-minimize-while-maintaining-current-location
...shows how to subclass javax.swing.DefaultDesktopManager and create a CustomDesktopManager,
   and override its iconifyFrame() method with a new one.

http://stackoverflow.com/questions/8136944/preventing-jinternalframe-from-being-moved-out-of-a-jdesktoppane
...shows how to limit drag motions of a JInternalFrame.

https://docs.oracle.com/javase/tutorial/uiswing/events/internalframelistener.html
...shows how to write an internal frame listener, capturing internal frame events.

http://www.java2s.com/Tutorial/Java/0240__Swing/ListeningtoInternalFrameListener.htm
...shows how to write an internal frame listener.






User request ThreeButton dirty-file-exit dialog: [abandon], [return], [save & exit].



19 August 2015  A179: MacOS L&F "minimize" bottom-center vs bottom-left issue:

In A176, a new L&F was installed into Options;  one difference noted:
  A173 included serialVersionUID = 42L;  not in A176.  (Cannot matter!)

User report is that under A173, Java 1.6, "minimize" was bottom-left.
To force a .jar to use selected <local> Java runtime, use java -jar FILENAME.jar

Factory testing as follows:

Compiler:   B4173_1.5.0 on Lenovo/WinSeven; others on MacOS 10.9.5.

Windows Javac 1.5.0 cannot compile B4_179:  "FileNameExtensionFilter" does not exist. 
Windows Javac 1.6.0 succeeds to compile B4_179; Works great with native Windows L&F. 

Now exploring the Mac OS L&F and its "minimize" behavior....

Compiled on Lenovo w/ javac 1.5.0_22, running on Mac OS...

MacOS 10.9.5 w/ java 1.8, B4_173_1.5.0: B4 runs; "minimize" vanishes and crashes.
MacOS 10.9.5 w/ java 1.6, B4_173_1.5.0: B4 runs; "minimize" works: lower left corner.

Compiled on MacOS 10.9.5 with various javac compilers....

===RELEASE 173===
MacOS 10.9.5 w/ java 1.8, B4_173_1.6.0: B4 runs; "minimize" vanishes and crashes. 
MacOS 10.9.5 w/ java 1.6, B4_173_1.6.0: B4 runs; "minimize" works, lower left corner.
MacOS 10.9.5 w/ java 1.8, B4_173_1.8.0: B4 runs; "minimize" vanshes and crashes.
MacOS 10.9.5 w/ java 1.6, B4_173_1.8.0: B4 will not run "UnsupportedClassVersion"

===RELEASE 179===
MacOS 10.9.5 w/ java 1.8, B4_179_1.6.0: B4 runs; "minimize" works, bottom center.  
MacOS 10.9.5 w/ java 1.6, B4_179_1.6.0: B4 runs; "minimize" works, bottom center. 
MacOS 10.9.5 w/ java 1.8, B4_179_1.8.0: B4 runs; "minimize" works, bottom center.  
MacOS 10.9.5 w/ java 1.6, B4_179_1.8.0: B4 will not run "UnsupportedClassVersion"

The sole "lower left corner" I find is to compile 173 on javac 1.6.0 and offer it
to only java 1.6 installation users. Earlier users will refuse to run B4_1.6.0, and
later users will crash  upon trying a "minimize."

The only way to have a noncrashy single product release seems to be to
accept the bottom center minimize, which I do not like. 


18 August 2015  A179: Experiments with Version/ShowVersion.java
With setJDK6:

   running command line "java ShowVersion"  gives 1.6.0_65
   while double clicking "ShowVersion.jar"  gives 1.8.0_51
   command line "java -jar ShowVersion.jar" gives 1.6.0_65

I conclude that double clicked jars can discover & use latest JDK,
while command line starts do not allow this freedom.

Test B4 java sensors with the command line jar test. 

To switch to JDK6 on my Mac:

    source ~/.profile
    setJDK6           

java -version  then reports 1.6.0

To edit the .profile,  open -e ~/.profile
... see /Computer/SelectableJavaReleases.txt



15 August 2015  A179

Hmmm, Drag-n-Drop has to ask for a filename when I hit Command-S "Save"
as if the DnD file details are unknown to EJIF (where the "Save" is implemented.
It is not just DnD; Save always reverts to SaveAs as if EJIF never receives
a valid filename. 

Aha: EJIF constructor fails to initialize its "myFile" variable.  
  ^^ Trying initialization of global "myFile" -- ha this works, now Cmd-S
knows what the file is when loaded, does not revert to SaveAs.


14 August 2015   A179

Hmmm, SaveAs fails to update RecentFiles and therefore the
autoLoad fails to grab the Very Latest Edition.
Fixed:  EJIF now calls DMF.addRecent() for each successful save. 




13 August 2015  A179

Improved DMF "File::Open" starts at most recent folder for Opt, Ray, or Med;
also EJIF "SaveAs" starts at most recent folder for Opt, Ray, or Med.
default no-recent-memory situation is moved to User.home, not local.dir; 
Autoloads offer choice of "none" or "most recent".

Compiles without error under Javac 1.8
Fails to compile under Javac 1.5: evidently FileNameExtensionFilter does not exist.
Its old replacement was discarded because it poisons the yellow "minimize" button.
docs.oracle.com says FileNameExtensionFilter is available "since 1.6"

I already have Javac 1.6 installed on my Lenovo Windows Seven.
Java 1.6 is the oldest one that uses FileNameExtensionFilter, and
that filter is the only one that permits JInternalFrame "minimize" buttons.


7 August 2015  A178

Adopted a simpler File::Open directory policy:
If B4OPTIONS.TXT is absent, start in B4 local folder.
Otherwise, start in most recent folder.
Do a thorough verification that folder paths are not null,
and that the file exists and is readable with length >0,
**before calling the EJIF constructor**

  Null will default to user's root, unwise;
  Null happens when a user says "no thanks" to File::Open and gets a skeleton.
(Maybe eliminate the skeleton! too!)
Strange: in EJIF, I commented out all the "load skeleton" stuff, and
now on "no thanks" I get a totally empty editor with no skeleton.
WORSE now I get a "negativeArraySizeException" at REJIF line 404:
evidently that empty window was submitted to the REJIF parser!

---yikes---

How did REJIF get loaded with blanks, for a "no thanks" response?
Somehow, involving a Timer trigger (which drives the parser) ...

EJIF line 232 is using sDir = /Users/Lampton/Desktop/Java/A178
Exception in thread "Timer-2" java.lang.NegativeArraySizeException
	at com.stellarsoftware.beam.REJIF.iParseAdjustables(REJIF.java:404)
	at com.stellarsoftware.beam.REJIF.parse(REJIF.java:244)
	at com.stellarsoftware.beam.DMF.vMasterParse(DMF.java:1320)
	at com.stellarsoftware.beam.BJIF$BlinkTask.run(BJIF.java:144)
	at java.util.TimerThread.mainLoop(Timer.java:555)
	at java.util.TimerThread.run(Timer.java:505)

....which shows that REJIF was created, EMPTY, on a "no thanks" !  Why? Where?
... and worse, the "Most recent folder" readout in Options:StartingFiles" is blank.
HOW CAN THAT BE BLANK upon receiving a "no thanks" ?  Should NOT have overwritten
the most recent path.

Reason is: EJIF gets created then installs its file.
Perform file validation prior to calling EJIF.

EJIF should never have to handle a "toOpen" chooser situation, which could "no thanks."
ToOpen should happen within DMF prior to constructing EJIF.
To generate a skeleton, DMF should deliver a path and file and name, then create OEJIF.

To do:
Simplify the number of places in DMF and EJIF that file paths are captured.
Should all be in the EJIF constructor, never in DMF (six places there).
Can all these path saves be moved into EJIF line 330 "bLoadFile(File f)"??



6 August 2015  A177

Rod Andrew asks, can File::Open be made to track recent directory use,
rather than always opening in local B4 app directory?

Yes it can: 177 Options::Startup File Options has a new checkbox
"Begin File:Open directory with B4 app"  [v]
"or our most recent diretory" [........]


4 August 2015  A176:
After developing three SSCCEs I find that the "Iconify" crash is due to the 
presence of LimitingDesktopMgr() in DMF's JDesktopPane. 

The purpose of the LimitingDesktopManager is to avoid windows slipping
up under the MenuBar where their buttons and grab bars are inaccessible.
Deleting it will re-establish this evil behavior.

31 July 2015 yikes, the yellow button "Iconify" crashes any subwindow
with Mac OS Look & Feel.  Metal OK; Numbus OK; CDE-Motif is OK.
Iconifying the Main window works OK: puts job into the taskbar as it should.
So the problem is limited to JInternalFrames under Mac OS Look&Feel.
Same problem going back to at least A113.
Same problem in A173 compiled with Java 1.5.0.
Same problem in graphics as well as editors.
Shows problem in NOT in GJIF nor EJIF: must be in BJIF or Look and Feel.

See /Java/Menu/TinyLookAndFeel.java for an example of a Java desktop
with JInternalFrames and a selectable LookAndFeel, that works OK.
Notice its use of "final" to secure certain key strings.  Maybe they
are the key to avoiding L&F crashes?

Or, maybe it has something to do with how/where/when a JIF gets added to the DMF?
TinyLookAndFeel creates a desktop "jdp", add JIFs, then add jdp to ContentPane.
  This works. 
SSCCE, in DMF, creates a "jdp," then setContentPane(jdp), then add JIFs to jdp.
  This works too. 
In B4 A176, setContentPane(jdp) is line 200; jdp.add(oejif) happens at 
line 280, 291, 302, 587, 600, 613, 773, 788, 802, 1140.
  This crashes on "Iconify."

The crash stacktrace starts with 

  "exception in thread "AWT-EventQueue-0" java.nullpointerexception..."

and the discussion at StackOverflfow.com says a common cause of this
unexpected null pointer is shadowing a global uninitialized object by a local
initialized object with the same name: when the local one goes out of scope,
suddenly the global null item is exposed.

From the Oracle website:
https://docs.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html

"Note: If you are going to set the L&F, you should do it as the very first step 
in your application. Otherwise you run the risk of initializing the Java L&F 
regardless of what L&F you've requested. This can happen inadvertently when a 
static field references a Swing class, which causes the L&F to be loaded. 
If no L&F has yet been specified, the default L&F for the JRE is loaded. 
For Sun's JRE the default is the Java L&F, for Apple's JRE the Apple L&F, etc." 

HOWEVER! the Oracle website then goes on to describe LookAndFeelDemo.java
explaining how to change L&Fs after a GUI is created.

A way forward would build an L&F chooser into my InternalFrameDemo, and
see if the internal frames are crashy in the Mac OS L&F mode.

StackOverflow  http://stackoverflow.com/questions/10138741/nullpointerexception
suggests trying panel.setDoubleBuffered(false) on each JPanel. 
I put these into EPanel and GPanel; no joy. 

Note that BJIF line 185 apparently allows EJIF to override ContentPane with its ePanel.
Might this lead to a multitude of troubles? EJIF calls this at line 164. 
Commented it out: still crashes on Iconify.

=======Bug Parade=========
http://issues.jalview.org/browse/JAL-1625
  "Swing NullPointerException in getVolatileOffscreenBuffer"
  Status: in Progress
  Resolution: Unresolved
  Fix versions:  None

Matlab Newsgroups: maybe "Universal Access in System Preferences panel?
 Nope, I turned off the only option "Smooth images"; no joy.

Perhaps a fresh Java download will help?
trying  https://www.java.com/en/download/mac_download.jsp
delivers jre-8u51-macosx-x64.dmg (57MB)
now: Java Runtime Environment 1.8.0_20-b26

==========Really the problem is in B4=================
since both TinyLookAndFeel.java and SSCCE.java work OK.

27 July 2015  A176:  Ten Most Recent Files
  ..adding string arrays to DMF.java via method addRecent()
  ..saving Recent.txt upon any change, or master exit
  ..installed "Recent" menus with up to 10 MenuItems apiece.
  ..works.   

21 July 2015   A176:  Lost Special-key Events?

This week running B4 175 on MacOS with E22-Astig, I found that one special key
combination drives the screen into a whole new territory:
the Ctrl-Left combo (narrow data field) drives the screen leftward
to show Weather, Clock, calendar, and calculator!  It is like a three
finger left swipe.

Similarly broken Ctrl-Right (B4 = widen field): right swipe.
Not broken: Alt-Right (split field), Ctrl-Alt-Down, Alt-Down, Ctrl-Z.

Worse, the event never reached the B4 editor: data field did not narrow.

Always worked before.  It is as if the OS has top priority on this keystroke
object and consumes it.

Web discussion of Mac KeyBindings and tools to modify them:  
   DoubleCommand on Sourceforge;  
   Karabiner (was KeyRemap4MacBook)

To stop Ctrl-right/left from changing desktops in Lion:
"Go to System Preferences > Keyboard > Shortcuts > Mission Control and change 
the settings for "Move left a space" and "Move right a space" or disable them completely."

so I unchecked "Move Left a Space" and "Move Right a Space"
  Ha, no longer changes desktops.  Now it moves among desktop icons. 
  AND BEAM FOUR'S CTRL-LEFT CTRL-RIGHT FUNCTIONS ARE RESTORED. 




10 June 2015  A176: Nimbus look-and-feel?

https://docs.oracle.com/javase/tutorial/uiswing/lookandfeel/nimbus.html
https://docs.oracle.com/javase/tutorial/uiswing/lookandfeel/_nimbusDefaults.html#primary

Vector based, cross platform, in Java 6 update 10  (1.6.0_10) and up.
Maybe this will help Rod Andrew?
Colors are ghastly: desktop is WAAAY too dark.
Worse, the top window bars are transparent and look like the desktop
when over the desktop, and look like windows behind when over a window.  

Aha: other users also have trouble with window decorations in Nimbus:
http://stackoverflow.com/questions/7612592/jframe-and-nimbus-look-and-feel
also  http://stackoverflow.com/questions/2451990/setopaquetrue-false-java

"This problem was exposed in a significant way with the Java 6's new 
Nimbus Look & Feel. There are numerous bug reports regarding transparent 
components filed against Nimbus (see stack overflow question Java Nimbus 
LAF with transparent text fields). The response of the Nimbus development 
team is this :

    "This is a problem [in] the orginal design of Swing and how it has been 
    confusing for years. The issue is setOpaque(false) has had a side effect 
    in [existing] LAFs which is that of hiding the background which is not 
    really what it is [meant] for. It is [meant] to say that the component 
    may have transparent parts and [Swing] should paint the parent component 
    behind it."




10 May 2015  A175: eliminating mnemonics, reducing accelerators
Rod Andrew continues to report intermittent failure of his editor
accelerators on recent versions, compiled under 1.8.0 and 1.5.0.
Seeing if simplifying the shortcuts has any improvement.  Also
created a test article /Java/Menu/MenuAccel.jar with just three
accelerators.


16 April 2015  A174: occasional failure to converge AutoRay
In applying E22-400-flaky.RAY to study E22-fwd-ChiefRay, a few of the
rays trace OK but do not converge to zero.  As if the iterative process
gets limited, or stopped, before achieving its 1E-12 error. 
Ray numbers around 550, 650, 740 show this trouble.

Aha: Problem disappears if I remove the Diams; converges OK.
With Diams replaced, these rays fail to reach focal plane.
Issue is: what to do with rays that are initially OK but poorly aimed,
yet which cannot be properly aimed without killing them?

Possible AutoRay warning: "Not all rays survived AutoRay adjustment."
Better for AutoRay: RMS, Nrays, Ngoals, Nterms, Nstarts, Nfailed, Nadjusted.
This should replace the default InOut adjustment dialog. 
(This InOut lists: RMS 1D average = xxx, Nrays, Ngoals, Nterms.)

Details of the issue: AutoRay counts ngoodrays as good starts,
not as good finishes.  Need both!
Problem is NOT detected in bBuildJacobian() BIGVAL lines 214, 226, 243:
Problem IS detected in dPerformResid() line 177.




15 April 2015  A174:
Installed three new outputs:  i,j,k give are the surface perp {x,y,z} in local frame.
Mods are in place, in REJIF and InOut.  

1 April 2015  A173: cleaned up GPanel, eliminating obsolete quadList tools.
Privatized all quadlists: baseList, batchList, randList, finishList, annoList.  
Made the four new tools below responsive to the respective code numbers 
QBASE=0, QBATCH=1, QRAND=2, QFINISH=3, QANNO=4:

   clearList(which)
   addRaw(x,y,z,op, which)
   addScaled(x,y,z,op, which)
   addScaled(xyz, op, which)

viewelaz() rotation tool remains within each client.

DemoPanel: migrated.  Works.
Histo1D:   migrated.  Works.
MapPanel:  migrated.  Works.
Histo2D:   migrated.  Works.
Plot2D:    migrated.  Works.
Plot3D:    migrated.  Works.
MTF:       migrated.  PostScript failed. Repaired.   
MPlot:     migrated.  Works; used E2-fwd-Multi.OPT
Layout:    migrated.  Works. 

The absent finishing of Layout was repaired by inserting calls to
renderList(finishList, x,x,x) into drawPage() and into redo(). 
Since doFinish() is no longer needed, it has been removed from
GPanel and its clients. 


27-30 March 2015  A172 implementing new quadlist for finishing Layout artwork.

There will now be five quad lists in GPanel:
  baseList    << always draw this base art including table rays.
  randList    << external random ray art built up from batchList. 
  finishList  << used only by Layout to finish its artwork after randoms.
  annoList    << contains annotation artwork. 
  batchList   << never drawn, transient stash for each random batch.
If these are protected, not private, then the client can add quads to any of them.
BETTER: KEEP THEM PRIVATE BUT OFFER PROTECTED METHODS TO CLEAR AND BUILD.

Plan: temporarily retain GPanel() drawing methods, but migrate each client out
of the implicit artwork GPanel methods into its own explicit xxxxList.add() method.
Try to everywhere use a small set of identical generalized quadList methods.
If succcessful, these can be retracted back into GPanel to serve all clients.
I am thinking of trying these four that let the lists be private....
     addRaw(x,y,z,op,qList)    << not scaled  
     add2D(x,y, op, qList)     << scaled but not rotated by viewelaz().
     add3D(xyz, op, qList)     << scaled and rotated by viewelaz().
     clearList(qList)          << empties qList
Also, viewelaz() could be retracted back into GPanel as well.

Histo1D is the simplest: 2D, random rays are internal.  Uses only baseList.
  doArt() initializes its baseList, then uses add2Dbase() for everything.
  It uses a unit box for its artwork. It never calls addAffines().  
  Mouse zoom and drag work OK. 
  Move the addScaledItem() into Histo1D and name it addScaledItemBase().
  Its required functions getax() and getay() dwell in GPanel, for mouse work.
  Works, screen and CAD.
  But maybe it would have extra room if it pre-called addAffines() ???


MapPanel is also simple: 2D, no randoms.  Uses only baseList. 
  Adopting private add2Dbase() to replace previous call into GPanel(). 
  Works, screen and CAD.


DemoPanel is almost as simple: 3D, twirl, zoom. No randoms.  Uses only baseList.
  Uses a unit box for its artwork.
  Oddly it calls addAffines() as part of setup, but seems to work without that call.
        uxcenter = 0.0;       // needed for GPanel's addAffines(): = default?
        uxspan = EXTRAROOM;   // needed for GPanel's addAffines(): = default?
        uycenter = 0.0;       // needed for GPanel's addAffines(): = default?
        uyspan = EXTRAROOM;   // needed for GPanel's addAffines(): = default?
  Now doArt() calls private add3Dview(x,y,z, opcode). 
  Its private viewelaz() might be identical to other clients.
  Works, screen and CAD.

Histo2D is similar: 3D; twirl, zoom etc.  Uses only baseList.
  It uses a unit box for its artwork. It never calls addAffines().
  Its doArt() initializes baseList, then uses private add3Dbase(xyz, op).
  This is merely addScaledItem() preceded by a viewelaz() rotation.
  Private methods addStringCenter() & addStringRight() are based on add2Dbase(). 
  Private cube-facet methods: addFace() & addLid() are based on add2Dbase().
  Gets its scaling zoom and 3D rotations from host GPanel.
  Works, screen and CAD. 
  Maybe better with extra room:  addAffines?


Plot2D is 2D but must deal with external random rays. Uses baseList and batchList. 
  Not a unit box: instead uses user units. 
  Still, the uxspan display coefficients are already in place and tested.
  Adopted explicit local add2Dbase().
  Works, screen and CAD, sending all randoms into baseList. 
  But... if I send random rays to randList, they fail to appear on display.
  They DO appear in CAD: na=85, nb=112, nc=0, nd=0.
  REVERTING to 16 March edition of Plot2D; random is OK, nrand=38, nbatch=3; 
  and CAD works OK with na=86, nb=41, nc=0, nd=0.
  Perhaps its random rays ought to feed into batchList? processed elsewhere?
  Replacing all the addScaledItem()s with addScaledItemBase() works OK
  But the rays use "buildScaledItem()" and this is not the same.
  What is it?
  In GPanel(), addScaledItem() calls getax() etc
  In GPanel(), there are many methods named buildScaledItem().
  The one with arguments (x,y,z,op) calls getax(), getay(), getaz().
  The one with arguments (x,y,op) passes (x,y,0,op) to the 3 arg implementation.
  What is different about these is they have a flag "bRand":
  bRand = true  ==> batchList, else baseList. 
  Ah, my error was putting random rays into randList. Use batchList.
  Works, screen and CAD.


Plot3D is 3D, adopting add3Dbase, but otherwise is like Plot2D. 
  It handles table rays and random rays using a switched quad writer:
    private void add3Deither(double xyz[], int op, boolean bRand)
    {
        if (bRand)
          add3Dbatch(xyz, op);
        else
          add3Dbase(xyz, op); 
    }
  Works, screen and CAD.


MPlotPanel ...


MTFPanel ...


Layout is 3D and needs the whole enchilada. I adopted a three-way quadwriter:
    
    int BASE = 0;    // macro for add2D()
    int BATCH = 1;   // macro for add2D()
    int FINISH = 2;  // macro for add2D()

    private void add3D(double xyz[], int op, int which)
    {
        switch (which)
        {
            case 0:  baseList.add(new XYZO(getax(xyz[0]), ... )); break; 
            case 1:  batchList.add(new XYZO(getax(xyz[0]), ... )); break; 
            case 2:  finishList.add(new XYZO(getax(xyz[0]), ...)); break; 
            default: baseList.add(new XYZO(getax(xyz[0]), ...));  break; 
        }
    }
Each of Layout's many artwork elements does its own viewelaz, then calls this add2D() routine. 

This Layout has several failures. 
   * Rulers, tickmarks, etc are collapsed to a point at the center. 
   * Final shading over rays is absent, although shading over arcs is present and correct.
   * CAD output is fragmented and rays are drawn with widths of 132 points,
      not the 0.5 points. Screen table rays are fat (5 points?) if viewed from behind. 
      (The dashed axes are drawn perfectly: they are in 3D of course.)

A169 for rulers? skips viewelaz(); calls addScaledItem(ticks[i], y, PATHTO);
A169 for axes?  calls viewelaz(xyz) then buildScaledItem(xyz, ..)
  (note: buildScaledItem() is just like addScaledItem() but has an output switch.)
So: addScaledItem() uses the same display scale but is not rotated. 

A172: add2D() is intended to replace both of these locally.
Perhaps I have failed to setScaleFactors()? saveCurrentAffines()? Nope they look OK.
Perhaps I need some diagnostics on the ruler construction?  
HA my ruler code at line 2014 is not calling scaled item! but is using the raw tick user values
as if they were points.  Adopted add2D() for 2D artwork like rulers; includes scaling.
^^ Fixes the rulers. 
 
Wrong line widths on rays: surface linewidths OK; axis linewidths OK.
The error must lie within drawOneRay(), line1170.  Ha, needs addRaw() quadList option.
^^ Fixes the ray artwork linewidths.

Failure to overlay the finish art on screen:
  Table rays are properly overlaid in Postscript.
  Random rays are properly overlaid in Postscript.
  It is the darn screen.  



23 - 26 March 2015  A171  Working problems 1 and 2 below from 169_GitHub release.

====The myTechList issue: likely culprit lies within GPanel, which owns myTechList====
GPanel line 244 doFinish() myTechList.clear() causes the problem with Histo1D.
    ^^ Commenting line 244 out fixes Histo1D.   Yay.
GPanel line 373 drawPage() myTechList.clear() preparing for doTechList call;
    ^^ This one is probably OK since doTechList should rebuild myTechList.
GPanel line 564 protected clearXYZO();  for clients; no local calls to this method. 
    ^^ clients are DemoPanel, H1Dpanel, H2Dpanel, LayoutPanel (3 places!), 
       MPlotPanel, MTFpanel, MapPanel, Plot2Panel, Plot3Panel. 
GPanel line 1239 localclip(); doubtful.

OK, so with line 244 commented out, and Histo1D working, how about Layout?
Layout without randoms: OK on screen, OK in Postscript.
Layout with randoms: 
   On screen: transient batches show but finish-art removes the randoms.
   In Postscript: randoms are all showing but finish-art is absent. 

Plot2D: somewhat like Layout
  on Screen transient batches show but completion removes those randoms.
  in Postscript the randoms are present as they should be. 

Annotations are working nicely.

26 March 2015 status:

                        A171       A171          A171            compare A169
GPanel line 245 "clear" present;  comment out; doFinish=repaint   shipping
================================================================================
H1D screen plain           OK        OK              OK              OK
H1D screen random          OK        OK              OK              OK
H1D PS plain               OK        OK              OK              OK
H1D PS random           no file.     OK              OK            no file.

Plot2D screen              OK        OK              OK              OK
Plot2D random              OK     transient          OK              OK
Plot2D PS plain            OK        OK              OK              OK
Plot2D PS random         no file.    OK              OK            no file.

Layout screen              OK        OK              OK              OK
Layout random              OK     transient      unfinished          OK
Layout PS plain            OK        OK              OK              OK
Layout PS random       fragment    fragment      unfinished       fragment

From these data there is some problem with the transfer of quadlists to CAD,
once random has been run. Notice that Map has no trouble with its CAD output.

Close examination of Layout: the table rays are properly overshaded, but the
random rays are drawn later and are not overshaded. SCREEN and POSTSCRIPT.
I think this indicates a simple failure to place the finish shading after the
random rays.  It appears to be applied before the random rays. 

Indeed, CAD::doCad() writes its buffers in the order called:
        initPS(pw, bPortrait, bbkg);
        writePSList(a, pw);   << surfaces and table rays and finish;
        writePSList(b, pw);   << random ray quadlist
        writePSList(c, pw);   << annotation quadlist
        pw.println(" showpage"); 

What is needed is some kind of fourth quadlist: myFinishList, 
supplied as a list that can be drawn following the random rays. 
This is for Layout only; other artwork clients provide nothing.

This is sufficiently different I will bump the rev to 172. 

============


"Transient" explanation: maybe doFinish() line 247 calling renderList()?
having no new randoms to show, and no call to get myRandList rendered?
Plot2d: GPanel::redo() is showing nbatch = 10, and nrand = 10, 20, ... growing.
Layout: GPanel::redo() is showing nbatch = 70, and nrand = 70, 140, .. growing.

Could GPanel::doFinish() be the culprit?  Replacing it with a simple repaint()
goes a long way towards solving the problems.  Remaining issue is how to get
LayoutPanel to conclude its artwork after everything else is drawn?

Cannot go atop myTechList since that is drawn at the bottom.
Could go atop myRandList.
Probably should avoid going atop myAnnoList.

It is useful that GPanel's doFinish() calls client doFinishArt() because
for instance that is how Map knows that it is time to write its output file.

LayoutPanel's doFinishArt() uses addXYZO() to draw foreground artwork.
  However, GPanel's host addXYZO() method appends to myTechList.
  Seems we need an addRand() method to append to myRandList: gulp.
LayoutPanel's doFinishArt() also calls putRadialArc() for drawing.
  However this local method uses addScaledItem() which in turn calls addXYZO().
  So this is getting driven towards always writing into myTechList. 
Perhaps the easiest fix is to use a pointer into myTechList:
Within each client:
  1a. write entire base artwork.
  1b. Save a pointer to top of base.
  1c. if doFinishArt() is called, start at pointer, not at zero. 
Within GPanel:
  2. Draw all rays to myRandList. 
  3. Have GPanel's doFinish() redraw myTechList starting at pointer
  4. draw Annotation.

But: exactly how does a client write rays?
    Its doArt() look draws table rays with kray=1,...nrays; 
    Or receives a generic call from Random to doRandomRay() so kray=0;
    In local drawOneRay(kray, bRandom) does the work:
      Runs the ray using RT13 appropriate trace method;
      Draws it using buildXYZO(bRandom) and buildScaleItem(bRandom) calls.
      In GPanel, these write to myBatchList if random, else to myTechList.
A client thus builds table rays into myTechList, and random rays into myBatchList.

Later, in GPanel::redo(), the bactch list gets added to myRandList and rendered.





23 March 2015, A169 downloaded from GitHub 16 March 2015: studying its two failures:

1. Histo1D (and Plot2D, etc) works great on screen including random rays, and 
Postscript is OK if there are no random rays, but its Postscript output crashes 
with a zero byte output file and a crash report as follows...

Exception in thread "AWT-EventQueue-0" java.lang.IndexOutOfBoundsException: Index: 0, Size: 0
	at java.util.ArrayList.rangeCheck(ArrayList.java:653)
	at java.util.ArrayList.get(ArrayList.java:429)
	at com.stellarsoftware.beam.CAD.listPS(CAD.java:112)

This is known to be an improper zeroing of the length of myTechList
caused by the random rays.  If I drag the artwork, CAD crash vanishes.
As if the random rays leave myTechList OK for screen rendering but
zeroed out when it gets to CAD.doCAD() which expects a nonzero list size.

2.  Layout without randoms works great on screen and into PostScript.
With random rays it is good on screen, and can deliver Postscript, but that
Postscript file is crippled: turned 90deg; no base art, shows all rays
but no finish art to shade those rays, as if major hunks are jumbled.

I will skip over rev 170-failed and commence analysis as A171. 


16 March 2015: A169, two improvements:

In Histo1D, there is a new feature "ShowAverage" that calculates
and displays the average histogrammed-variable value on the graphic.

In Ray Attributes, there is a new "Angle" feature that resuscitates
the old dot product  (RayVector dot NormalVector) that shows how far
off the normal each ray is, arriving at its intercept.  UserGuide
page 67 describes its use. 


30 Jan 2015  rev 168: Can coordinate breaks be curved?
  Rewriting OEJIF to eliminate their forced zero curvatures.
  ^^ Works well. Be sure to match curvatures to avoid false power.

27-29 Jan 2015
Rewriting CoordBreak redirectors CBin, CBout in RT13.java

  What should happen is redirector CBin should do nothing.
  Its ray locations and orientations should be automatically captured
  by the preceding calls to labtovx() and vPropagate().
  Why do we need it? (a) it is a convenient adjustable catcher;
  (b) it guarantees that Layout knows which ray segments not to draw.

  What should happen in the redirector CBout is:
  local coordinates furnished by its labtovx() and vPropagate should
  get overwritten by grabbing the local coordinates from CBin. 
  The subsequent conversion to labframe is done by vxtolab().

^^Updated RT13.java 27 Jan 2015, A166.

CoordBreaks are planar; Layout reveals some inconsistent artwork
when a curvature is assigned.  OEJIF should zero out all the
curvatures and polynomials when a CB is detected.  
^^ Updated OEJIF.java  28 Jan 2015
^^ and eliminated complaint about "Zernikes require Diameters"
CoordBreak planarity should be carefully documented in the end user files.


====Schematic ray loop, without bailouts=============

  for (j=1; j<=nsurfs; j++)  
  {
      labtovx(ray[j-1], ray[j], surf[j]); // translate then rotate to localframe
      d = dIntercept(ray[j], surf[j]);    // evaluate distance to intercept
      vPropagate(ray[j], d, surf[j]);     // advance ray to surface
      iRedirect(ray[j], surf[j]);         // redirect ray in local frame
      vxtolab(ray[j], surf[j]);           // rotate then translate to labframe
  }


==========A166 initial publish on GitHub=============

29 Dec 2014   Removed defined constants DEMO and DEMOST from all classes.
  There is no demo edition in 166 and following revisions.

Verified clean compile with Xlint under javac 1.5.0 and 1.8.0.

21 Dec 2014   A166_1.8.0  TO DO: understand & fix Coordinate Break issues.
  When a CBin/CBout pair follows a nontilted surface, it works OK
  When a CBin/CBout pair follows a tilted surface, the angles are wrong.

  Simpler demo:  CoordBreakTest files have a pitchable plano wobble plate.
  The wobble plate does not alter any ray directions.  But the null CB
  does alter ray directions, depending on the wobble plate angle.


5 Dec 2014:  Are coordinate breaks planar?
  Or could a curved break be placed in a meniscus space between our ADC prisms?
  Yikes, curved CBs are OK but there is a numerical direction error U=-0.003 radian
  introduced at rows 12-13 in the file Echo22-fwd-fourCB.OPT, Echo22-fwd-fourCB.RAY.
  Problem persists with flat CBs.  Only CB #3 is at fault; CBs 1, 2, and 4 are OK.
  Only CB#3 follows a tilted optical surface.  Explore tilts & pitches.

4 Dec 2014:  added Zout to Xout and Yout in MAP. Global not local coords for ray starts.

18 Nov 2014:  Ctrl-Alt-Down works, but Ctrl-Z does not undo it.
Should lilstash be eliminated, always using bigstash?
This would be a simplification, costing only memory, not speed.


13 Nov 2014   A166 both compilers: fixing Plot2D �Black Screen of Death� when no good rays.
  ^^ Done; plot continues with manual scale factors, or unit scale factors if manual = absent.
  Compilers are Javac 1.5.0 and 1.8.0 with -Xlint turned on to see all warnings. 

13 Nov 2014   A166_1.8.0  investigating the error message
�component must be showing on the screen to determine its location,�

http://stackoverflow.com/questions/18968815/jcombobox-as-cell-editor-java-awt-illegalcomponentstateexception-component-must
One fix is�
void focusGained() 
{
  SwingUtilities.invokeLater(new Runnable() 
  { 
    ... focus gained body including show of pulldown menu here ... 
  });
}

�The invokeLater puts a new message containing the Runnable at the end of the queue, 
i.e. after all the existing ones. That Runnable is executed only when the message 
makes it to the head, after all those other messages have been processed.�

�In order for getLocationOnScreen to work on the
component must be showing. That is, it must have a heavy weight
ancestor with all its parents visible. After the call to prepareEditor
the returned component doesn't have a valid parent sogetLocationOnScreen
throws the exception.�

A different fix is�
http://stackoverflow.com/questions/2432839/what-is-the-relation-between-contentpane-and-jpanel
�I believe the reason is because Swing was built off of AWT, and Container is a top level 
AWT object. It really isn't the greatest design choice, though, since you generally don't 
want to mix AWT (heavyweight) objects with Swing (lightweight). 
I think the best way to handle it is to always cast the contentPane to a JPanel:�

    JPanel contentPanel = (JPanel) myFrame.getContentPane();

^^ Ha. This works: I get the contentPanel size and location, both EJIF and GJIF.
   This means that BJIF::QuickPNG can capture both editor and graphics windows.



12 Nov 2014:  A166_1.8.0  Additional questions
 1.  Do Containers have an isVisible() method?  The run-time Exception
�Exception in thread "Timer-3" java.awt.IllegalComponentStateException: 
component must be showing on the screen to determine its location,�
is from BJIF�s use of myC for myComponent, the content pane of the BJIF
host.  But could this Component be interrogated, to be sure it exists?
  ^^ Yes it can be interrogated;  Yes it is visible; still crashes however. 

 2. Could the BJIF�s client JIF be passed to doQuickPNG(), to help assure
its visibility?

 3.  Or � lacking that � could doQuickPNG() be passed BJIF itself? 
   ^^ Yes this works, but now there is a lot of surrounding screen that
   is also captured.   Evidently the BJIF extends well outside its frame,
   including background on all four sides. 

 4. Or � lacking that � could doQuickPNG be moved into its own class,
to be called as necessary by a guaranteed-visible JIFrame?
  ^^ Maybe, but unnecessary: the JPanel cast method above solves the problem.


12 Nov 2014:  A166_1.8.0  showSaveDialog() failure to show: more tests
 1.  Does WriteCAD have the same trouble: no showSaveDialog?
       ^^ No; WriteCAD is OK 12 reps; QuickPNG failed on 2nd rep.
 2.  What if I instead called showOpenDialog()?
       ^^ No: same trouble.
 3.  What happens running on LINUX?
       ^^ Don�t care; changing save output routine; see above. 

Notes on CAD::doCAD()   �a fully static library.
 doCAD() has the usual JFileChooser, directory initialization, and
 the usual jft.showSaveDialog(null). 

BJIF::doQuickPNG() is dynamic.  Maybe should be static? 
   ^^  No joy, same trouble.

Could showSaveDialog() be handed a faulty directory, thus crashing?
   ^^ Nope: WriteCAD and QuickPNG always get the proper CWD.

ALTERNATE DESIGN: HAVE QuickPNG AVOID showSaveDialog, instead always
put Quick1.PNG onto CWD.  Problem solved. 
Fancier: increment the number as needed. 
  ^^ Done; works for QuickPNG of EJIFs and GJIFs.

UNSOLVED ISSUE OF WHY showSaveDialog() IS FLAKY.
But the fix eliminates showSaveDialog() entirely, see above.



11 Nov Potential issue:  JFileChooser: setDragEnabled(boolean b)
 Default setting for JFCs is false.
 showSaveDialog can throw a HeadlessException if b=true and if
 GraphicsEnvironment.isHeadless() returns true.
 Not my problem because:   
 1. I am not seeing any exceptions being thrown;
 2. I have not enabled drag. 


11 Nov 2014   A166_1.8.0   THREAD SAFETY?
�If a resource is created, used and disposed within
the control of the same thread,
and never escapes the control of this thread,
the use of that resource is thread safe.�

I think this means that I should set BJIF�s jfc = null when done.
Nope; no joy.  Some runs give eight good QuickPNGs; others crash immediately.



11 Nov 2014   A166_1.6.0
  No trouble with QuickPNG compiling and running under 1.6.0.
  MacBook Air 1.8.0 often fails to QuickPNG with this compile.


11 Nov 2014  A166_ripped: 
  Hoping to discover where the showSaveDialog() gets into trouble.
  Compiling with 1.8.0, I find that sometimes it goes 4 or 5 good QuickPNGs
  before failing to showSaveDialog.  Most often just one good QuickPNG.

  The problem is not a mis-initialized JFileChooser, since in the two cases its
  signature is the same:

jfc: javax.swing.JFileChooser[,0,0,0x0,invalid,layout=javax.swing.BoxLayout,
alignmentX=0.0,alignmentY=0.0,border=,flags=320,maximumSize=,minimumSize=,preferredSize=,
approveButtonText=,currentDirectory=/Users/Lampton/Desktop/Java/A166_ripped,
dialogTitle=,dialogType=OPEN_DIALOG,fileSelectionMode=FILES_ONLY,
returnValue=ERROR_OPTION,selectedFile=,useFileHiding=true]
   OK: showSaveDialog appears. 

jfc: javax.swing.JFileChooser[,0,0,0x0,invalid,layout=javax.swing.BoxLayout,
alignmentX=0.0,alignmentY=0.0,border=,flags=320,maximumSize=,minimumSize=,preferredSize=,
approveButtonText=,currentDirectory=/Users/Lampton/Desktop/Java/A166_ripped,
dialogTitle=,dialogType=OPEN_DIALOG,fileSelectionMode=FILES_ONLY,
returnValue=ERROR_OPTION,selectedFile=,useFileHiding=true]
   NG. showSaveDialog fails to appear.

Maybe blinker is too quick? 
Nope: I changed 300ms to 900ms; same mix of sometimes OK, sometimes NG.

Odd thing:  usually the first QuickPNG request is OK, but 2nd request fails.
Could this be a failure to reinitialize something?

Potential trouble with compressed products: on 1.8.0, my ProGuard calls
/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/ui.jar
.. why not 1.8.0.jdk ?


11 Nov 2014  Created two MSMEs.
  FileChooser::Demo.java is a single-window app that has a JFileChooser
  and a button that summons showSaveDialog().  
  Compiled with 1.8.0;  Works fine.

  FileChooser::MDI.java is an MDI app with five JInternalFrames + JFileChooser.
  Each JIF has a button that summons showSaveDialog(). 
  Compiled with 1.8.0;  works fine. 

A165_1.5.0   10 Nov 2014: compiles OK under 1.5.0; runs OK under 1.6.0_38
  QuickPNG works as it should.
  Running this under 1.8.0:  Also runs OK here.
  Transported to MacBook Air RayTracing folder: also works. 

  Somehow, the 1.8.0 runtime is OK with products compiled under 1.5.0,
  but not under 1.6.0 nor 1.8.0.

  Puzzle: why does FileChooser/Demo run OK compiled in 1.8.0,
  yet B4_165 fileChooser not run OK compiled in 1.8.0, needing 1.5.0?

  Could this have something to do with JInternalFrame vs JFrame?


AA165_1.6.0    9 Nov 2014: compiles and runs fine under 1.6.0
but moving this to the Macbook Air and 1.8.0 environment,
QuickPNG fails to showSaveDialog.   Why?

(Sigh) I suppose I will have to create a Minimum Size Misbehaving Example.


A165_1.8.0    7 Nov 2014:  Why does QuickPNG capture more than its window?
QuickPNG happens as part of the blink task in BJIF.  Here, "this" is the
current front window. 
        
   . . . .
   Point p = this.getLocationOnScreen(); 
   Rectangle rect = this.getBounds(); 
   rect.x = p.x; 
   rect.y = p.y;
   try
   {
      Robot robot = new Robot();	
      BufferedImage image = robot.createScreenCapture(rect);
      this.paint(image.getGraphics()); 
      ImageIO.write(image, "png", new File(s));
    }
     . . . .

On the Web, someone suggests using the ContentPane for
location and for bounds: 

   Point pos = this.getContentPane().getLocationOnScreen();
   Rectangle clientRect = this.getContentPane().getBounds(); 
   clientRect.x = pos.x;
   clientRect.y = pos.y;

Hmmm.  This leaves the title bar, traffic signals, and a few mm of
extra border top and left side;  Trims away a few mm bottom and right.
So: the size is OK but the location is still too far towards the upper left.

Adding offsets offx=20, offy=30: 
Hmmm.  Crashes BEAM FOUR when I request QuickPNG: no file name dialog appears,
and all menus cease working.  However the Apple �B4� menubar does work. 
(Find out WHY).  Same trouble with offx=0, offy=0.
Inserting diagnostics,  doQuickPNG runs smoothly up to �Showing SaveDialog� 
and then B4 just hangs, presumably waiting for the save dialog result.
But no Savedialog appears on screen!  Maybe a multiple-screen Mac issue?

Recompiling A165 on old Mac as B4_165_1.6.0:  QuickPNG works just fine.


======== Mac F3 key: shows all current desktops =======

Nope, the invisible 165_1.8.0 SaveDialog is not on any of them. Grrr.
Maybe I should not write 
        int result = jfc.showSaveDialog(null);
but rather
	int result = jfc.showSaveDialog(this); 
No no it is failing to appear again.

Could it be, my class FileFilterPNG is faulty?
Its method boolean accept(File f) is this�.

class FileFilterPNG exte/Users/Lampton/Desktop/Javands FileFilter
{
   public boolean accept(File f)
   {
      if (f.isDirectory())
        return true; 
      return f.getName().toLowerCase().endsWith(".png");
   }

   public String getDescription()
   {
      return "PNG image";
   }
}

======= Testing QuickPNG in Other Editions on MacbookAir 1.8.0 =====
A165_1.8.0  compiled & compressed: fails to showSaveDialog
A164_1.8.0:  same fails to showSaveDialog
A163_1.8.0:  same fails to showSaveDialog

in A160: BEAM4_159_PC: fails. 
in A160: BEAM4_158_PC: fails.
in A160: BEAM4_158:    fails.
in A157: BEAM4_157:    fails.
in A156: BEAM4_156:    works.  (compiled 10 Oct 2013).
in Toshiba/A156: BEAM4_156:    fails. 
in Toshiba/A155: BEAM4_154:    fails.
in Toshiba/A150: BEAM4_150_PC: fails.
in Toshiba/A150: BEAM4_150_Mac:fails./Users/Lampton/Desktop/Java/A156_QuickPNG_OK

Golly: I moved the A156 to the Toshiba, and HERE showSaveDialog fails.
See Toshiba/A156_QuickPNG_OK.
An hour later, it works OK; yet Toshiba/A156_damaged still fails.  

And: I moved A156 to the Lexar; here showSaveDialog fails.
  but now it works!

Yet on the Mac/A156, showSaveDialog works. 
Must be something else.
What?

Is it OK that BJIF is an abstract class extending JInternalFrame?
rather than an actual final class? 

Anyway, recompiling under 1.6.0 seems to end the trouble with QuickPNG.
ALWAYS DO PRODUCTION UNDER 1.6.0 NEVER UNDER 1.8.0 evidently less stable.





A164_1.8.0 compiled 22 Oct 2014 with wider MapOption field
 to show all four buttons. 
 MapPanel.java text listing output: line 542

 Eliminating  public static final long serialVersionUID = 42L; in each class,
 Installing   @SuppressWarnings("serial")  ahead of each class definition.
Adjustment.java:  unneeded.
AutoAdj.java:     unneeded.
AutoRay.java:     unneeded.
B4.java:          unused?
B4constants.java: unneeded.
BJIF.java:        changed. 
CAD.java:         unneeded.
Clipper.java:     unneeded.
Comparo.java:     unneeded.
DemoPanel.java:   changed.
DMF.java:         changed.
EJIF.java:        changed.
EPanel.java:      changed.
FileFilterGIF.java:  unneeded.
FileFilterJPG.java:  unneeded.
FileFilterPNG.java:  unneeded.
GJIF.java:        changed.
GPanel.java:      changed.
H1DPanel.java:    changed.
H2DPanel.java:    changed.
InOut.java:       unneeded.
LayoutPanel.java: changed.
MapPanel.java:    changed.
MEJIF.java:       changed.
MPlotPanel.java:  changed.
MTFPanel.java:    changed.
OEJIF.java:       changed.
Options.java:     changed.
Plot2Panel.java:  changed.
Plot3Panel.java:  changed.
Random.java:      unneeded.
Registry.java:    unneeded.
REJIF.java:       changed.
RT13.java:        unneeded.
U.java:           unneeded.
XYZO.java:        unneeded.
Z.java:           unneeded.
After these changes, Xlint continues to give a clean compile.


A164_1.8.0 recompiled 13 Oct 2014 on Mac with javac 1.8.0_20
   will be incompatible with older installations
   Has the new �About� item.
   Two Xlint complaints, both with Drag N Drop.
   Runs great under java 1.8.0


A164_1.5.0  recompiling 13 Oct 2014 on Lenovo with javac 1.5.0_06
   should make 164 compatible with older installations.
   Added "About" item showing compiler.
   No Xlint complaints under 1.5.0.
   runs great under 1.6.0 on Lenovo.
   


A164_1.8.0  Installing a key combo to copy field �all-the-way-down�
   This should allow me great speed in managing huge ray tables.
   ^^ Works: Control Alt DownArrow.
   ^^ Also updated Help::SpecialKeys to remind me of this addition.




A163_1.8.0 compiled on Mac OS X 10.9.5 javac 1.8.0_20; 
   two lint warnings. No ProGuard;
   ProGuard, version 4.1
   Reading program jar [/Users/Lampton/Desktop/Java/A163_1.8.0/BEAM4U.jar]
   Error: Can't read [/Users/Lampton/Desktop/Java/A163_1.8.0/BEAM4U.jar] 
   (Can't process class [com/stellarsoftware/beam/AdjHost$1.class] 
   (Unsupported version number [52.0] for class format))



A163_1.6.0 compiled on Mac SO X 10.6.8 javac 1.6.0_65; 
   no lint warnings.


A163_1.5.0 compiled on Lenovo Win 7    javac 1.5.0_06; 
   no lint warnings.


8 Oct 2014: used Java 1.8.0_20 Xlint option, 70 warnings, to clean up.
Most warnings were redundant casts or missing serialVersionUID. 
Just two warnings remain, both in DragNrop:

  1. com/stellarsoftware/beam/DMF.java:1483: warning: [unchecked] unchecked cast
           java.util.List<File> fileList = (java.util.List<File>) transferable.getTransferData(d);
                                                                                              ^
  required: List<File>
  found:    Object

Alternately, use raw type:
  1�.  com/stellarsoftware/beam/DMF.java:1483: warning: [rawtypes] found raw type: List
           java.util.List fileList = (java.util.List) transferable.getTransferData(d);
                    ^
  missing type arguments for generic class List<E>
  where E is a type-variable:
    E extends Object declared in interface List

Here, if I *do* use the generic java.util.List, then I get an unconfirmed cast warning. 
So I am screwed either way.  

  2. com/stellarsoftware/beam/DMF.java:1484: warning: [rawtypes] found raw type: Iterator
           Iterator iterator = fileList.iterator();  // ???
           ^
  missing type arguments for generic class Iterator<E>
  where E is a type-variable:
    E extends Object declared in interface Iterator


Other authors perform file drag-n-drop without casts or generic types.
See /Java/DragDrop/MainClass.java for an example.

�FileDrop� has ten warnings under 1.8.0 Xlint: unchecked add() exceptions.
�Example� FileDrop demonstrator has no warnings.



Old MacBook:  Mac OS X 10.6.8,  javac 1.6.0_65, java 1.6.0_65
Compiling A163_Working: no error messages
Compiling with -Xlint:  18 warnings!

Runs OK, but only the diagonal shaded half of the window dragbutton is
recognized; the unshaded part is deaf.

Mosaic-2 gives 11 microns as it should.
MosaicReverse-1 gives 10^-12 upon AutoRay, then after FP calc, 10^-9 as it should.
No complaints; no windows freezing.

Then recompiling, recompressing and creating the .JAR file,
continues to function as it should.  Perfect window action, on old MacBook.

B4 163 written to Toshiba-EXT and distributed to Lenovo and new MacBook.
This B4 163 works great on new MacBook, Java 1.8.0_20:
  Mosaic-2 gives correct RMS blur
  MosaicReverse-1 gives correct AutoRay and image field
  No sign of damaged window frames.
  Suggests there may be a bug in the 1.8.0 compiler but not in the
  Java runtime 1.8.0 ??



7 October 2014: A163_Working
Trying to run B4-163 compiled under Mac Javac 1.8.0 on my old Lenovo
whose Java runtime is 1.6.0_38:
"Unsupported major.minor version" at java.lang.ClassLoader.defineClass1(Native Method)

Recompiling with Lenovo's Javac 1.5.0_06
  Now it runs.  Runs great; Mosaic-2 has 11 microns blur, 3 field points. 
  No screwy window ghosts. 
  MosaicReverse-1 and AutoRay: work just fine.
 
Recompiling with -Xlint, Lenovo Javac has 3 warnings:
  1. OEJIF line 171 fallthrough possible into case default: RT13.surfs... = OTLENS;

  2. DMF.java line 1376: serializable class xxx.LimitingDesktopMgr has no definition
     of serialVersionUID prior to "class LimitingDesktopMgr extends..."
  3. RT13.java line 1365 fallthrough possible into case "...default:"




7 Oct 2014:  Running this version in Terminal, looking for evidence
of Rod Andrew�s window freezing effect, or any error messages whatsoever.

Rod Andrew is running Mac OS X 10.7.5 with Java 1.6.0_65
My MacBook is running Mac OS X 10.9.5 with Java 1.8.0_20, Javac 1.8.0_20

To get some experience on freezing windows I will do the Jacobi corrector
reverse trace fiber position distortion work with B4-163 in A163_Working.

Compiling javac 1.8.0_20 is clean: no warnings
Compiling with -Xlint gives 70 warnings: mostly unqualified ArrayLists,
but also the opposite complaint: (XYZO) cast unnecessary.  Go figure. 
see Warnings.txt


0.  Remove the cryostat window and the filter;
1.  Forward ray traces at three field locations, establish focus;
2.  Reverse ray traces from 202 field locations, hex pattern & AutoRay;
3.  Gather chief reverse ray locations
4.  Feed them into some kind of interpolation fitter.


=== notes ===
Window resizing is balky; sometimes does not resize.  No err msgs.

Dragging a window sometimes leaves ghost outlines behind.

Yikes saving a file twice gives two files: XXX.RAY and XX.RAY 2
  perhaps ask permission to overwrite before saving??

Yikes QuickPG captures a smidgin of surrounding display screen!
  needs manual cropping.  Better that the .PNG contain just the graphic.





25 June 2014, A163 PERMANENT SCROLLERS WITH RESERVED RESIZER BUTTON
  Aha: in BorderLayout use a subpanel "South" to contain the
  horizontal scrollbar + blank zone to its right. 
  South dominates East: it occupies the entire bottom of a BorderLayout. 
  (The vertical scrollbar becomes East; cannot intrude into South.)

      hsb = new JScrollBar(JScrollBar.HORIZONTAL, 0, 0, 0, IMAX-30); 
      hsb.addAdjustmentListener(this); 
      JPanel southPane = new JPanel(); 
      southPane.setLayout(new BoxLayout(southPane, BoxLayout.X_AXIS));
      southPane.add(hsb); 
      southPane.add(Box.createRigidArea(new Dimension(16,10)));
      cPane.add(southPane, BorderLayout.SOUTH); 
      cPane.validate();
  
   Works; looks just like Notepad.  OK on Mac??
   YES A163 WORKS GREAT ON MAC: NO SELF-SCROLLING.

   Also added: outfile capability for MapPanel, listing
   vertVar, horVar, ngood, <x>, <y> for distortion testing. 



24 June 2014: A162, testing CBin/CBout I find that pitch of CBin 
  has no effect, while pitch on CBout has full effect. I would have 
  thought that either would work?  NOPE.  Put this fact into B4GUIDE. 

  Also:  MapPanel now has deviated ruler tick values:
  Put this new artwork into the B4GUIDE. 


24 June 2014:  On Linux/Zorin, no self-scrolling bug.
  The resize handles are exterior corner brackets like Windows. 

  On 162 the CopyDown function is smooth, but the mouseDrag marking
  is jerky and irregular, both with 162_BLINK and 162_NO_BLINK.
  On 158 both are smoooth.
  How about revert to 158, which has scrollbars permanently in place?
  Q:  DOES 158 ELIMINATE THE MAC SELF-SCROLLING BUG?  NO IT DOES NOT.
  Even with SBs permanent, the LRCorner is doubly occupied on the Mac.
  How to restrict the LR corner to be a ONLY a resizer?



22 June 2014 A162: Unexplained fact:
  Oracle's ScrollDemo2 uses the default SCROLLBAR_AS_NEEDED policy,
  and has single scrollbar button merged with resize button, 
  yet does not suffer from runaway self-scrolling.  

  So: where in the chain does the Mac self-scrolling bug appear?
    ScrollDemo2  ..not here
    ScrollDisks  ..not here
    ScrollCaret  ..not here
    ScrollChars  ..not here
    A162_AS_NEEDED ..here.

  TextEditor_GaddisMuganda shares its lower right button between
  resizing and scrolling, but does not have the self-scrolling bug.

  This situation suggests that my self-scrolling oscillator is
  due to some unplanned sneak path:
    1. repaint() triggers an enlargement
    2. enlargement triggers a repaint. 



20 June 2014  A162:  STEP THREE.
  Introduce clientArea into EPanel and making it respond to contents. 
  Which initial char[][] policy?  blanks, or nulls? Blanks like previous B4.

  The EPanel constructor MUST begin with super(new BorderLayout());
  lest the client and viewport both collapse to 10x10 pixels.
  The ArtPanel should be assigned the BorderLayout.CENTER position.
  CENTER portion automatically occupies all available space. 

  All done except for dragging mouse & marking table block;  Mac test...

================20 June 2014 Mac Test==========
  With zero or two scrollbars, does not run away.
  With one scrollbar, it DOES run away if the scroll button is dragged.
  Say! if there were always two scrollbars, then problem is fixed!
  How about setting scrollbar policy in its constructor 
    new JScrollPane(component, VERTICAL_SCROLLBAR_ALWAYS, HORIZONTAL_SCROLLBAR_ALWAYS); 
  which ought to leave the lower RH corner always available for resizing ? 
  Aha, this works.

  Remaining task: get the blue markup zone running. 
  ^^ DONE.

  Yikes, all the descenders are gone:  y looks like v!
  Using the blinking caret as a size comparison tool....
  ah yes all text needs to be offset upwards by 1/4 of hc. 
  Or better, downwards by (3*hc)/4 from j*hc. 
  ^^ Works. 

  Yikes, my sliders cannot carry my view past the final character in a row,
  until I key my caret rightward using RightArrow.  Then, the slider power
  increases and I can scroll there easily.  
  Ditto, bottom of the data area.
  What is limiting my slider range??  and how does the caret increase it??
    ^^ FIXED, using augmented maxlinelen and nlines...
          int xpix = wc*Math.max(maxlinelen+8, iCaret+8); 
          int ypix = hc*Math.max(nlines+4, jCaret+4); 
          clientSize = new Dimension(xpix, ypix); 


17 June 2014  A161:  STEP TWO.
  In EPanel, eliminate iOff and jOff thereby blocking arrow scrolling.
  Viewport is now fixed at {0,0}.   Done. 

17 June 2014 A160:   STEP ONE.
  Eliminate all scroller references from EJIF and EPanel.
    (Graphics never had any scrollers to worry about.)
  Done, scrollers gone;
  Caret drives viewport via EPanel's iOff and jOff, EPanel 1140 ff. 
  Not a bad compromise! Slowly scrolls L,R,U,D using caret & arrows. 
  Scrollbars are totally absent, hence no selfscrolling. 


14 June 2014  A160 
  Recently developed scroll scheme in Java/Editors/ScrollChars
  has three important classes:
      MenuFrame extends JFrame    ...has the menus and their listeners
      DualPane extends JPanel     ...has mouse handler, scroller...
      ClientPanel extends JPanel  ...internal to DualPane; does artwork.

  Activities when a modifying Event is received:   
    1. Modify the underlying data model; 
    2. Update current graphics envelope "clientArea" = {width, height};
    3. Use "dPanel" for dPanel.scrollRectToVisible(thisEventRect); 
    4. Inform scrollpane with dPanel.setPreferredSize(area);
       (note scrollbars appear only when clientArea > ScrollerArea) 
    5. Update scrollpane with dPanel.revalidate();
    6. And only then call for repaint() to show the revised picture. 
  
  This editor uses fully implicit scrolling, no explicit management.
  Scroll action is good, no self-scrolling runaway behavior.
  (However, when there is a single scrollbar, the LRH corner does become
  a dual function button yet it does not confuse drag with click.)

--A160  1 June 2014
--Self-Scrolling Java ScrollBar Bug: How common is this problem?

Gaddis-Muganda TextEditor: does not have this bug.
  when both scrollers are present: five boxes; safe.
  Only H scroller: two boxes, corner *IS* diagonally shared, yet safe!
  Only V scroller: two boxes; *IS* shared; yet still safe!
  No scroller: one box, button is NOT active, sizing handle works.

MikesTextEditor:  no bug; same as Gaddis-Muganda.

TextEditor Turk4n : no bug, the two buttons either axis never share
the corner sizing handle box.  Always stand separate from it without 
any combo diagonal divided action. 

ScrollDisks: no bug; two boxes, diagonal share, yet safe. 
  Dragging its scroll button *succeeds* in dragging the pane.
  So this is successfully a dual purpose box.  
  
I am thinking that these editors (above) all use the built-in implicit
Scrollable interface that allows the ScrollPane to interrogate, and
respond, to its client panel needs. 

Another editor,  ScrollCaret, does not use the implicit built-in interface,
but instead is fully explicit, yet works OK. 


Task: improve communications to ScrollPane. 
Example: Java/Editors/ScrollDemoDisks �disks expanding the view space.
Technique: on mouseReleased()
        calculate the client h,w; compare to hprev,wprev; 
        if (changed) 
        {
            drawingPanel.setPreferredSize(area); // update preferred drawing size.
            drawingPanel.revalidate();           // scrollpane will sense this. 
        }
        drawingPane.repaint();




31 May 2014  A159 working on EJIF line 450: the HSB event listener & handler:
  =======HSB Event======
  java.awt.event.AdjustmentEvent[ADJUSTMENT_VALUE_CHANGED, adjType=TRACK, value=1,isAdjusting=false] 
  on javax.swing.JScrollBar  [0,239,376x15,invalid,alignmentX=0.0,
  alignmentY=0.0,border=,flags=4194304,maximumSize=,minimumSize=,preferredSize=,
  blockIncrement=1,orientation=HORIZONTAL,unitIncrement=1]

What I find is that the slider messages have isAdjusting=true while
the arrow button messages have isAdjusting=false, and each track click
delivers TWO messages: one true, one false.  

If I consume all the isAdjusting=false messages, I figure I will get
all those button clicks. 

"isAdjusting" is private to the Event.  It is true if the event is one of a series
of multiple adjustment events.  See www.docjar.org/docs/api/awt/event/AdjustmentEvent.
    methods:
public boolean getValueIsAdjusting()
public Adjustable getAdjustable()
public int getAdjustmentType()
  .. if this equals "UNIT_INCREMENT" that is one step rightward. 

Yikes, I cannot consume scroller event:
  "consume() has protected access in java.awt.AWTEvent"
http://docstore.mik.ua/orelly/java/awt/ch04_03.htm
  "Noncomponent events cannot be consumed. Only keyboard and mouse event types can be flagged as consumed." 

Hide the arrow buttons??  Zero size?
  http://stackoverflow.com/questions/7633354/how-to-hide-the-arrow-buttons-in-a-jscrollbar
  overflow.com/questions/19577893/custom-scrollbar-arrows

Uninstall the button?
  oracle.com/javase/7/docs/api/javax/swing/plaf/basic/BasicScrollBarUI.html#uninstallComponents()
  protected void uninstallComponents()


27 May A159: which editors have explicit JScrollPane management?
  not Java/Editors/MikesTextEditor: that uses a stock JTextArea and implicit scrolling.
  but Java/Editors/FrameScroller: that has explicit communications.

  I think that FrameScroller would be a good candidate to see if...
  1. Does it suffer the self-scroll bug?
      if so: does consuming the scroll event kill the bug?
      if so: does replacing my scroll commands with Scrollable interface kill the bug?
      if not: golly what now?



  
Scrollable interface allows JScrollPane to interrogate its content:
  http://docs.oracle.com/javase/8/docs/api/javax/swing/Scrollable.html
  LOTS of parameters...including "preferredViewportSize()" that encompasses it all,
  but also rowCount etc...
  This way, an "EditPanel" component that implements Scrollable will be able
  to report its size when interrogated.
  How to trigger an interrogation?  Have every size-changing event request
  a JSP.revalidate().  

  Example: EditPanelEditor. 

26 May 2014  A159: Scrollable interface, and scroll-savvy clients
  http://docs.oracle.com/javase/tutorial/uiswing/components/scrollpane.html#scrollable
  Example illustrates both directions:
   * moving scroll buttons moves the view zone
   * mouse action within the view zone moves the view & scroll buttons
  Two ways!  How cool is that.

To do: add a scroll event listener to my scrollbars, and thereby
diagnose what message pattern is generated by the self-scrolling problem.
Then, write an Event.consume() to block the most offensive of these.

Using and Customizing a JScrollBar:
  http://www.java2s.com/Tutorial/Java/0240__Swing/CustomizingaJScrollBarLookandFeel.htm
  http://www.java2s.com/Tutorial/Java/0240__Swing/JScrollBarandAdjustmentevent.htm
  http://www.java2s.com/Tutorial/Java/0240__Swing/ListeningtoScrollingEventswithaChangeListener.htm
  http://www.java2s.com/Tutorial/Java/0240__Swing/ThesimplestoftheboundedrangecomponentsistheJScrollBar.htm

ScrollPane listener:
  // http://www.java2s.com/Code/Java/Swing-JFC/ListeningforScrollbarValueChangesinaJScrollPaneContainer.htm


26 May 2014  A158: PERMANENT SCROLLBARS
  Dealing with Stanley Mike Angelo's reported
  self-scrolling (out of control) triggered by resize button.
  Happens on Mac, under Java 1.7.xxx
  Learned that on the PC, the resizer is the blue corner "L" bracket
  while the rrepeated H-scroll button is usually the entire LR square box.
  On the Mac, the resizer is inside that box: it is the shaded LR half,
  while the rrepeated H-scroll button is usually the UL diagonal half.
  How can two functions share one component?  
  (The JScrollPane layout manager allows for max one component per corner box.)

  I did some scrollbar experiments in Java/Editors/JIFedit on JScrollPanes.

  Two potential fixes:
  1. Maybe the problem is my managing the coming and going of the scrollbars
  while not managing the behavior of that LR box, getting it confused.
  FIX: install the scrollbars as part of the constructor of the EJIF, and
  do not destroy them -- just ignore them -- throughout the edit process.
  ADVANTAGE: code is already in place, just have to block those destructions.

  2. Maybe the problem is my not installing a generic JScrollPane (which
  has its own manager) but rather doing my own management.  
  FIX: never create/destroy any scrollbars.  Instead plop a JScrollPane
  into the EJIF frame and let it handle everything.
  ADVANTAGE: uses entirely native manager.
  DISADVANTAGE: will need new interfaces in EPanel to control, and be
  controlled by, the scrollers. 

  Here in A158 I am trying approach #1 because it is quicker.
  * PC: compiles & runs OK; SBs are permanent, function both ways. 
  * Mac: compiles & runs but careless click/drag on LR square triggers the
    continuing self-scroll action.  Bummer.

  Moving on to A159 I am trying approach #2.   Above. 



17 May 2014   A157: About now includes Java Version.
  See new code in DMF.java
  Motive: many users do not know what their Java host is.
  Now, they can find out by choosing Help::About. 


10 October 2103  A156: Removing the "@" requirement
  Previous editions require the use of the @ character to indicate .RAY wavels.
  Montse Tapias  (Spain) keyboard cannot make this character. He needs it.
  Here, I change the Recognizer in REJIF to permit "wa" to also indicate wavelengths.
 
24 July 2013  A155: no changes.

23 July 2013  A154:
  Issue with AutoAdjust -- works great with GRAZE, works OK (slow) with HYPER;
  but gives premature exit with RayFailure message on AllSph02 and AllSph03.
  These are meter-size correctors with dimensions in mm, and dimensions in m.
  Same trouble either scaling, so scaling is not the culprit. Deltas are OK:
  AllSph02: in mm;   Jacobian deltas dZ~1E-2, dC~1E-9. LMiter deltas: dZ=200; dC=1E-4.  
  AllSph03: in m;    Jacobian deltas all~few E-6; LMiter deltas: all=2E-8 to 5E-3.
  Diagnostics show: the Jacobian deltas are OK but the initial LM deltas are huge.
  Rays are killed by imposing huge curvatures, and the small damping growth
  factor takes > 99 iterations to make the deltas small enough. 
  As if a lot more damping is required at least initially. 
  ^^ Modify LAMBDAZERO in LM?
  Trying LAMBDAZERO = 100; still sometimes exits early with RayRisk.
  Other runs: goes 12 iters mostly dealing with recovering killed rays; then exit #2. 

  ^^ Why does each LMiter trigger "Parsing OEJIF"  -- might that mess up surfs[][]???
  And maybe mess up convergence?  I woulda thunk that surfs[][] should be touched
  ONLY by AutoAdj during one descent run.  Otherwise, parsing would modify the
  target surfs[] numbers and interrupt the convergence.
  More digits in .OPT:  no help.

  HYPER converges smoothly and never triggers "Parsing OEJIF" messages; 1296 rays OK.
  For HYPER, Lambda starts at 1Ee2 and ends at 1E-5, sos=2E-21. 

  A135 converges smoothly on AllSph02. Nine microns RMS!
  There was a *true* "Ray Risk Stopping" message when a lens got too thin. 
  Also: A135 does not have any CopyFieldDown glitches.  Smooth. 
  Creating A135a, to install AutoAdjust diagnostics. 
  Sure enough, A135 LMiter is never interupted by calls to Parse OEJIF. 

  ^^ Found it.  The blinker runs all the time, and triggers DMF.vMasterParse()
  which in turn always parses OEJIF, REJIF, and MEJIF.  Even while AutoAdj is running!
  This interrupts the convergence.  
  Yet it is really useful to have a frequently recurring parser.
  I shall implement a "DMF.bAutoBusy" flag that suspends the parsing of all tables
  whilst the AutoAdjustment process is at work. Works!

  Issue with CopyFieldDown glitches -- an occasional stall, ceases to work.
  NOT a problem in A135.
  ^^ Fix: eliminated the call in EPanel::CopyFieldDown to "stashForUndo()."
  No more glitches. Replaced statement: glitches.  Removed statement: fixed.  
  This, in spite of the regular calls "Parsing OEJIF" and surely parsing REJIF. 


  Issue with conic double root -- Do "<" and ">" continue to have any function?
  Have they been replaced by the newer double conic root iDiams() test?
  GRAZE shows that "<" and ">" affect the first intercept on the secondary mirror.
  B4Constants continues to carry profiles OSCONIC, OSCONICLT, OSCONICGT.... 
  ^^ STILL IN USE. See RT13 line 1361ff.  When there are two good intercepts,
  and both survive the diameter testing....

     case ">" choose the root with the longer optical path
     case "<" choose the root with that lies closest to the vertex
     case default choose the root with the shorter optical path.

  These alternatives have been added to B4GUIDE_154 "Intercept solution choice"

  Issue with RT13 intercept subfunctions: they currently carry {j,k} for diagnostic
  purposes.  But those diagnostics were removed long ago. Clean up? Reimplement?
  ^^ Eliminated.  





21 July 2013 A154:
   Further fixes to RT13:
  bRunOneRay() logic that handles bimodal lenses;
   
  specifically now recognizes that RRDIA can occur within iIntercept()
   
  without explicit propagation, as part of the double root selector. 
   
  Also, reverse prop is done ONLY for a failed DIA or dia ray. 
   
  (This eliminates the "Twice drawn" rays  and apparent backwards extent
    
  of failed rays in Layout.)
   
  Future: would be nice to integrate all iDiam() calls into the main trace.
   
  But then, double roots would have to be handled at top level.  Ugly.


14 July 2013 Bastille Day A153:  
   Bringing in A147F bimodal lenses & random distributions;
   moving RT13:iDiams handler for RRBimodals into RunOneRay().
   Keeping all the editor & ray color fixes of A152.


Taken from A147F:
   B4Consts with all its new definitions;
   
Options::Random handling new user options; 
   
RT13:RunOneRay with its bimodal lens operations  
      (needs iDiams work)



13 July 2013  A147F: "
Finished" the Bimodal lens logic in RT13; 
   tested with Dihedral7.OPT; works.

   (Would be nice to clean up RT13:iDiams(), remove Bimodal from that,
  
   move the bimodal result processing into bRunOneRay.)

Installed five button Options::Random distribution generator
  
   Uniform, Cosine, Quartic Bell, Gaussian*, Lorentzian*; *Concen=[ ]
   
Works nicely but the "concentration" concept needs some calibration & refinement.



Shipped A147F to Rod Andrew for his opinion. 


3-6 July 2013  A152

In textmode, ENTER should start a new line (OK) and push down lines below. Fails.
At left hand margin, Backspace ought to pull up & append line below.  Fails. 
  
   ^^ Both fixed in A152, 5 July 2013, EPanel.java. 
  
   ^^ Also: both now use bDirty and stashForUndo().

When a file is dismissed, then Quit, it is reloaded next run.  Not blank.  
  
   ^^OK as is; to eliminate that file, use the "Startup files" option.

When a Zern field is detected with nonzero coef but no Diameter, WARNING is needed.
  
   ^^ Now, OEJIF tests & warns "Zernikes without Diameters are ignored". 
   

Coord Break must not be the first or last surface in an optic.
  
   ^^ now in the Manual.
Coord Breaks are PLANAR only; no fancy curves etc.  
  
   ^^ Now in the Manual.
   (Would be cool to do more: readjust wavefronts, bend rays, etc...)




1 July 2013 A152: Allow MultiPlot to have BOTH parms and deltaParms!
We could have two flavors of stepped variables:  Replacement values and Delta values. 
The replacements overwrite the tabular inputs for .OPT and for .RAY raystarts.
The deltas add to the tabular inputs for .OPT and .RAY raystarts.

  Replacement:  X0,  C3,  Zfinal, @wave, color
  Delta:        DX0, DC3, DZfinal...

Requires a bit more parsing and arithmetic fooling around.
Allows absolute steps in (say) U0, but relative shifts in X0 for parallax. 
In a spectrograph, allows steps in X0 but relative shifts in U0 for parallax. 
Of course, Color is always replacement; @wavel is always replacement. 


How about in A152, yank the MultiPlot class and its UserInterfaces, replace with A144?

No let's just extract the faulty A151 MultiPlot code & substitute the A144 code. 

No, fix the indexing error in 152 MultiPlot: surfs[jsurf][iattr]; ixy[0]=iattr; ixy[1]=jsurf.

^^ Done 29 June 2013.  Works. Now it looks like the A144 manual Chapter 15 fig 15.1.



However in A152 Charlie07 there are still ratty spot diagrams, with missing rays, not seen 
in Plot2D.
Reason: colors[k] is wrongly indexed.
^^ Fixed  1 July 2013  


29 June 2013 A151 annoying bug: MultiPlot's replacement values do not work right.


In A151, TMA.OPT, the spot diagram Eiffel Towers all look the same. 

In contrast, A144 work OK on TMA.OPT, stepsize=1E-6 just like the manual, and

just like the one-by-one Plot2D spot diagrams. 



Annoying feature:  having to list the MultiPlot replacement values, instead of one Delta,

means a lot of arithmetic when the target is nonzero.  
On simple problems, I refer the Delta 
interface of A144.


Yet ... the list interface lets me select colors, wavelengths, explicitly.  Neat!






24 June 2013: A151: polarity issue.  Most apps do not ask "Abandon? Yes/No"
  but instead "Save your work? Yes/No."  And, "Yes" is the default answer. 
  In B4, "Warning" "?"  "Unsaved work in .XXX" "Don't close"  "Abandon work"
  neither question nor answer is "yes" --- perhaps clarify?
  Notepad says "Do you want to save changes?"  "Save"  "Don't Save" "Cancel"
  Now, in B4, "Warning" "Unsaved work"  [Abandon Work] [Don't Close]
  Better:  "Warning" "Unsaved changes"  [Abandon changes]  [Don't close] 
  ^^ Done.  Nice!

24 June 2013:  Rod Andrew, MacBookPro OS X 10.7.5, Java 1.6.???, B4-135 or -147:
  Command key (essential for screengrab Cmd-Shift-4 ->.png) makes sub-windows jump.
  Testing @SS:  MacBook 10.4.11, Java 1.5.0_19: no jumping
                MacBook 10.6.8, Java 1.6.0_41:  no jumping
                Win-7, Alt-PrtSc, Java 1.6.0_38: no jumping 

24 June 2013:  "Special Keys" dialog box is plenty wide on PC but way too narrow on Mac.
  Many of its fields are cut off on the right hand side.  Wide box = ugly.  Less text!
  But, at least, this dialog is now persistent: stays around while editing.

19 June 2013: Rod Andrew MacBookPro OS X 10.7.5, Java 1.7.0_21, B4-135 or -147 
  Sub-window fault:  sometimes .OPT or .RAY goes duplicate, or absent.  
  I recommended reverting to Java 1.6; fixed that problem. 
  He continues to have occasional failures of Ctrl X,C,V shortcuts but menu works OK. 

30 May 2013:  gratings lack refraction; they need the N1 and N2 factors
  that appear in Spencer & Murty, otherwise they fail to give the proper
  deviation when buried between refractive media. 

30 May 2013:  Annoying bug in CopyFieldDown: it works for a few hundred
  iterations and then freezes.  If I stop and save the file, it revives.

30 May 2013:  Would be good to add CopyFieldUp:  Alt-UpArrow. Stop at ruler.





25 April 0213  A150:  Why are ray colors all black in MultiPlot?
  RayColors work OK in Plot2D and in Layout. 
  ^^ Repaired: default is now the native ray color, but if the
  user specifies color as one of the stepped quantities, that will
  overwrite the default. 

16 March 2013   A150:
  Simplified the "Special Keys" for table editing. 
  Reason is that Mac OS by default intercepts & uses F7, F9, F10.
  (This can be changed at Apple::SystemPreferences::Mouse&Keyboard)
  A150 now restricts both platforms to a common basis:
    Ctrl-LeftArrow = narrow;
    Ctrl-RightArrow = widen;
    Alt-RightArrow = split;
    Alt-DownArrow = copy down;
    Ctrl-Z = undo and redo.
  The DMF.Help::SpecialKeys now shows this.

Also: Help is now modeless: stays put, does not block keystrokes.



26 Feb 2013  A150  To do:

  * Generalize U.tokenize() to allow space,comma,semicolon
    ^^ DONE 26 Feb 2013.  Works.

  * Test MPlot wavelengths using BAD.MED gross error at one wavel
    ^^ PASSED 26 Feb 2013.

  * Restrict spots to plotbox
    ^^ DONE. works. Also repaired manual scale factors. 

  * Display plotbox size above diagram
    ^^ DONE 26 Feb 2013.  Nice; coordinates with manual scale factors. 

  * Scrub all System.out calls so debugger remains silent, retest AutoAdj
    ^^ DONE; yay, AutoAdjust is no longer crippled. 

  * Use sequential displays in MPlot, like MapPanel

  * Repair MPlot's user-selectable box size fraction.
    ^^ DONE 26 Feb 2013.

  * Make the Options:StartupFiles unambiguous.
    ^^ Done 26 Feb 2013.   Much clearer now. 




25 Feb 2013  A150  AutoAdjust testing, DEBUGGING=ON:
  Trouble running TripRED80.OPT, RED732.RAY, RED.MED:
  1.  The optimizer hangs for a long time at iteration = 0 with correct nadj=13; 
  2.  A perfectly good 6.3micron optimization from A149 shows a blizzard of
   rays that are "mis 1" or "bak 10" and ray #352 that is just crazy. 
  3.  Then, InOut shows all rays good and 6.3microns.
  Recompiled with DEBUGGING=OFF:
  1.  The optimizer works great.  quick, accurate. 
  2.  A perfectly good 6.3 micron optimization from A149 comes out the same.
  3.  Deviating that lens: AutoAdjust brings it right back on target. 

This Lesson: always turn off the debugger. 
I removed all System.out calls from AutoAdjust: Debugger still clobbered.
I removed all System.out calls from RT13 and Z: Debugger still clobbered.
So...   Always turn off the debugger.

To do: complete testing MPlot; not just a paraboloid but a lens with
very wavelength-dependent foci.  Perhaps TripRED80!  Yes it works. 


25 Feb 2013 testing A150 MPlot:
With Parab.OPT and {U0,V0}={0,0} in the ray table, and in the 1x1 MPlot,
parabolic mirror tilt=2.0 gives identical spot diagrams MPlot=Plot2D.  Good.
With RAY U0=0.01 and 1x1 MPlot U0=0.01, again identical spot diagrams.  Good.
However a 3x1 MPlot gets one wrong ray in V0=-0.02 and in V0=+0.02 boxes.
This wrong ray makes the plotbox scale smaller than it should be.  
Is something "off by one" maybe including the random ray #zero? Or is one of
the 61 table rays going astray?

HA it is leaking through from the RAY table.  If I set V0=0 in the ray table,
then the V0=0 diagram in MPlot is OK but its neighbors have one false ray.
If I set V0=-0.02 in the RAY table, then MPlot's V0=-0.02 is OK but its
neighbors have one messed up ray.  
Found it.  In MPlotPanel.java, setParms was doing....

              for (int kray=1; kray<nrays; kray++)
                RT13.raystarts....

but really should have been....

              for (int kray=1; kray<=nrays; kray++)
                RT13.raystarts....
Fixed.

Whereas the horiz spec correctly goes left-to-right, the vertical spec
sequence appears bottom to top.  Prefer top-to-bottom.   ^^ DONE. 

Annotations H,V,n,h,v,hh,vv,hv,s, and m check out.


20 Feb 2013  A150: revising MPlotPanel to accommodate its new Options.
This new interface ought to allow setting @wave values into the steps.
The previous RT13 tracer associates wavelengths only with individual raystarts:

   1.  OPT, RAY and MED are individually parsed;
   2.  DMF builds an LUT "gO2M[]" that allows jsurf => which row of MED;
   3.  DMF builds an LUT "gR2M[]" that allows kray => which column of MED.
   4.  RT13.getRefraction(jsurf, kray) looks up the refraction index.

For A150 MPlotPanel however we disconnect the ray wavelengths from the process.
Bypassing gR2M, I inserted a backdoor parameter "RT13.gwave"
that if nonzero obliges getRefraction() to use that given wave column of MED.
In this way, MPlotPanel sets RT13.gwave to whichever column its own @wave
specification is needed. 

Up to 3 parms can be stepped for Horiz and up to 3 others for Vert. 

Also to add: instead of awaiting the whole calculation, better to show
incremental plots.  Start a timer thread and show 1box, then 2boxes, ...
reevaluating the scale factors.  The timer thread permits the repaint()
to occur.  This is the way that MapPanel works: block at a time.  Slick.






16 Feb 2013 A149:  Allowed AutoAdjust to update Layout each iteration.
Now, the timertask includes a call to vUpdateLayout() after other updates. 

    private void vUpdateLayout()
    {
        GJIF g = DMF.getLayoutGJIF(); 
        if (g == null)
          return; 
        g.getGPanel().requestNewArtwork(); 
        g.toFront(); 
        g.repaint(); 
    }


15 Feb 2013

Normal exit "Done" properly clears its "Running..." indicator.
100 iters exit "Done" does not clear its "Running..." indicator.
^^ Fixed now.  New exit logic in AutoAdj.

Curious fact: during huge AutoAdj runs, sliding the DMF around
the screen brings on "Ray risk. Exitting" message, while leaving
the DMF alone lets it run to completion, 100 iterations. 


14 Feb 2013  exploring "Ray risk" exits from AutoAdjust. 
Using DEBUGGING=false, compiled & compressed .jar packages.

Yikes, saves "R916" as R916 not as R916.RAY;  .OPT also broken.
Extensions used to be automatic. 
^^ Fixed: problem was period within the path name in EJIF.
   An old shortcut concluded that the first period shows start of extension.
   So that if some paths include periods, the extension was lost. 
   Installed a new explicit extension tester for ".OPT" etc.

A149.03:  compiled with javac 1.5.0_06.  Key parms:
   AutoAdj LMBOOST=2, LMSHRINK=0.1, LAMZERO=0.01, LAMMAX=1E9.
   AutoAdj Options: StepSize=1E-6, MaxIter=100, Tolerance=1E-12.
   RT13: iGetPosRoots() tol=0.0.

   TripRED73.OPT with 3 adjustables, R915.RAY with 115 rays, RED.MED; 
   InOut = 5.62E-01; Autoadjust descends to 5.16E-01 iterates forever.
   With 915 rays: InOut=6.15E-01, Auto goes to 5.64E-01 iterates forever.

   TripRED74.OPT with 12 adjustables, R915 with 915 rays, RED.MED:
   Good convergence, nice 10um final rms blur.

A115 as it was in 7/10/2010: 
   TripRED73.OPT with 3 adjustables, R915 .RAY with all 915; RED.MED
   InOut=6.15E-01;  AutoAdj=>5.64E-01 iterates forever. 
   TripRED74 with 9 adjustables: 15.7um. 

A135 as it was on 3/7/2012:
   TripRED73 works as above.
   TripRED74 works as above. 





13 Feb 2013  A149:  Still getting "Ray risk" exits,
running TripRED73 on R915.RAY.  Blizzard of messages like
  "RT13.bRunOneRay() kray=nnn, jsurf=4 mis"
  and "BIGVAL" then growing lambda messages. 
Optically, there is no way that surface 4 can miss an intercept.
What are the circumstances in RT13 that accompany "mis" errors?
Delving into RT13:dQuadsolve()... the exit is always a "Case 2" situation.
This is: one positive path root but E0=(s*cz0<1)=false: farside root.
Indeed, the suggested dd[0] = 982mm, the far side of surface 4's 500mm
radius.  So what is wrong with the other root since we are intercepting
a forward sphere at jsurf=4???
I notice that in iGetPosRoots() my usual TOL has been set to zero.
Previous editions used the global TOL. 
^^ Nope; with TOL=global 5E-14 same exit Case 2. 

Is the local ray being clobbered? {uvw} are OK but z=+8.8mm.
Surely z=-8.8mm!?  The ray starts are leftward of the sphere?
If local z=+8.8mm then indeed the only forward intercept is illegal.

Diagnostics for dIntercept z shows lots of z>0 cases.  ??
Could this be an agressive LM with excessive curvatures?

   TEST NUMBER ONE: draw up a list of Zrad values, which are Zsurface
   at radius=Diam/2, and see if it is going non-increasing.  Do some
   kind of non-ray-traced exit flag if this happens, or maybe just boost
   the damping.

   TEST NUMBER TWO: try starting AutoAdjust with very high damping,
   perhaps Lambda=1E6, so the initial moves are very small before it
   goes to hell. 
   ^^ Yes now it goes four iterations then "Ray risk" exits.
   ^^ and with LamZero=0.01, LamMax=1E9 it initially produces a blizzard
     of Case 2 messages and shrinking positive zlocal values, 
     then quiets down and iterates forever. No "Ray risk."
   As if it does indeed try excessive curvature until it gets sufficiently
   high damping and tiny moves.  

Evidently the dIntercept values are normal with an agressive
low damping LM descent.  Raising LambdaMax to 1E9 allows slow progress
through zones where the curvatures are likely to go wild. 





12 Feb 2013  A149: High Priority: fix the "Ray risk" exit.
The newly developed RAYRISK test suite demonstrates
a very simple situation:  Initially ngood=9 but at the
fourth iteration ngood=14, and the jacobian expands (why?)
and something goes out of bounds and "Ray risk."
I sense that ngood is not kept frozen during AutoAdj.
Perhaps ngood is updated for each iteration? (bad idea).

FOUND IT in AutoAdj doPerformResid() there is a call to
RT13.iBuildRays(true) all rays, then calls Comparo::doResiduals()
and updates npts = iGetNPTS(). << the error was updating npts.
^^ Fixed: RT13.iBuildRays(false) only the good rays.  
^^ Works.  No AIOOBEs, dimensioning remains constant. 

However on TripRED70, still encounter "Ray risk" at first iteration.
In test RAY915, npts is now OK but Lambda grows > 1E4 and quits. 
No Diams are enabled.  Curvatures are high but not near TIR.
The adjustables listing is correct; no phony surfaces. 
Raising LambdaMax to 1E6 fixes that: Auto now iterates, but very slowly,
That slowness is likely due to this horrible optic: flat poor minimum.


 

12 Feb 2013  A149  To Do:
 * Replace Rod Andrew's bimodal lens (removed in A148). 

 * allow RoC: ORAD, ORADX, ORADY input & output. 
    Like shape/asphericity except that either of those can be nudged,
    while RoC has to shift the iadjustment to Curve in OEJIF. 
    Requires a more general definition of Adjustables with TWO ATTRIBUTES,
      1. table appearance attribute;  2. real internal attribute. 
    Requires a fancier OEJIF::iParseAdjustables() method. 

 * don't blank Plot2D when ngood=0; keep previous scale factor, show empty.

 * allow Layout updates each AutoAdjust iteration

 * install a fancier MultiPlot row/column specification

Then....

 * revise bRunRay to permit full service BiModal lens (mis; bak)



12 Feb 2013: BEAM4_148_PC "Ray risk"? using R915.RAY + TripRED70-8Feb.OPT:
 ..setting 915 rays:initial InOut: 0.886mm rms
 ..iterations (915 rays, 5 adjustables) run just fine. No "Ray risk."
Trying BEAM4_148_PC (22 Jan) same test suite:
 ..initial InOut: 0.886mm rms;
 ..iterations run just fine.  No "Ray risk."

Running 148_PC from fresh compile & command line, Debug level=1,
 ..test suite 915 rays, R915.RAY + TripRED70-8Feb.OPT:
 ..setting 915 rays:initial InOut: 0.886mm rms
 ..Auto: blizzards of "bak" and "mis" and "BIGVAL" finally 3rd iter "Ray risk."
New trouble file TripRED70-12Feb.OPT: plenty thick, reasonable curvatures,
yet with this puppy I get "Ray risk" on the very first iteration, following
a blizzard of "mis" and "BIGVAL" complaints. 
 ..Debug level=0: initial InOut: 1.23mm rms Auto 1st iter "Ray risk." <<STABLE
 ..Debug level=1: same, but blizzard of "mis" and "BIGVAL" messages.  <<STABLE

Simple optimization works great; symmetrical hyperboloid LENS.OPT. 



8 Feb 2013:  "Ray risk. Exitting" problem in BEAM4_148_PC
  100% solid failures to optimize TripRED70 with RED915 and RED.MED, all 915 rays.
9 Feb 2013:  Today it runs iterations just fine, all 915 rays. 
  Are there any SNH's? Elevate them to debug level zero...  No SNH's seen.
  What numbers accompany "Ray risk" messages? Lambda?
  Why would the jacobian ever need resizing?? Ngood vs Nall?  << no resizings found.
  Why when optimizing this system do I see blizzards of debugger messages...
   "RT13.bRunOneRay() at kray=529 jsurf=7 TIR" or "bak" ??
   "AutoAdj: iBuildRays{} at nrays=745 ngood=915 BIGVAL"
   then -- understandably -- long sequences of growing lambdas.

With just 15 rays: works great.
with just 44 rays: huge lambdas, tiny steps, but works.
With 44 rays, fewer adjustables: many "mis" "bak" "TIR" at j=5, "BIGVAL"
With 115 rays: "Ray risk" and "kray=102 jsurf=7 bak" or "TIR"  ???
Could it be trying huge curvatures thereby killing rays??




Would be nice to have Layout repaint itself each iteration.
  AutoAdjust future option: "Allow Layout to redraw each iteration [v]"

Would be nice to have MultiPlot specify Wavelength for each column.
  Have a list of X0 Y0 U0 V0 Wave+tag values for each column. Drop "para."
  Have a list of X0 Y0 U0 V0 Wave+tag values for each row.  Drop "para."
  Blank means use the current .RAY table.  





-----------B4's file loading process---------------
  [Note: OEJIF extends EJIF extends BJIF.]

  DMF:   oejif = new OEJIF(file);   // sets filename
  DMF:   jdp.add(oejif);            // repaints, calling EJIF
  EJIF:  ePanel = new EPanel(this); 
  EJIF:  bLoadFile()
           creates br = new BufferedReader(file);
           creates sb = new StringBuffer(); 
           reads lines from br, writes to sb with "\n" EOLs
             (thereby making it cross platform)
           converts finished sb to a string "s"
           ePanel.vLoadString(s);

  ...but EPanel.vLoadString() accepts any plaform string!
  ...it accepts spreadsheets including spaces/fields/tabs,
  ...it accepts editor cut/paste from any text,
  .. so why have EJIF do decomposing & reassembly?

  EPanel.vLoadString(s):
     for each character "c" in s,
       switch(c)
       {
           manage iCaret, jCaret;
           charTable[j][i] = c; 
       }



1 Feb 2013  A148_PC_only --- To do----------------

 1. Is surfs[OPROFILE] still an error, corrupting conic -> plano?
      ^^ Boatload of big lens optimizations run OK.  Maybe now OK? 

 2. Clean up the DMF.sAutoErr messages: clarify exit cause
      ^^ Messages are Auto: BADITER => "Ray risk"    -- clear enough; 
                  and RT13 line 1024 "Profile error" -- clear enough.
      I am leaving these in place until item #1 is disproven.

 3. Redesign the ray engine to separate bimodal lenses from other optics.

 4. Create and install an adaptive editor, along the lines of AEdit.

 5. Add Nadj to AutoAdjust dialog box.
     ^^ Done.  Looks terrific.

 6. Oblige npts to remain constant during one optimization. 
     ^^ Now monitored and fixed I think: see below. 

 7. When AutoAdj is done it should not say "Running..."
     ^^ ?? Was that a crash?   Now it looks good. 

30 Jan 2013: A148_PC_only, AutoAdjust issue with AIOOBE failures:
Installed a repair routine for the jacobian.

        if (jac.length < npts)
        {
            if (DEBUGGING)
              System.out.println("......old jacobian was "+jac.length); 
            jac = new double[npts][nadj]; 
            if (DEBUGGING)
              System.out.println("......new jacobian now "+jac.length); 
        }

I have an idea about why the jacobian length might become substandard:
if the AutoAdjust setup sees some failed rays, it will dimension only to ngood.
But later, if RT13.runrays() on an improved optic increases ngood,
and if npts is allowed to float upwards, it will overfill the jacobian,
leading to an AIOOBE failure.  This fix keeps jac[][] dimension current.

Works: on TripRED44air.OPT and RED732.RAY, with Diams present,
some rays initially fail, yet AutoAdjust improves their success and I get:

    ....old jacobian was 1416
    ....new jacobian now 1428

    ....old jacobian was 1428
    ....new jacobian now 1434

However this is not a good long term fix: prefer to keep npts constant
during any one optimization process, and therefore keep the jacobian dimension
constant as well. 
  ^^ Confirmed: npts = ngood*autongoals; initially set at line 103,
                jac[npts][nadj] created at line 126.
                npts revised at line 447 at each iteration.
     An upward revision would trigger AIOOBE w/ fixed Jacobian dimension.

There is also an npts in Comparo.  It is obtained by counting good rays
within Comparo.vGetResid() from explicit goals + WFE goals.
This "experimental npts" can then be fetched by iGetNPTS().
Externally, a single call to sole public Comparo.doResiduals() method will
perform setups, ganging, WFE, vGetResid(): a complete package. 

Q: Having set npts=ngood*autongoals at line 103, shouldn't I then verify
agreement with nptest at line 120, to make sure Comparo.doResiduals()
has the same full complement of jacobian elements? 

A: Trying this....no new fault messages.  Adds confidence. 
Needs a catchy explanatory message not just "internal disagreement!"
Installing message "Auto: re-run InOut."
                         



29 Jan 2013: Ha. I found a problem that always triggers "Ray Risk" AutoAdj exit:
TripRED44air.OPT and RED732.RAY and RED.MED.  Diagnosing....
    RT13.iIntercpet profile=0=Plano   d=-2.0  << yes it is plano but cannot be backwards
    RT13.bRunOneRay: kray=345 jsurf=9 d=-2.0
Each run reports same four rays at jsurf=9: 345,347,606,610. Extreme corner of surf 9!
So maybe there is some truth to this highly repeatable complaint?
Yes, I can also get a blizzard of RT13.dIntercept:dQuadsolve returns -8.0 at jsurf=6.
This is likely an output from iDiams: RRDIA=8:
Eliminating "Diams" header: no more trouble.


29 Jan 2013  A148_PC_only: a.bat then b.bat; with TripRED43air.OPT and REF732.RAY
  StepSize=1E-6, Tol=1E-8: 25 AutoAdj iterations, no errors.  
  StepSize=1E-6, Tol=1E-12: 3 iterations then crash: AIOOBE=702 at AutoAdj.java line 568.
  Installed index checking reporters wherever the jacobian is indexed;
  9 more iterations then crash with AIOOBE=1462 at line 571.
  Yet the watchdog reporter is not triggered, because npts=1464.
  In what sense is 1462 OOB?!
  Made that test an if(error) else jac=xxx to safeguard its array indices.
  Ran 25 iters, Stepsize=1E-6, Tol=1E-12; no reports, no trouble. 
  Compiled & compressed into .jar; 
  Ran 3 iters then hung "Running..." then 10 good iterations. 
  

28 Jan 2013  A148_PC_only, compilers listed below. 
  * enlarged table height to JMAX=1200; works great.
  * installed DMF.iError flag: RT13 comparo and AutoAdj dialog readout.
  * Ran 25 repeats on 0402-15-noCB.OPT and 0402-15-zero.RAY: all ok.
    so my iError reporting remains untested. 

28 Jan 2013  A148_PC_only: On Dell X200, WinXP, javac 1.5.0_06, java 1.6.0_02;
Compiled with a.bat and ran with b.bat; 
Running AutoAdjust on 0402-15-noCB.OPT & 0402-15-zero.RAY:
  did 25 repeats

, no faults.
Compiled & jarred using c.bat: BEAM4U.jar
  did 20 repeats, no faults.

Back on the Lenovo, Win7, javac 1.6.0_21, java 1.7.0_11;
compiled with a.bat and ran with b.bat;
Running AutoAdjust on 0402-15-noCB.OPT & 0402-15-zero.RAY:
  did 2 repeats, then crash with dpro=-0.0 yet surf[OPROFILE]=1.0
Compiled & jarred using c.bat: BEAM4U.jar
  crashed on first AutoAdjust. 

Could it be a Java error?
Is javac 1.5.0_06 available on my Lenovo? No but moving it from my Dell.
 Installed it via Computer::Properties::Advanced:Environment:System::Path:Reboot
 Verified installed version 1.5.0_06
Recompiling with javac 1.5.0_06
 First AutoAdj; good. 2nd AutoAdj: crash with dpro=-1.0, surf[OPROFILE]=1.0

Is java 1.6.0_02 available on my Lenovo?
Although it is on my Dell I cannot simply move it over: need the whole installer. 
To uninstall java 1.7:
  Close any running Java software, then
  Start::ControlPanel::Programs & Features::Java 7::Uninstall

To install an earlier version...
  Go to http://java.sun.com/products/archive/. This page allows you to select 
  any version of the Java Platform Standard Edition back to J2RE 1.2.
  Fails: new Oracle account crashes.  (Maybe it needs Java installed!)

Instead try the free website...
  http://www.oracle.com/technetwork/java/javase/downloads/index.html
  Downloaded installer jre-6u38-windows-i586.exe  16.2MB full offline package.
  Installs java 1.6.0_38; verified. 

Compiling A148_PC_only; AutoAdj 0402-15_noCB.OPT with 0402-15-zero.RAY
  14 repeats OK, then dpro=-0.0, surf[OPROFILE]=1.0; kray=81,jsurf=1, followed
  immediately by AIOOBE=1138 at AutoAdj.java line 560. 
  then nine more repeats OK.  
  So problem is not gone but it sure is less troublesome. 

  






27 Jan 2013: A148_PC_only further testing:
Evidence is now that the interceptor sometimes get a "mis" or "bak"
when in fact rays should all be good.  To narrow this issue:

  Still a problem with U0=0, V0=0, Xg=0, Yg=0?  
  Yep: 3rd iter Ray Risk: ray 313: j=1 PLANO??"mis";  ray 314: j=1 CONIC "mis".
  Still a problem with Z0=-500mm?
  Yep: 2nd iter Ray Risk: ray 300 sees profile=PLANO at j=1; "mis"

Let's make all surfaces non plano, install a plano reporter, and see if trouble persists.  
Yes: RayRisk;  kray=214, jsurf=1, d=-1; npos=-1, a=-0.0,b=-0.0,c=-0.0,d1=-0.0,d2=-0.0.
Yes: RayRisk; "dIntercept OSPLANO at j=1 k=363"
              "dIntercept surf[OTYPE] =  1.0"
              "dIntercept surf[OPROFILE]=1.0" << definitely conic not plano.
              then ray 363 failed "mis"

Why this is totally crazy:
       OSPLANO=0, see B4Constants.
       int profile = (int) surf[OPROFILE]; 
       if (profile == OSPLANO)
       { posted message shows surf[OPROFILE]=1.0 }
Is there a way that (int) 1.0 can come out zero?
Trying a new function U.getInt(double x) using Math.round() ....
Also now have dpro =double precision capture of surf[OPROFILE]...
No joy, still get the discrepancy in fetching surf[OPROFILE]:

           dpro = surf[OPROFILE];              << line 1019: is -0.0: wrong
           profile = U.getInt(dpro); 
           if (profile == OSPLANO) ...          
            "dIntercept OSPLANO at j=1 k=287"
            "dIntercept finds profile = 0"
            "dIntercept finds OSPLANO = 0"
            "dIntercept finds dpro    = -0.0;  << yikes
            "dIntercept surf[OPROFILE]= 1.0"   << line 1031 it is 1.0:  now OK

Minus zero is unexpected.  Minus zero is used as an uninitialized indicator.
Yet all the surf[OPROFILES] have been written into by OEJIF. 
Indeed most rays find the correct profile there.  Something is altering the
contents of my surf[][] array on a transient basis.  In the above tests within
dIntercept, capturing dpro and later relaying surf[OPROFILE] are just a few
lines of code apart. 






26 Jan 2013:   A148_PC_only
  Have now experienced this rare crash on Lenovo & MacBook,
  both raw compiled and also fully .jar compressed.
  So:  not a platform problem, nor a compiler problem.
  MemTest shows no trouble so not a machine problem.
Evidence:
  (a) initial AutoAdj is usually (not always) OK;
  (b) some subsequent AutoAdj may crash.
  (c) Every crash is an RRNON with one or more rays failing to redirect.
Causes?

This circumstance is one in which adj vectors shrink to nearly zero.
Could there be a damping explosion, trying to go downhill on a flat?
Is the trouble always preceded with huge damping?

  Adding an excessive-lambda reporter....

Sometimes.  I continue to get RRNON and "Ray risk" messages,
usually without any lambda > 1.0, but sometimes WITH lambda > 1.
It is as if the lambda is an occasional consequence of the ray failure.

Eliminating Rod Andrew from A148_PC_only: any help???
Nope.  AIOOBE=-1 at AutoAdj line 484.
Five more iters then d=-2 at kray=522, jsurf=16: why?
Two more iters then d=-1 at kray=76, jsurf=1.   why?
Must be a fault in dIntercept(). 
Yes! diagnostic shows dIntercept::dQuadSolve() is returning -1=-RRMIS or -2=-RRBAK.
These are from iGetPosRoots(abc, dd) which insists roots > TOL=5E-14.
That, in turn, calls iGetRoots(abc, xx) which requires exact zeros to decide.

What if I replaced TOL with zero?
Nope: still get RayRisk, still get dQuadsolve=-1="mis" and -2="bak". 

Could this be a problem associated with a 4m telescope in millimeters?
Which might vanish if rescaled into meters?  



26 Jan 2013  A148_PC_only => A148_Mac:

Moved to MacBook & recompiled  "bash a.sh"  "bash b.sh" without jar.
  
AutoAdjust options StepSize=1E-6, Tol=1E-8.
  
  10 iterations AutoAdj 0402-15-noCB: No errors, proper convergence.
Then converted to .jar and compressed with Proguard:
  
  3 iterations AutoAdj OK, then crash. Then InOut. Then 7 good then 1 crash.
  
  then 4 good then 1 crash.  

Then ran "bash a.sh" and "bash b.sh" without jar:... 
  7 iterations then one crash: AIOOBE = 1106 in AutoAdj.java line 560

            

    for (int i=0; i<npts; i++)
              
      jac[i][j] = dFetchResid(i);   <<< line 560




So what went wrong? 2 goals * 570 rays =>  npts=1140  so index=1106 is OK!

Ah but npts is set in line 102 npts = ngood*autongoals;  Maybe jac[] was

shrunk owing to some ill-defined ray failure (sometimes ngood goes crazy)

and that mid-adjustment failure is the cause?



After six good iterations of AutoAdjust "bash a.sh" and "bash b.sh" I get a crash

with ngood=560 not 570: ten "RT13.iRedirect Dreaded RRNON, type=1, status=1=mis"

followed by AIOOBE = 1106 at AutoAdj.java line 560. 

After that, 19 good iterations, then  Dreaded RRNON & AIOOBE=1106, AutoAdj line 560.








A148_PC_only  25 Jan 2013
Compiled with jdk1.7.0_11:
  incompatible with old Proguard 4.1; 
  also this BEAM4U.jar will not run on Dell X200 with java version=1.6.0_02 
  "Main class not found."

Reverting Lenovo to jdk1.6.0_21;  recompile;  
  this is compatible with old Proguard 4.1; 
  this runs OK on my Dell X200. Iterating 0402-noCB Autoadjust:
  570 rays; 10 iterations: all good convergence.  No "Ray Risk" failures. 

Trying varying number of test rays 0402-15 AutoAdjust on Lenovo.  
  60 rays: always converges 10 reps.
 166 rays: first 9 reps ok, then "Ray risk. Stopping."
 256 rays: 3 "ray Risk";  7 good convergence.
 570 rays: 8 "Ray risk"  2 good convergence.
Definite trend.   Maybe an OS failure??


A148_PC_only  24 Jan 2013:
Two improvements in BiModal Lens implementation:
 1. allow RROK status for "mis" failure to intercept.
 2. allow RROK status for "bak" intercept sequence error.
These would allow clean bypass for rays at all distances.
If a ray were not propagated until it is truly known live or dead,
but held at its starting point while in the RRBL semifailed state,
then we would retain "semper prursus" and even the dotted extension
would be improved. 

Meanwhile back at the repair shop I find that in 0402-15, with only
the primary mirror piston being autoadusted in piston, still crashes:

   ArrayIndexOOBException: -1  at AutoAdj.java line 480

This is the {surf,attr,iadj} trio {1,3,0} that jumps to {-1,-1, 0}.
  * Yes I have eliminated (Adjustable) casts. 
  * Yes I have set Auto StepSize=1E-3, Tol=1E-6.
Ten more good AutoAdjust runs, various starting points, all OK. 
Then setting Auto StepSize=1E-4, Tol=1E-6; then I get "Ray risk. Stopping."
and from LMauto:  "AUTO: jacobian failed #3."  or later "#2"

Adjusting four CBOUT params: jacobian #3 or #1 with StepSize=1E-3 or 1E-6.

Adjusting four PM params: after a dozen good iterations I get an
autoadjust crash with NullPointerException: AutoAdj.java line 486:

            int nSlaves = optEditor.getSlaves(iadj).size(); 

This is new.  (The triplet listing looks good)  Doesn't repeat though:
Successive trials revert to jacobians #3 and #1. 
Diagnosing the BIGVAL jacobian failures "Ray risk. Stopping." situation:
  Although ngood=570, AutoAdj iBuildRays(fzlse): nrays=331 or 545 or 567.
  Why these deaths in nrays = RT13.iBuildRays(false) ?? 
  Should it be iBuildRays(true)? That would try all rays.
  Trying (true):  Nope, mostly OK but 3rd try:  jacobian #3, 475 rays out of 570.

Q: is it the Coordinate Break?  
A: Nope.  0402-15-noCB.OPT is similar: nrays < ngood.

Q: Same trouble in production release A135?
A: Yes! 0402-noCB.OPT 4-parm P.M. adjusts smoothly from most starting points.
   Stepsize=1E-6, Tol=1E-12: good; 570 rays, 12.6umRMS  ten times.
   Stepsize=1E-3, Tol=1E-8:  good, 570 rays, 12.6umRMS  five times. 
   Stepsize=1E-4, Tol=1E-10: good, 570 rays, 12.5umRMS then oops! jacobian #1

Q: How to diagnose the nrays<ngood failures?
A: Install diagnostic within RT13.bRUnOneRay(): ray error message.
   I get "RT13:bRunOneRay() at kray=516  ngood=570  Non"
   meaning that ray 516 encountered a non-documented failure RRNON.
   RRNON is returned only by iRedirect(); none of its helpers use RRNON.
   So! Something is overwriting, or corrupting, the RR result. 

Q: Is A135_PC_only any help finding this?
A: No dammit with these diagnostics installed, no failures, no RRNONs.

Q: In A148_PC_only, which surfaces trigger RRNON?
A: kray=267: Non 1
   kray=281: Non 1  etc.  Surface 1 is a mirror.  
   Other runs, other rays: Non 9; Non 15; various. Non5 is a lens surface. 

Q: Is there any pattern to the A148_PC failures?
A: Yes.  InOut always works OK; AutoAdj OK first run; dies on 2nd run.
   As if, one run messes up the second run. 

Q: Would a different Java compiler eliminate this annoyance?
A: Presently running: javac 1.6.0_21

  On my Lenovo: Java Console is enabled at....
  Start :: ControlPanel :: Java :: JavaControlPanel::Advanced::JavaConsole(.)

    "From the desktop, right-click the Computer icon and left-click Properties.
    Left-Click "Advanced System Settings".
    In the System Properties window, click on the Advanced tab.
    In the Advanced section, click the "Environment Variables..." button.
    In the Environment Variables window "System variables" box, 
    highlight the "Path" variable and click its Edit button. 
    You will get a tiny editor window. 
    Add or modify the paths you wish the computer to access. 
    Each different path is separated with semicolons.
    Click "OK" and "OK" and "OK" and then reboot.

    My PATH still contains "C:\Program Files\Java\jdk1.6.0_21\bin;" 
       javac -version confirms this. 
    Edited PATH now is "C:\Program Files\Java\jdk1.7.0_05\bin;"
       javac -version confirms this.    Yay.

  No joy however: A148_PC_only AutoAdjust crashes with AIOOBException
  at nudgeOpt; AutoAdj.java line 484, index=-1. 
  Also: plenty of individual ray failures hence jacobian errors.

InOut sometimes cleans these up.  
  Maybe run InOut as an introductory step in each AutoAdjust iteration?
  Trying an InOut before each AutoAdjust:  WORKS.    NO FAILURES in ten tries. 
  What is it that InOut accomplishes, that second run of AutoAdjust fails to do?
  Perhaps: initializing some variables??
  NOPE: one run, with offnominal P.M. params, jacobian fail #1. 
  And, further tries of InOut continue to show nrays=480 not 570.

Since jdk1.7.0_05 is incompatible with Proguard 4.1, reverting to jdk1.6.0_21.


Q: What circumstance leads to "Non 1" a failure to redirect at surface 1?
A:  RT13:dIntercept is returning d=-1.0
    RT13.bRunOneRay: kray=200  g=1  d=-1.0
    RT13.iRedirect: Dreaded RRNON, type=1 status=1=mis
    RT13:bRunOneRay()  at kray=   200  Non
    AutoAdj:  iBuildRays() nrays=569  ngood=570  BIGVAL
    AUTO: jacobian failed #3.

Q: Maybe I have outgrown Java? or my use of huge classes?
A: Clueless in Berkeley. 

Q: Could my honking big editor memory allocations be part of the problem?
A: Specifying 150x600: Nope, same as before:
   initial InOut still works great;
   initial AutoAdjust still works great; 
   2nd AutoAdjust still gets RRNON at kray=209, jacobian fail #3.


Q: Maybe I simply have an excessive number of rays + memory gremlins.
A: Trying 99 rays  AutoAdjust....


  


A147_PC_only  23 Jan 2013: 
Running 0402-15.OPT & .RAY, autoadjusting:
What causes the eternal AutoAdj "Running..." crash?
  It is ArrayIndexOOBException in nudgeOpt, AutoAdj.java line 480
  There, the usual pattern of {surf,attr,iadj}={3,3,1}, {3,4,2}...
  suddenly changes to {-1,-1,0}: the zeroth adjustable has vanished!

  Should never happen: surf=optEditor.getAdjSurf(iadj=0)
  and the optEditor could not have changed its getAdjSurf() lookup during a run.
  .. in OEJIF:
    public int getAdjSurf(int i)
    {
       if ((adjustables != null) && (i>=0) && (i < adjustables.size()))
         return ((Adjustment) adjustables.get(i)).getRecord();
       else
         return -1; 
    }
  Oooo. there is a dangerous cast at work here.  Why this cast??
  Looking at the definition of adjustables, it appears to be OK:
    private ArrayList<Adjustment>  adjustables; 
  Removing all casts....  No joy. 


and What causes the "Ray risk. Stopping." message?
  THIS IS NOT DIAMETERS; Removing Diam and diam, the message persists
  This message follows a long stream of {surf,attr,iadj} hits.
  Probably boosting Lambda?
  There is a message "AUTO: jacobian failed #2" following th
  string of {surf,attr,iadj} triplets.
  Above task adjusts CBOUT's Y, Z, Tilt, Pitch (hence eulers).
  Simplified task:  CBOUT's Y, Z; no angles; 
  Still get ""Ray risk. Stopping." but now with
  "AUTO: jacobian failed #1." 

Another hint: freezing CBIN & CBOUT, taking just one AutoAdj = PM piston:
  still get "Ray risk. Stopping." after many gnarly iterations.

Could my AutoAdj parameters be set poorly??  Previous editions no trouble.
Presently:  Stepsize=1E-6;  MaxIter=100; tolerance=1E-12.
Perhaps, with thousands of millimeters, I have gone into the twilight zone
of tiny fractions! and need bigger steps and bigger Tolerance??

Trying Stepsize=1E-3, tol=1E-6:  YAY THIS FIXES IT for the PM piston.
Does not fix the CBout 4-parm "Ray risk. Stopping" problem. 
It now shows "AUTO: jacobian failed #3"

Do I need an automatic size adjuster: DMF.getOsize() ??


A147  21 Jan 2013: fooling with Rod Andrew's request to permit
bypassing a lens via Dia or dia. 


BiModal Lenses installed in RT13, OEJIF parser, and B4constants.java

Modified RT13 to always call iRedirect() regardless of iDiams result,
so as to allow 
iRedirect() to make the correct call. 



The Mac compiler bash scripts are:

a.sh:    javac com/stellarsoftware/beam/*.java

b.sh:    java com.stellarsoftware.beam.B4

c.sh:    jar cmf MacMan.mf BEAM4U.jar com/stellarsoftware/beam/*.class

e.sh:    java -jar "../Proguard4.0/proguard.jar" @MACOPTIONS.PRO



PC compiler batchfiles are:
a.bat:   rem DELETE DOT FILES IN ..\beam
         del com\stellarsoftware\beam\*.class
         javac com\stellarsoftware\beam\*.java
b.bat:   java com.stellarsoftware.beam.B4
c.bat:   jar cmf WinMan.mf BEAM4U.jar com\stellarsoftware\beam\*.class
e.bat:   jar cmf WinMan.mf BEAM4U.jar com\stellarsoftware\beam\*.class
         java -jar C:\Users\mlampton\Desktop\Java\Proguard\proguard.jar @WINOPTIONS.PRO
         del BEAM4U.jar

==========ALWAYS COMPILE PRODUCTION CODE ON THE MAC==========
=============WINDOWS COMPILES ARE NOT UNIVERSAL==============

21 Jan 2013  Yikes, on the Mac with A146 I get the message
"Jar Launcher: The jar file "BEAM4_146.jar" couldn't be launched. 
Check the Console for possible error messages"
Yet, the .jar runs OK on my Lenovo, and running on Mac at the command prompt
"java com.stellarsoftware.beam.B4" works OK.
Must be something specific to the .jar launcher?  Or where compiled?
   

In directory A146, double clicking...
BEAM4_143_Nov5.jar  fails; 
BEAM4_143.jar       runs OK;
BEAM4_144.jar       runs OK; 
BEAM4_146.jar       fails.  
  
Running HardDisk::Applications::Utilities::Java::Java 1.4.2 settings.app
Clicking [v] Use Java console;
  Now double clicking BEAM4_146.jar still fails; 
  no console pops up.
Compiling A146 on the Mac:  BEAM4U.jar double clicks & runs OK.
However, running e.sh:  "Unable to access jarfile ../Proguard/proguard.jar"

# Shell file e.sh
# assumes BEAM4U.jar was already built
#
java -jar "../Proguard/proguard.jar" @MACOPTIONS.PRO
#

Here the two dots = up one level to HD/Users/Mike/Desktop/Java
Ha.  There is no folder /Proguard although I find /Proguard4.0 and /Proguard4.8
I will change my shell script e.sh to read
#
java -jar "../Proguard4.0/proguard.jar" @MACOPTIONS.PRO
#
Now, Proguard runs OK
Now, BEAM4_146 runs OK when double clicked. 


16 Jan 2013: Adding MultiPlot "Skip empty boxes" feature
  so that round fields can be accommodated while their corners vanish.
  Done; works. 

There are some poorly qualified uses of ArrayList.add() in 146, which
is the reason for the usual warning about unchecked or unsafe operation.
See ArrayListWarnings.txt; 23 warnings. 
Fixed them all by qualifying ArrayList<Whatever>.

DMF.vTryLoadDropFile messages eliminated by anding them with (idebug>0).

11 Dec 2012: "notes" report should not include a space;  "OK27" not "OK 27"
  fixed today, A144: Constants.sResults[] had a trailing space "OK " now "OK" 

21 Nov 2012 A145

I want to avoid this Java heap space Out Of Memory situation.
  http://www.javaprogrammingforums.com/java-theory-questions/364-exception-thread-awt-eventqueue-0-  java-lang-outofmemoryerror-java-heap-space.html
  http://javahowto.blogspot.com/2006/06/6-common-errors-in-setting-java-heap.html

A memory-cheap way is to eliminate the huge char[][] arrays for each max edit field,
instead use an extensible structure such as one StringBuilder, or an ArrayList of one
line StringBuilders, or of StringBuffers.
^^ See Editors\AEdit for an example using char[][].

StringBuilders exist in my Java 1.5.0 compiler but are not supported by my ancient
ProGuard4.0.  Surely is supported by this year's ProGuard4.8.  
It is OK with StringBuffers but I have read that the thread safety of the
StringBuffer makes it slower than usually necessary.  OTOH maybe I need that
safety.  

To begin: rewrite MikesTextEditor to use an ArrayList of StringBuffers.
That arrangement makes for very easy string insertion, char insertion, and
field widening/narrowing.   Copying a field down can be done by combining
sb.getChars()  and setCharAt() to overwrite or insert() to push right.
However these fail if the char span enters the rightmost unfilled portion
of the StringBuffer, so that there may be the need to insert spaces in the
source SB and the destination SB before copying. 

Consider creating a Text2D class that has methods for string input
with parsing into lines, clearContents, getContents as a string out,
insertCharAt(i,j,char), setCharAt(i,j,char), getCharAt(i,j), ....

DONE PARTWAY ^^^ see Editors::TableEditor::MinEd which uses..
  Text2D class which is an ArrayList of StringBuilders;
  TablePanel extends JPanel which manages the GUI view.

Perhaps a better alternative is to base the editor on a JTextArea.
This way we get for free the caret management, the scroll panel action,
and of course the freedom of no fixed memory bounds for the contents.

However some features must be added. 
DONE PARTWAY ^^^ see Editors::AreaEditor::AE.java (also derived from MinEd.)
Here the work is done by a GUI class
  MTextArea extends JTextArea  (implements MouseWheelListener??)
This class performs all JTextArea functions, but intercepts most keystrokes.
  * insert char is converted to replace char;
  * Enter does not break lines but just advances the caret;
  * Option-Right widens the entire table by one char;
  * Option-Left narrows the entire table by one char;
  * Later will also implement Option-Down copy field down.
Keystroke are done as in EPanel: private class MyKeyHandler implements KeyListener.
  public void keyPressed(KeyEvent ke)...does everything that manages the GUI.
  public void keyReleased(KeyEvent ke)...does nothing.
  public void keyTyped(KeyEvent ke).....tests char; sets dirty; calls putTypedChar(c).
  private void putTypedChar(char c)... handles an actual char entry to JTextArea.
CaretListener: getMark is the 1D index of caret position.
  If a block is marked rightward, its ends are dot>mark.
  If a block is marked leftward, its ends are dot<mark.
  Caret listener code does not work as an inner class but is OK inline. 
Caret 2D row and column:
http://stackoverflow.com/questions/5139995/java-column-number-and-line-number-of-cursors-current-position



19 Nov 2012  A144: Intermittent FileOpen failure persists.
  Now and then, either using the File Chooser or the DnD,
  a file will simply fail to load.   No explanation.
  Exitting and restarting always (so far) gets things working,
  but after one or two reloads, trouble again.
  Needs diagnostics and messages.

  In DMF, I find only lower case "opt" etc: could it be as simple as
  a failure to verify both cases via toLowerCase() on the extension?
  Nope not that simple:  I fail to get even the Chooser.
  Also, DnD fails to gather either .RAY or .ray.
  Also, even loading a .RAY gives me a .ray within DMF "ext"

Here's a console error message trying a drag-n-drop that failed to load:

Exception in thread "AWT-EventQueue-0" java.lang.OutOfMemoryError: Java heap space
        at java.lang.String.<init>(String.java:208)
        at java.lang.StringBuffer.toString(StringBuffer.java:586)
        at com.stellarsoftware.beam.EPanel.getTableString(EPanel.java:789)
        at com.stellarsoftware.beam.EPanel.stashForUndo(EPanel.java:711)
        at com.stellarsoftware.beam.EPanel.clearTable(EPanel.java:912)

This suggests that my table heaps are too big, especially with stashForUndo()
which doubles them up.  Repeating with JMAX=1002, IMAX=256, so MAXRAYS=999;
FIXED^^  NO DND FAILURES AFTER TEN LOAD UNLOAD CYCLES. 

It would be a good idea to someday figure out how to avoid this limitation:
  http://www.javaprogrammingforums.com/java-theory-questions/364-exception-thread-awt-eventqueue-0-  java-lang-outofmemoryerror-java-heap-space.html
  http://javahowto.blogspot.com/2006/06/6-common-errors-in-setting-java-heap.html







11 Nov 2012, A143: User Guide Improvements
  * need half a chapter on AutoRay, constrast with AutoAdjust.
      There will have to be some new artwork. 
  * need a page in Optics about CoordBreak: one example & graphic.
  * need a short explanation of new RayGenerator: RayStart vs RayGoals. 
  * of course need a total retest with torics, TMAs, etc etc

Some Quick Tests:
  BENT1 explores roll isotropy with a 45deg bent beam paraboloid: OK
  BENT2 explores roll anisotropy; 45deg bent beam parabolic cylinder: OK
  TMA, TMA2 verify no roll dependence in a bent telescope system.  OK



DEVELOPER NOTE:  StringBuilder is unavailable in Java 1.4; use StringBuffer instead.
  This compressor problem appeared with the new unused U.getFields() line 900.
  Not a problem with my rev 1.5 compilers but is a problem with my compressor. 
  Maybe time for an updated compressor  "ProGuard"  ?? 


10-11 Nov 2012: testing A143 using Cooker -- ISSUES
  1. Tilt pitch and roll in Layout are backwards although
     the ray intercepts look OK
  ^^ FIXED: Layout's vx2lab() had reverse OE11 coefficients. 

  2. Reflected rays go to origin, not to destination,
     yet nongrouped optics work as they should.
  ^^ FIXED: indexing into RT13's internal arrays changed to groups.

  3. the correct pattern of Dia1, OK2... in A135 has been lost.
  ^^ FIXED the moment I got the indexing correct. 

  Cooker now works correctly. 
  Cass now works correctly.
  FVCcorr8 with coordinate break works correctly.
  Slicer works correctly.

  DISK is OK when all rolls are zero, but messes up when final ten rolls=90.
  Rolling subsets of the first nine surfaces: no error.
  Rolling surface 10 (The 45deg mirror):  no error.
  Rolling surface 11 (a lens surface at X=-1): big error!
    2.2 microns of xfinal error not 80nm! yikes
    (its radial arcs are drawn twice because it is double pass)
  Note that A135 has no errors with any and all rolls anywhere.
  Although V11, V12, V13, V14 remain zero as they should,
  V15, V16,V17, V18... become nonzero, as they should not.
  STRANGE that the roll at surface 11 is not manifest until V15.
  Eulers OK???  Yes eulers are working perfectly.

  Q: what is the simplest optic that shows this problem? 
  I am thinking that no coaxial system will have the error since
  several optics test OK but that the right angle bend in DISK is
  allowing the problem to manifest.  
  DISK2.OPT is a 45deg mirror and a concave paraboloid.  
  YES shows the same odd problem:  Roll=0 or 180, OK; 
  but Roll=90 shows 0.01125mm of error in Yfinal even though
  all V1, V2, V3 are zero (!) 
  NO ERROR from rolling Mirror 1 or FocalPlane.
  Error comes only from rolling the powered mirror #2. 
  The error is parabolic: nine times bigger for 3x field.
  Could it have something to do with a messed up W0 normalization?

  Nov 11: Found a typo in RT13.vxtolab(): an OE32 should have been OE23

  Ha. That ends these roll problems. 


Problem: when the final table is closed, there is no more BJIF
blinker to trigger a fresh parse & status.  So the previous parse
and status bar remains unchanged and wrong.  A "window closing"
event could trigger a fresh status.  
^^ FIXED 11 Nov A143: added BJIF closing listener, triggers DMF.vMasterParse(). 



3 Nov 2012, A143: reinstalling groups into RT13::bRunOneRay().
Does this installation put groups back into all client calls?

Client Calls to RT13 are...

 AutoAdj:   iBuildRays(), group[], bGoodRay[],dGetRay(), surfs[][], 
            getStatus(), getHowFarLoop(), getGroupNum(), getAttrNum(),
            raystarts[][].

 AutoRay:   iBuildRays(), bRunOneRay(), dGetRay(), raystarts[][].

 Comparo:   dGetRay(), bGoodRay[].

 DMF:       gO2M[], gR2M[], surfs[][].

 H1DPanel:  iBuildRays(), group[], bRunRandomRay(), getGroupNum(),
            getAttrNum(), bGoodRay[], dGetRay(), surfs[][].

 H2DPanel:  iBuildRays(), group[], bRunRandomRay(), getGroupNum(),
            getAttrNum(), bGoodRay[], dGetRay(), surfs[][].

 InOut:     iBuildRays(), getHowfarRay(), getHowfarLoop(), getStatus(),
            bGoodRay[], getGroupNum(), getAttrNum(), dGetRay(), 

 LayoutPanel: iBuildRays(), refractLayoutShading[], getRefraction(),
              surfs[][], raystarts[][], getHowfarRay(), dGetRay(), 
              bRunRandomRay(), bGoodRay[], getStatus(), getHowfarLoop(),
              getExtend(), getGuideRay(), raystarts[][], dGetSurf().

 MapPanel:   raystarts[][],  dGetSurf(), surfs[][], iWFEgroup[], 
             iBuildRays(), getStatus(), dGetRay(), getGroupNum(), 

 MEJIF:      media[][].

 MPlotPanel: getGroupNum(), getAttrNum(), raystarts[][], surfs[][],
             iBuildRays(), getStatus(), dGetRay(), bRunRandomRay(), 
             getGuideRay(), 

 OEJIF:      surfs[][], jstart[], jstop[], group[].

 Plot2Panel: iBuildRays(), group[], getGroupNum(), getAttrNum(), 
             bGoodRay[], dGetRay(), getHowfarRay(), raystarts[][], 
             bRunRandomRay(), getGuideRay().

 Plot3Panel: iBuildRays(), group[], getGroupNum(), getAttrNum(), 
             bGoodRay[], dGetRay(), getHowfarRay(), raystarts[][], 
             bRunRandomRay(), getGuideRay().

 REJIF:      raystarts[][][], iWFEgroup[], smins[], spans[].

 




Q: is there any need remaining for AutoAdjust to access rays?
Now that AutoRay is in place, and is more powerful ( 1000 rays OK).

Design for groups: I am hoping that the bRunOneRay() can most simply
be groupified by converting 

    for(int jsurf=1: jsurf<=nsurfs; jsurf++)
into 

    for(int group=1; group<=ngroups; group++) 

and then at each group index call a function iGetBestSurf() whose job 
is to identify the best choice surface.  When there is only one surface
then of course that is returned immediately.  When there are 
several possibilities, it performs a selection based on valid Diams
and ray distance positive, and which ray segment has the least
distance. 

Then, bRunAllRays() just loops over all raystarts, repeatedly calling
bRunOneRay(), plus of course evaluating the WFE as required. 



1 Nov 2012 A142 Bending the New Rule: Using bNeedsParse means that
the second argument to vMasterParse() is unnecessary.  That argument
(bParseDebug) was intended to separate the edit driven parser debugger
output from the timer driven parser, no debugger output.  But, if the
new flag is successful and does not crash the computation or mess up
the vertical scrolling, then all calls to vMasterParse will come from
BJIF's timer, none from the individual editors, and the argument becomes
superfluous.  Similarly, eliminate DMF.giFlags[PARSEDEBUG]. 
^^ WORKING ... prompt syntax messages, no scroll trouble, math OK.

However a warning message is too specific:  a faulty numerical optics
table refraction number gives "Ray table lacks @wavelength" whereas
it could well be "faulty refraction number" or more generally, with
no .MED table loaded, "Needs Med table" or "Unknown refractive index"
^^ INSTALLED THIS INTO Constants.java as sExplanation string #8. 

Tasks still pending in A142:  
1. Get the RayGenerator goal output working and test it
 ^^ DONE 3 Nov 2012, A142 all outputs work OK.
 ^^ Also I made the  missing field messages more specific.

2. Get the groups back into RT13 and test them.  This will be A143.




21 Oct 2012 A141: cosmetic improvement: Save As description was "RAYfile"
and now I have put a blank into EJIF::getDescription() making: "RAY file" 


30 OCt 2012 A141: A140's timer parser messes up vertical scroll marker.
This timer parser also seems to corrupt ray traces: bizarre or
impossible ray failures, that do not happen with A139 or A141 where
the blinker parser has been disabled.  I think I should allow
the parser only on mouse-up and or when no calculation or scrolling
is happening.  

NEW RULE: NO TIMER THREAD DRIVEN CHANGES TO PARSE TABLES DURING CALCULATIONS.
Reason: asynchronous threads mess up each other if any data are common,
and parse data are crucial to ongoing ray trace work.

Bending this rule:  suppose I introduce a dirty flag EJIF:bNeedsParse.
(This is analogous to EJIF's bDirty & would locate in the same places.)
Set it true after each keystroke or table modification cut, paste...
Set it false after each call to vMasterParse(). Have the BJIF blinker
interrogate this flag and only if bNeedsParse would it call the parser.
This would give the instant feedback that is so useful yet not mess
up the scrolling nor the calculation. Centralization would eliminate the 
need for the various editors to individually call vMasterParse().


29 Oct 2012: would be good to have the Options::RayGenerators
able to write to goals as well as starts.  That would permit easy
pupil filling for AutoRay. 
^^ PARTLY DONE 1 Nov 2012


29 Oct 2012.  A140 however still does not include groups.
Groups should be reinstalled, perhaps with a cleaner organization
wherein RT13:bRunRay() steps in group number but populates the ray table
according to surface number.  THIS WILL LEAVE MISSING DATA IN THE RAY TABLE
which should be checked for to avoid dropouts.  And what to do about
the graphics, e.g. Plot2D, that need to see a surface number?
Interpret as a group number, or as a aurface number??? I think a surface
number but must skip missing "-0" rays that never visit the surface. 


Does the newly installed AutoRay eliminate the need to have the
ray table accessible to AutoAdjust?  
I.e. can AutoAdjust be optics-only, and AutoRay be ray-only?


27 Oct 2012  A140: installing a table parser timer to avoid the
false message "Empty Optics table" being sustained until some
other table gets edited thereby forcing a parse.  

Can the editor JIF blinker be subverted into triggering table parses?
Parses are not computationally demanding; blink of an eye.
Yes, works fine:  BJIF now includes in its blink task a call to
DMF.vMasterParse() that analyzes all available tables and posts
the appropriate message on the title bar. 

However we don't want the blinker to drive debug messages.
That blizzard of messages would obliterate useful debugging.
Instead, we want the blinker to do a master parse and post its
results on the title bar, no more.  How to distribute the debug
permissions to all the table parsers?
AHA a new global flag, giFlags[PARSEDEBUG]:  this is to be set=1
when vMasterParse() is triggered by an editor front/back,
and set=0 prior to a blinker trigger.  
Best if this flag goes through vMasterParse() as a requestor condition.
This way each requestor must specify if it is to deliver debugging.
And, each editor client REJIF etc must and this flag status with its
other DEBUG status flags before permitting output to System. 
^^ DONE.  Works!



27 Oct 2012  A139:  Something fishy in OE11...OE33; reverify Eulers?
Eulers are OK.  However they have the opposite sense compared to the
Users Guide: they convert lab to surface coords.  Easy to fix: renumber
them in OEJIF SetEulers() and in RT13::labtovx() and vxtolab(). 
^^ DONE: Tests OK, DISK.OPT pitches tilts and rolls as it should. 


22 Oct 2012  A139: Future improvement for Option::RayGenerator:
allow the generator the freedom to write its output into goals
as well as raystarts.  Twelve legal goal fields, too many for
checkboxes, however there will seldom/never be both xgoal and Xgoal
in the same table.  So use X to mean Xgoal or xgoal, whichever is
present in the table. 


18 Oct 2012  A139: Creating a stand-alone AutoRay class.  
Has its own button, and graying permission, and its own LMhost. 
Some issues to resolve:
 
1. Need a single ray method RT13.bRunOneRay(int kray)
that should take the nudged raystarts[][] and then
fixUVW() and then copy to ray[][][] then run it, and
return its success. 
^^ DONE.

The fixUVW() is performed as part of iInitRaySeq(kray, nsurfs)
which handles both the kray=0 random ray case and the contrasting
kray>0 table ray fixups. 

2. Do we really benefit from a separate Comparo1Ray class?
In AutoAdj, the class Comparo helps out with all the math
subtractions, while Auto simply manages the reporting and
timer methods.  But for AutoRay, the subtraction is mighty
simple, no WFE, etc.  

I am eliminating Comparo1Ray thereby bringing resid[] into AutoRay.
^^ DONE. WORKS.

I am thinking about eliminating Comparo too, bringing resid[]
into AutoAdj where it is a more natural fit, alongside jac[][].
^^ NOT YET DONE; it has a lot of WFE and group stuff. 


17 Oct 2012  A138: installing AutoRay internally to AutoAdjust
  This is a one-ray-at-a-time adjuster that sets U0,V0 or X0,Y0
for each ray, making it land exactly at a specified Xgoal,Ygoal or
Ugoal,Vgoal.  Its purpose is to allow setup of a big ray list that
accurately targets an internal pupil. 
18 Oct: ABANDONED -- internal changes are too severe. 




6 Oct 2012  A137 on top of A136custom but with a simplified NO GROUPS bRunray().
  -- installing a COORDINATE BREAK ray translator & reorienter to provide
a way to offset a portion of an optical system that is written coaxially.
Kind of a ray space warp that (a) absorbs rays, then (b) generates them
with a displaced location and direction.  Immediate need is to explore the
FiberViewCam images when the BigBOSS prime focus corrector moves.
COORDINATE BREAK surface type  "cbIn" is the ray catcher.
COORDINATE BREAK surface type "cbOut" is the ray re-launcher. 
  1.  positive RROK macros are retained but RNxx macros are eliminated
  2.  bRunray() simpified (no groups); same dIntercept(), vPropagate(), iRedirect()
  3.  dIntercept() now returns 0.0 for OTCBOUT;
  4.  iRedirect() now copies local uvw for OTCBIN; 
  5.  iRedirect() now copies local xyzuvw for OTCBOUT.
Works!  Layout could use some inter-break ray suppression. 

Would be good to fix a few continuing bugs:
1.  A zero-gap plano interface is legal. 
   However a backward or zero ray onto a polynomial fails with a "bra" message.
   RT13::dPlaneSolve looks OK. 
   A137::BackwardBracket.OPT shows "bra" when ray length is zero or negative.  

2.  "OPTfile" etc should be ".OPT file"
3. Often get "Ray table is empty" when I have just saved it and it is OK;
   I think that the parser fails to be invoked at save???
   Ditto, "Opt file is empty"....
4. Unexpected console messages from Java: 
    CGContextGetClipBoundingBox: invalid context
    CGContextGetCTM: invalid context
5. Why does the darn Z axis always fall short of Zfinal?
6. In editor::textmode, Enter key does not force a new line.  It should. 


18 August 2012: trying the alternative ToDo Layout sequence: 
  previous sequence is arcs, shading, rays, finish nearside arcs.
  trial sequence is shading, arcs, rays, finish nearside arcs.
  Ooops this cannot work! since doFullArt() is necessarily sorted,
  and sorted because nearside shading MUST block distant arcs. 


2 August: added a few tiny temporary changes to help with the Zwicky 
Telescope Facility presentations --
 
   * MultiPlot RMS blur number labels multiplied by 1000 so can read as microns
   * allow Layout to have ray widths of zero meaning not drawn

15 May 2012   To add: a list of valid ray colors in the Help box.
r=red  m=magenta c=cyan  b=blue  g=green y=yellow h=heliotrope (just kidding)
or no tag: opposite of the background color black/white. 
^^ Done 15 May,  looks good.  See DMF.java "Special Keys"


3 May 2012    A136: Bug identified and fixed:
The automatic ray start generator failed if its starting row
was set to a value > 1000.  Problem was found in Options.java
where an incorrect row start limiter {1, 990} was found.  I changed
that limiter to {1, JMAX-3} so this limit will properly track updated
values in JMAX.   Also I found that there is was no built-in validity
check in EPanel for inserting a string into a table row; so I added
that JMAX test there to safeguard against trying to modify a row
that is technically out of bounds. 


7 March 2012:  A135 work starting.  
Renamed Auto dialog "RMS radius" to "RSS radius" for clarity.
InOut's dialog already has "RSS radius.".   Now they look consistent. 
Changed EPanel's manageVSB() so that the scrollbar maximum
is kept in step with changes in nlines, thereby not having the
entire height of the available text window obvious. 
^^Done. Works. 
Also: deleted incorrect demo files 360.OPT and 360.RAY to distribution.
Also: added Ellipsoid.OPT and Ellipsoid.RAY to distribution. 


4 March 2012:  full checkout of these features, especially the
ellipsoids;  release 134 compiled checked and released. 


28 Feb 2012  A134: MultiPlot box strings are too long.
Fixed this, using U.gd() rather than U.fwe() -- looks much
nicer and switches automatically from fwd() to fwe() notation
as appropriate to the size of the number being displayed.
Also centered each string at the top center of each box.   


26 Feb 2012 A134 TestPlan
  GRAZE with secondary mirror Diam=1.2:convex reflection; Diam=0.2: concave reflection:  OK
  ELLIPSOID with 60 rays OK; 360 rays OK. 
  Random: needs to be disabled for MultiPlot and Map since not yet implemented.
  ^^ Done: grayed out.
  Caught a few System.out.println's in MultiPlot; installed if (DEBUGGING).
  All output functions work. 

22 Feb 2012 A134 Cleanup of RT13:
  Following A133 corrections in RT13 I have introduced iGetPosRoots
that distinguishes the "no roots whatsoever" case RPMIS returning -1,
from the "negative roots" case RPBAK returning 0 positive roots.
This allows a massive cleanup of dQuadsolve() eliminating the gnarly
logic of mixed cases; most of the work is now done in iGetPosRoots
leaving the farside/nearside task to dQuadRoots for positive roots only.
The product scz for a root has these values:
    scz < 0:  valid hyperboloid intercept
    scz = 0:  valid paraboloid intercept
    0<scz<1:  valid hemiellipsoid intercept
    1<scz<2:  invalid hemiellipsoid intercept
    scz>= 2:  invalid hyperboloid intercept. 

  ** PHANTOM HYPERBOLOIDS ARE NONEXISTENT **  "mis"
  ** FARSIDE ELLIPSOIDS ARE NONEXISTENT ****  "mis"

When there are two valid roots, now testDiameter() on both,
before choosing;  One root may bite the dust. 

  (If you need farside, make a group of near & far;
   this way you get fine control over both diameters.)

Checks out OK on SteveTulk360.
Checks out OK on GRAZE with <, >, and :.
Need to further test on XCYL, YCYL, ...
Need to rewrite page 125 "Intercept solution choice" to
  explain about farside & nearside and GRAZE. 
^^ Done.

20 Feb 2012  A133 Steve Tulk's issue is at least two issues.
He has an ellipsoidal reflector with many irises.  Farside issue.

1. His ellipsoidal reflector + irises is OK with isotropic table rays:
Rays that are heading away from the reflector vertex are all killed as they
should be: invalid intercept hemisphere. But with random rays, there is
a continuous range of angles being explored.  The helper file SteveTulk360.RAY
illustrates what is going on:  
   Angle group that hits the reflector goes where it should; 
   Angle group that would intercept reflector outside its Diameter die at
     their source as they should; 
   Angle group that would intercept the reflector far vertex within its Diameter
     are drawn as OK intercepts(ERROR!), but then they become dotted because they are
     not directed towards the first iris-- and the dotted direction is wrong too; 
   Angle group that would intercept the reflector far vertex close to its axis, just
     outside "diam" -- are drawn and then reflected backwards towards the first iris
     where they finally die. And the reflected direction is wrong also. 

2.  Substituting a spherical reflector again shows a related host of problems:
Ray intercepts beyond the Zflange are accepted!

Conclusion: the protection against farside intercepts has been lost.
Farsides should be enabled only with ">" or "<" present.  Otherwise nearside. 

^^ Found the problem: it is in RT13:doQuadSolve() -- and I fixed it.  
Now, farside intercepts are forbidden unless "<" or ">" is the typetag.  
A133 20 Feb 2012.  Introduced a new RRFAIL value: RRFAR and RPFAR and "far" as
a posted farside forbidden failure type. 



12 Feb 2012  A132  To Do:

  1. Add random rays to MultiPlot.  This may take a redesign that
  makes MultiPlot more analogous to Plot2D.
  Also: in MultiPlot, offer round plotboxes as an alternative to square.
  ^^ Round & Square are now installed and working. 

  But random is proving to be balky! 
  Problem is not in buildScaledItem: xcbox and ycbox are drawn perfectly centered.
  The local scaling factors gridstep, halfbox etc check out OK. 

  There is something fishy about the RT13.bRunRandomRay() result: its xfinal & yfinal
  appear to be symmetrically and centered on zero, even with the deviated raystarts.
  I would have expected the xfinal & yfinal to deviate strongly. Also, the 25 spot groups
  are very different on table rays yet equal on random rays, resembling the undeviated
  central group. 

  A test would be to see if RT13 has a changing U0, or always sees U0=0. 
  A changing U0 and V0 are recovered from RT13 by direct matrix access,
  but not through a formal dGetRay() request: perhaps a thread issue?
  Maybe need some sleeps?




  2. Retest the comma substitutor:  works for me but not Rod Andrew.
  Maybe get a test article from Rod?

  3. Retest the Z axis length; looks OK for me but maybe not Rod?
  Get details from Rod. 

  4. Distinguish and rename the two AutoAdjust exit failures:
  Negative ray length (say at which surface there is a negative length)
  vs. Lambda exit (caution about too many ill scaled adjustments)
  and put a paragraph into the B4UG about the limitations and error 
  messages that can arise from AutoAdjust.  Describe ill conditioned
  poorly scaled problems. 

  5.  Steve Tulk reports crazy random rays in Layout, for his example
  file; yet he concurs that my LENSiris example performs clean random rays.
  Find out what is going on.
 

1 Feb 2012  A132 Continuing to explore the blizzard:

Lenovo ThinkPad X61s: Win 7 SP1, javac 1.5.0_22, java 1.6.0_29
MacBook OSX 10.4.11,             javac 1.5.0_19, java 1.5.0_19

Horstmann & Cornell's DrawTest (v1ch7) either with its original
frame.show() or the newer frame.setVisible(true):
Compiles and runs without blizzard on the PC
Runs using PC compile OK on the Mac
Compiles & runs OK on the Mac. 
No blizzard! Unlike yesterday!  What is different?
No blizzard on XY.
No blizzard on A132 either. 
Runnning Firefox & Thunderbird & TextWrangler & TextEdit & A132: 
no blizzard of error messages in spite of all mousing across 
various app panels with various cursors.
??



31 Jan 2012  Very strange blizzard of error messages when I 
slide my mouse cursor off of the B4JE workspace onto my Mac
Desktop with B4JE still active:

"2012-01-31 16:36:19.980 java[1904] Apple AWT Restarting Native Event Thread
Exception in thread "AWT-AppKit" java.lang.IncompatibleClassChangeError
        at apple.awt.CGlobalCursorManager.nativeUpdateCursor(CGlobalCursorManager.java:178)
JavaAWT: Assertion failure: Java exception thrown
JavaAWT: File src/macosx/native/apple/awt/util/AWTException.m; Line 40
JavaAWT: Assertion failure: _javaException
JavaAWT: File src/macosx/native/apple/awt/util/AWTException.m; Line 48
2012-01-31 16:36:20.028 java[1904] Apple AWT Startup Exception : See Java exception object"

Maybe this is why Byron Dieter finds his system bogging down and 
overloading his system log?

And!  A129 has the very same problem, running bash b.sh so that the 
Terminal window sees all the system logging.  Sees nothing if run from the
fully compiled & compressed .jar file.   (But I betcha the same AWT failure
is taking place!)

Ditto problem is in A116. 

Ditto problem is in XY, a simple 2D plotter. 

Ditto problem in Horstmann & Cornell DrawTest.java

Lots of other users get this same error message: 

http://blog.nominet.org.uk/tech/2008/04/24/restarting-the-awt-native-event-thread/
http://javasourcecode.org/html/open-source/jdk/jdk-6u23/sun/awt/GlobalCursorManager.html
http://docs.oracle.com/javase/1.4.2/docs/api/java/awt/Toolkit.html
http://www.vtk.org/pipermail/vtkusers/2007-February/089701.html
http://sourceforge.net/tracker/?func=detail&aid=1655458&group_id=79235&atid=555932
https://www.chemaxon.com/forum/ftopic274.html
http://lists.apple.com/archives/java-dev/2005/Jan/msg00283.html
http://www.mailinglistarchive.com/java-dev@lists.apple.com/msg10375.html
http://lists.apple.com/archives/java-dev/2003/May/msg00738.html


29 Jan 2012 A132:  MultiPlot getting random:
A tidier approach would be to stash the raystarts & optics initially;
then deviate the parms for the table rays into each plot;
then replace the raystarts and optics. 

For random, stash again;
then deviate the raystarts and parms for each random ray;
then replace the raystarts and optics. 

Because of the actual work involved it might prove beneficial to run
a dozen random rays into each MultiPlot plot rather than just one. 


28 Jan 2012 A132 Tasks
These are prompted by Rod Andrew <joandrodok@orange.fr>
  1.  Get WFE working right: it is blind to defocus.
      Also create & verify with a new WFEDEMO document.
  2.  Fix the insufficient Zaxis length on long skinny optics.
      Hmmm: my LONGNEWTON looks OK.  Writing to Rod. 
  3.  Devise a universal comma/period receiver for my readers;
      could be as simple as U.nationalize() in U.suckDouble.
      Hmm: testing reveals that commas are already OK!
      Wrote Rod Andrew about refining this question. 
  4.  How about a random ray generator for MultiPlot?




27 Jan 2012: A131: reverting to A129 but adding DEBUGGING flag
and removing the IBUG component of giFlags[], replace with a
public integer DMF.idebug, always zero at every startup.  
Now: Byron's files Dieter_SSLens.OPT and Dieter_SSparRays.RAY
run great including their polynomial.  
New debugging logic works.


21-24 Jan 2012, A130:  compilation and testing went smoothly.
However!  Byron Dieter immediately found that the iterative
bracket solver fails on his test file (polynomial) and damned
if I know how A130 had any changes to its solvers. 129 is OK.


17 Jan 2012:  Done.  There is now a flag DEBUGGING in the Constants product section
and there is no longer any IBUG index into the UserOptions, so no saving the debug
status; always starts a session with debug off.  If DEBUGGING=false there is not even
a menu option to turn it on.   Nothing has been added to the title bar. 

10 Jan 2012:  Need a code improvement that TURNS OFF debugs in Demo products,
so that people do not get into Byron Dieter's situation of vast XXX.log files
and bizarre system overload crashes.  Also a TitleBar "Debugger ON" when it is on.

8 Jan 2012: Memory Footprint discussion with Byron Dieter,  byron <dieterb@charter.net>

1 Jan 2012
Using my Mac's System Activity Monitor utility on our office MacBook (10.4; 1GB memory)
I get the following system memory "free" megabytes:

No B4JE's running:    278 MB
One B4 JE:            224 MB
Two B4JE's            174  MB
Three B4JE's:         131 MB
...so I conclude that each B4JE instance occupies about 50 MB.

8 Jan 2012
I ran some memory footprint test on a machine that may be closer to yours:

MacBookPro  with OSX 10.6.8 equipped with 4GB of 1333Mhz memory;
Java runtime installation is Java 1.6.0_29 as determined at www.JavaTester.org
or at www.stellarsoftware.com.

With just a few apps running (FileZilla, Thunderbird, and Firefox),
according to the Mac "Activity Monitor" the free memory is 1.35 GB.

Running just one instance of B4JE release 130: load & trace some big optics files
TMA191.OPT and TMA191.RAY, perform Layout:  Activity Monitor shows 116 MB
dedicated to this task, and shows free memory = 1.25 GB.

Exitting B4JE, Activity Monitor reports free memory comes back up to 1.35 GB.

Running B4JE again: same deal.

Exitting B4JE again: same deal, comes back up.

So with this setup the footprint is about 100 MB and is reproducible.

On Windows Seven,  2GB memory, dual core, installed Java RunTime is version 1.6.0_29,
with just a few idle processes running;
"CPU Usage" utility reports free memory = 874 MB and it wiggles around a little.

Running B4JE with the TMA files and Layout:  freemem = 829 MB.

Quitting B4JE,  freemem goes back to about 880 MB plus or minus a few.

So on Win Seven the footprint is about  50MB.
I am not certain why this very same B4JE on Windows, with the same
Java Virtual Machine installed, these differ.
Your experience?  About the same?

===========

30 Nov 2011  Ray Bryan notes that when {T,P,R} has p=-90deg,
then {0,-90,0} behaves just like {45,-90,45}. 
Worse, {45,-90,0} acts just like {0,-90,-45}. 
Actually these are correct! although astonishing.
I built a tiny spreadsheet that calculates TPR from AxAyAz
and it works.  
A130 1 Dec 2011: I installed new optics parms OLABX,OLABY,OLABZ to carry
OEJIF parser output, and wrote an Euler matrix generator based
on the lab frame formulas in TechNotes.  With these changes,
a user can continue with Tilt Pitch Roll, or dump those and
use column headers Ax  Ay  Az to specify angles in lab frame.
Seems to work.  Needs huge testing however!

By the way my adopted nomenclature Ax Ay Az clobbers my existing
definitions of the biconic asphericities AsphX,  Asphy: I have
renamed these B..x and B..y for BiconicX and BiconicY.  If we
adopt A130 I will have to revise the manual in two ways:

  * introduce this new angle description
  * rewrite the Biconic asphericities definition

Has an error.  All the single-axis rotations check out, but....
if Ay=90, then Ax=33 actually tilts around -Z not around +X.
If Ay=90, then Az=33 tilts around +Z as it should.
If Ay=90, then Ax=33 and Az=33 gives zero tilt, just the Ay=90 pitch.
There is no way to roll the Ay=90 surface about its axis of symmetry.



26 August thru  6 Sept  2011:  Rod Andrew (Belgium) wants to be able to run random
rays to two different Layout views that are simultaneously on screen.
See "7-8 Nov" below for the current random operations scheme. 

Problem 1:
I find that Run:Random can drive only the most recent GJIF of a given type,
cannot drive earlier GJIFs of that type.  Reason is that each new Layout etc
becomes *the* gjifType[] of that type, thereby removing earlier ones
from this array, and making their getGJIF() search fail. 

Instead of a search of gjifTypes[], better would get the front
JIF and test it for GJIFness.  Ignore the current gjifType[].
Perhaps try this...

    public static GJIF getFrontGJIF() 
    {
        JInternalFrame jif = jdp.getSelectedFrame(); 
        if ((jif != null) && (jif instanceof GJIF))
          return (GJIF) jif;
        return (GJIF) null; 
    }
    
This works, and allows random rays to be sent to any Layout willy nilly.

Problem 2:
When a GJIF comes forward it does a complete redraw and discards
its random rays.  I think the customer would prefer to have an existing
layout retain its previous randoms up until it is forced to discard them
by pan zoom or twirl or Tables.  Is there a way to eliminate the total refresh???
That refresh is part of GJIF's listener "internalFrameActivated" which
calls for gPanel.doCompleteRestart().   No need for this I think.
Removing it: allows artwork to Activate yet not necessarily repaint.

Great.  Except now, when a .OPT or .RAY or .MED table is changed,
the artwork does not update.  Even the frontmost Layout remains with its
previous constants.  I need a mechanism to force doCompleteRestart() on the
frontmost GJIF when an editor imposes a change.  Something subtler than
just coming forward.  Something like....

    if ((prevjif instanceof EJIF) && (thisjif instanceof GJIF))
      thisjif.doCompleteRestart();

No, that will work only for the first GPanel; subsequent GPanel frontings
will lose their warning.  Something better would use a broadcast flag that
any GPanel ignores until until it comes forward, then at that moment calls
its own doCompleteRestart().  This way, while in the background, each shows
the previous configuration, but when fronted, it updates. 

Adopting editor change counter DMF.nEdits;

    Initialized DMF.nEdits=0 when program starts;
    Increments for every keystroke or file load in any editor; 
    A local count iEdit is maintained by each GPanel instance; 
    GJIF's internalFrameActivated calls GPanel.doQualifiedRedraw();
    Each GPanel compares its private iEdits value with the current nEdits;
    If different:  updates its private iEdits, and redraws;
    Or if the same: does not redraw.

Works.  Allows background Layouts to retain their old graphics yet
the frontmost one tracks editor changes nicely.  


Problem 3: 
Because Layout Options include choices for azimuth & elevation, anything
that forces a Layout to reacquire its Options will force a reorientation,
violating the separate views.  So it is necessary to separate two
recompute sources:  table edits and Options edits.  GPanel now has...

    public void doUpdateUO()         // called in Options via GJIF
      ... this WILL alter az, el.

    public void doQualifiedRedraw()  // whenever GJIF becomes Selected.
      ... this WON'T alter az & el but will show new trace. 

Works.
Needs testing on non sticky layouts, and other plots. 


6 Sept 2011 A129: added a feature to Random that checks to see if
the editor change count has incremented during a run of randoms.
If it has, someone is monkeying around with the Tables, and best
thing to do is shut down the random rays and await further developments.
This feature was easy to add, using DMF.nEdits and a local iEdits 
set at Random startup. 

Works.



8 Sept 2011, A129:  Histo2D has a vertical ruler that
is always drawn first, even when it stands in front of the mountain.
Always drawing it first gives it an odd appearance: foreground background conflict.  
If the ruler is foreground, it should be drawn last.

My fix is to define bFront = U.sind(az-45) > 0.0; 
Then to predraw the ruler, or postdraw the ruler, depending
on this flag status.  
^Works. 


26 August thru  6 Sept  2011:  Rod Andrew (Belgium) wants to be able to run random
rays to two different Layout views that are simultaneously on screen.
See "7-8 Nov" below for the current random operations scheme. 

Problem 1:
I find that Run:Random can drive only the most recent GJIF of a given type,
cannot drive earlier GJIFs of that type.  Reason is that each new Layout etc
becomes *the* gjifType[] of that type, thereby removing earlier ones
from this array, and making their getGJIF() search fail. 

Instead of a search of gjifTypes[], better would get the front
JIF and test it for GJIFness.  Ignore the current gjifType[].
Perhaps try this...

    public static GJIF getFrontGJIF() 
    {
        JInternalFrame jif = jdp.getSelectedFrame(); 
        if ((jif != null) && (jif instanceof GJIF))
          return (GJIF) jif;
        return (GJIF) null; 
    }
    
This works, and allows random rays to be sent to any Layout willy nilly.

Problem 2:
When a GJIF comes forward it does a complete redraw and discards
its random rays.  I think the customer would prefer to have an existing
layout retain its previous randoms up until it is forced to discard them
by pan zoom or twirl or Tables.  Is there a way to eliminate the total refresh???
That refresh is part of GJIF's listener "internalFrameActivated" which
calls for gPanel.doCompleteRestart().   No need for this I think.
Removing it: allows artwork to Activate yet not necessarily repaint.

Great.  Except now, when a .OPT or .RAY or .MED table is changed,
the artwork does not update.  Even the frontmost Layout remains with its
previous constants.  I need a mechanism to force doCompleteRestart() on the
frontmost GJIF when an editor imposes a change.  Something subtler than
just coming forward.  Something like....

    if ((prevjif instanceof EJIF) && (thisjif instanceof GJIF))
      thisjif.doCompleteRestart();

No, that will work only for the first GPanel; subsequent GPanel frontings
will lose their warning.  Something better would use a broadcast flag that
any GPanel ignores until until it comes forward, then at that moment calls
its own doCompleteRestart().  This way, while in the background, each shows
the previous configuration, but when fronted, it updates. 

Adopting editor change counter DMF.nEdits;

    Initialized DMF.nEdits=0 when program starts;
    Increments for every keystroke or file load in any editor; 
    A local count iEdit is maintained by each GPanel instance; 
    GJIF's internalFrameActivated calls GPanel.doQualifiedRedraw();
    Each GPanel compares its private iEdits value with the current nEdits;
    If different:  updates its private iEdits, and redraws;
    Or if the same: does not redraw.

Works.  Allows background Layouts to retain their old graphics yet
the frontmost one tracks editor changes nicely.  


Problem 3: 
Because Layout Options include choices for azimuth & elevation, anything
that forces a Layout to reacquire its Options will force a reorientation,
violating the separate views.  So it is necessary to separate two
recompute sources:  table edits and Options edits.  GPanel now has...

    public void doUpdateUO()         // called in Options via GJIF
      ... this WILL alter az, el.

    public void doQualifiedRedraw()  // whenever GJIF becomes Selected.
      ... this WON'T alter az & el but will show new trace. 

Works.
Needs testing on non sticky layouts, and other plots. 


6 Sept 2011 A129: added a feature to Random that checks to see if
the editor change count has incremented during a run of randoms.
If it has, someone is monkeying around with the Tables, and best
thing to do is shut down the random rays and await further developments.
This feature was easy to add, using DMF.nEdits and a local iEdits 
set at Random startup. 

Works.



4 Sept 2011  Manual 129: added a short paragraph about intensities of
diffracted orders for surface relief and VPH gratings; mentioned
rigorous coupled-wave analysis. 

No Bragg diffraction since 2d.sin(theta)/Lambda is never an integer.  


23 August 2011  A128  Scattering surface added
  In Constants:  new macros defined OSCATTER for RMS gaussian value, OTSCATTER for type;
  In OEJIF: parsers enlarged to read & transfer these numbers to RT13
  In RT13: new redirector iScatter() introduced using U.grand()
  Seems to work. 
  Manual has been revised to show this feature in the table on page 30
  and in its own demo page 53, and indexed using Mark/Insert/Mark indexing. 

Also wanted:  arrange two options for the random ray generator:
   X0 Y0 Z0:  discrete or continuous.  Discrete means all 3 from one random ray.
   U0 V0 W0:  discrete or continuous.  Ditto. 
^^Done. Works.  See DiscreteContinuous.OPT, .RAY
Manual p.106 Chapter 21 updated, and reindexed using Mark/Insert/Mark.
  
Also wanted:  Build a Sellmeier function into run-time refraction grabber,
with Sellmeier coefs being permitted in .MED tables, permitting continuous
or discrete wavelengths.  Also provide that a .MED table that has Sellmeiers
can have a few check wavelengths, at which N is evaluated and output as part
of the table parsing process, to allow checking Sellmeier coefs for typos. 
With this: when Sellmeiers are in use, allow random wavelengths to be discrete
or continuous. 

Also wanted:  Instead of FileSave dialogs showing "OPTfile" prefer ".OPT file"

Also wanted: in Histo2D, when the vertical ruler lies in the background it
should be drawn before the mountain is drawn.  When the view is rotated to
put the vertical ruler in the foreground, it should be drawn after the mountain. 

Orchard looks ugly, especially in 3D.   Eliminate it????

26 July 2011   A127

tiny improvement needed in File Save As:
not OPTfile but rather OPT file
not RAYfile but rather RAY file
^^DONE. works. 

Retesting on Office Network needed in A127:
  trouble printing; sometimes WriteCAD is grayed out.
^^ ??


In B4DEMO, with a table, why is Save Table bolded not grayed?
In B4DEMO, with a graphic, why is Save Table bolded not grayed?
^^Reason might be that DMF::reinstallAccelerators() reinstalls the "S"
accelerator key frequently, and this reinstallation overwrites the
setGraying state.  SaveAs is not accelerated and hence does not
get reinstalled, so stays grayed out.  I am going to add a graying
statement within the reinstaller that grays it for DEMO products.
NOPE that does not solve the problem; worse, even with a graphic
focussed, still not grayed out.  Something ELSE must be enabling
that fileMenuItem. Perhaps a Window-coming-forward thread issue. 

In B4DEMO, all the Edit menu items are enabled, even when there is
no table editor in front, and when no records are marked for copying
or deletion.   Is this another bug from reinstallAccelerators() ??
Because reinstallAccelerators() also reinstalls the emiListeners. 
^^ commented out both calls to reinstallAccelerators()...
....HA! THIS gets the file menuitems and editmenuitems grayed!
So this bug must be due to the reinstall action thread.  
The reinstaller was never particularly helpful.  
I will remove it and retest both B4DEMO and BEAM4. 
B4DEMO: now graying is correct, both File and Edit. 
BEAM4:  now graying is correct, both File and Edit. 

In B4DEMO, when I edit a table, then click Save Table it is not
saved, so is correct; but then when I dismiss it I get a warning
"Unsaved Work in .RAY: Don't close : Abandon"
Why the warning?? Warnings should be blocked also.
^^ FIXED this problem: EJIF:bExitOK() now returns "true" if DEMO=true.  

In BEAM4:  text table printing to Lexmark works OK
but PDF does not appear.   Adobe problem?
Layout graphic printing to Lexmark works OK
but PDF does not appear.  Adobe problem?
WriteCAD works, looks great.




28 May 2011   A126

Added connectors to Layout for a more classical look.  
Works. 
Also reorganized the layout options; now it is
Details, Upward, Axes, Arcs, Weights, and Format. 
^^ DOES THE MANUAL ILLUSTRATION NEED UPDATE?







20 May 2011   A125  three things...

1.  When there is a table syntax error, the graphics go black.
  This is a buggy-seeming behavior.  Better: they should retain their
  original background but post a message "Table syntax error"

2.  The new nearside/farside scheme works nicely and reveals a bug
  in Autoadjust: while adjusting a lens (see PETZVAL) the lens surface
  can move a bit too far, killing some rays!  Should never happen.
  On PETZVAL the first surface sometimes wants to go to negative Z
  and the rays start as Z=0, and I notice a few central rays heading
  to the now-legal farside intercept since they start within the sphere.
  Autoadjust needs to never exit with freshly killed rays. 
  
3.  Would be nice for Layout to have optional connectors. These are
  lines that connect cardinal points of the periphery of surface i
  to those of surface i+1.  Electable N,S,E,W.  They would allow Layout
  to draw a traditional side view of lenses and prisms, in the closed
  loop pattern surface, connector, surface, connector. To fully empower
  this format, refractive graying should become optional.

  While I'm at it, I might improve the organization of Layout::Options.
  Instead if {AxisUp, Axes, Format, Arcs, Weights} how about new sequence
  {Format, AxisUp, Axes, Arcs, Connectors, Weights} 





17 April 2011   A125  installing key service refreshers into DMF.java
See DMF line 500:

   private void reinstallAccelerators()
   ...

This routine is called by WindowAdapter whenever Beam Four gains keyboard focus.
This way I hope to eliminate the rare, but frustrating, failure of Ctrl-C and
Ctrl-X during repeated cut/paste with Microsoft Office products. 


13 April 2011  A124 and the screwy accelerator key

Release 124 eliminates the dual Ctrl-A accelerator assignment.
Today, while running 124 on my Lenovo, writing up a WFIRST
telescope example, I attempted to copy some Beam Four table
data into a PowerPoint text box. Ctrl-C failed! Edit::Copy worked.  
I had been using Ctrl-C all day doing this very kind of thing. 
Later it started working again.

Strange.   

A short user report on the website
http://en.kioskea.net/forum/affich-28177-control-keys-not-working-on-laptop
says that unplugging and replugging a USB keyboard fixed the problem, as
if the OS key mapping software is renewed for each keyboard hot plug.

Perhaps if B4JE were to re-install its key listeners for whenever
its main WindowAdapter senses Activated or GainedFocus, that might
re-establish the flaky accelerators?  In my observed failure, the
circumstances were the gaining and losing focus to MS-PowerPoint. 


Would be nice to change file type from "OPTfile" to "OPT file" 

11 April 2011  A123:  Fickle Edit accelerator keys on the PC!
Customer Robert Brown  stockfund@compuserve.com writes...

  "I am trying to use Beam4 Java, version 123.
  The edit keys (ctrl-C, ctrl-V) work very sporatically.
  Therefore I cannot edit the tables without continually exiting 
  and starting the program.
  What am I doing wrong?"

On my MacBook OS-X 10.4 I can find no problem.

On my Lenovo, after about 15 edits, the problem appeared briefly!
The mouse EditMenuItems continue to work OK, but the accelerator keys
Ctrl-C and Ctrl-X briefly ceased to function.   

Do I have a collision between accelerator keys?  
Phooey now, 10 minutes later, I cannot reproduce the failure.
It's working OK presently. 

cutMenuItem, copyMenuItem, etc are all static fields of DMF; safe enough.

Hmmm: could it be that Ctrl-C copies a null marked selection to the clipboard?
Even though with no marked selection, Edit:Copy is properly grayed out?
  Mark a row.
  Ctrl X: it disappears.
  Nothing is now marked.
  Ctrl C: copy emptiness?
  (now the paste buffer is empty?)
  (normally forbidden: Edit:Copy is grayed out when nothing is selected.)
  Ctrl V: paste does nothing -- acts broken?

Nope.  Ctrl-C does not empty the paste buffer;
   and Ctrl-V does properly paste. 

Could it be that if the Ctrl key is held down, then the actions of
Ctrl-X, Ctrl-C, and Ctrl-V get mangled?

Trying 100 reps of Mark, Curl-X, Curl-V on the MacBook: no trouble. 

Doing 100 reps of Mark, Ctrl-X, Ctrl-V on the Lenovo:  no trouble. 

Wrote R.Brown with further questions.

Reading up: http://java.sun.com/products/jlf/ed2/book/HIG.Behavior3.html
Because accelerator keys do not require that any menu be showing,
no two accelerator keys may have the same letter.   If they did, their
behavior would be undefined, i.e. flaky.       Examining DMF.java:

  makeItem(JLabel, ActionListener, mnemonic, accel); 

Accelerators are of the form KeyEvent.VK_A, etc:

My File accelerators are... O, R, M, S, A
My Edit accelerators are... X, C, V, D, A

NOTICE MY ERROR IN HAVING TWO FUNCTIONS HANGING ON "A"
Mac's TextEdit uses Shift-S, not A, for SaveAs. 
Mac's TextWrangler does not accelerate SaveAs.
PC's Notepad does not accelerate SaveAs.
PC's PowerPoint etc does not accelerate any Office Buttons.
Mac's Excel does not accelerate SaveAs.

In 124 I am eliminating the accelerator on SaveAs. 
Sent a 124 to R.Brown to test, since I do not seem to see the problem.








18 March 2011 A123: reworking RT13's dQuadSolve();
Eliminating iGetPosRoots() in favor of iGetAllRealRoots().
Revising the root selector in dQuadSolve(). 
Now adopting a 16 state decision tree: 

  For each root: HyperbolaSheetOK; PosDefinitePathOK.
  Therefore 4 booleans and 16 possible situations. 

Must not lump both flags into one "rootOK" because that
would conflate RRMIS with RRBAK. A bad hyperbola sheet is 
definitely an RRMIS for that root, but maybe not for the
other root. 

Question from...  Johan.Forsberg@fysik.uu.se
Finds an unexpected dependence on ">" for a single intercept!
He is right! Should not need ">" for a single intercept.
Forsberg's ParaTest.OPT now works properly.  
Other tests:
  GRAZE.OPT   << works.
  LENS.OPT    << works including hyperbolic surfaces
  HYPER.OPT   << works.
  TMA.OPT     << works.
  CXCYL.OPT   << works
  CYCYL.OPT   << works
  COOKER.OPT
  << works
  SLICER.OPT
  << works. 
  DISK.OPT    << works. 
  SKIP.OPT    << works.

5 March 2011  A122:  Map looks OK being square when NxN, but does not
look good being square when NxM.  Could be as simple as Width/Height = 1.0
ratio?  with default = square, height always nominal thermometer height?
^^ DONE, looks great!

3 March 2011  A122: Why is Layout's centering strange on MapDemo?
Layout is properly centered on just about all test optics, but on
MapDemo the mirror at Z=1 is centered, and the ray start surface
at Z=0 and the final focal surface at Z=0 are both crowded to the
left hand border of the graphic.   Why?
Because the mirror, with her large declared Diameter, gets enlarged
by her radius, and at the same time the raystart surface has no
declared diameter and the focal plane has no declared diameter; so
these items at z=0 do not get correspondingly enlarged.  If the
focal plane is assigned Diam=1 then *voila* problem disappears. 

^^FIXED: now LayoutPanel includes a check of raystart's sphere size,
and includes this when setting hmin, hmax, etc.   Looks much better
on MapDemo but also improves all the TMAs for which a large entrance
pupil ray group stands at one end of the layout.  


Maybe it would be a good thing to enlarge the raystarts span into
a kind of effective radius, and apply it to h,v,o just the same way
that declared Diameters get applied? 


2 March 2011  A122: Correcting the ambiguous labelling bFullArt:
Instead of logical values true and false, I will clarify its two states
by assigning predefined constants bSKELETON and bFULLART.  Done. 

Currently two bugs:

>>  PLOT2D DOES NOT RESCALE ITSELF WHEN CLICKED FORWARD
   instead all rays vanish since they have moved elsewhere.
   However its mouse drag and zoom work OK. 

>> MAP DOES NOT REACQUIRE RAY & OPT DATA WHEN CLICKED FORWARD
   instead it retains the previous ray trace.  
   However its mouse drag and zoom work OK. 

The obvious tool is to reimplement GPanel's doActivationPlot:
don't call getNewMouseArtwork() which necessarily is nonparsing, 
but rather do the whole enchilada just like doParseUOandPlot().

^^ Works!  With this change to GPanel, Plot2D now updates all her data
when clicked forward, and thereby remains properly scaled.  YAY
And Map reanalyzes her raystarts & supplies a new map when clicked.  YAY

Little things still to do:

1. RayGenerators: emphasise Start at Row []; needs to be more visible: add a gap?
^^ DONE. Looks much better. 

2. Explain Map's all-gray situation: calculate NcellsVignetted; add warning text.  
^^ DANGER if the MapPanel posts a warning on its titlebar, then further options 
will fail  to trigger it since the options mechanism hinges on the posted title.
Installing the temporary title "Ngood < 2: vignetting?" means that further changes
to Options::Map will fail to alert the MapPanel object.  

Solution: use GJIF.getName().  Each GJIF has a permanent name, awarded at birth, 
never changed, yet each GJIF is free to show various warnings in the titlebar.
So let's have Options::updateAllInstances() use getName() not getTitle().
^^ Works!  Now, MapPanel always listens to its Options, regardless of warnings
that appear on its titlebar.

Could extend this to EJIF as well if we ever need it: those have names also. 


3. Retest COOKER and SLICER make sure groups still work OK.




1 March 2011   A122: repairing Map

MapPanel was never finished.  Work on Map went far enough
to run into problems, then effort shifter to MultiPlot to make the
routines more nearly parallel, now MultiPlot is in good shape.

For Map, at least one warning is crucial: what is causing my
Gray Screen of Death?  The problem usually is that each cell is 
excessively vignetted and cannot be plotted within the current limit
on vignetting.  

>> MAP NEEDS A BUILT IN EXPLANATION OF THE ALL-GRAY FAILURE

Map (and maybe MultiPlot) needs a warning about using multiple field
points in the Ray table.  Map and MultiPlot will generate their own
field points, and repeated pupil points at various fields should be
cut down to avoid excessive repetition.  The idea is MultiPlot and
Map will take one pupil group and one field and spread that single
field point into a MxN group of field points, based on the .RAY
field U0V0 as center, or on a user specified center. 

>> USERS GUIDE NEEDS A CLEAR DISCUSSION OF SINGLE FIELD FOR MAP & MULTIPLOT

Bad news: Map has been seriously broken as a result of the changes made
in these past few days.  MAPDEMO files used to run OK; now all I get is
a white screen of nothing, and very sluggish response to Options as if
there is some competing high-rate process gobbling up all the machine cycles.
Perhaps a tight endless loop. 

Unlike the other GJIFs, Map repeatedly calls GPanel::redo() to display a
partial map via local doArt(). But this must NOT trigger a fresh startMap().
It is vital to turn off the bPleaseParseUO flag just as soon as a new Options
are parsed:

       doTechList()  ----<<<---called by GPanel.drawPage().
       {
          if (bPleaseParseUO)  // want a fresh restart?
            startMap();
          else
            doArt();
       }

OK with this in place, MapPanel runs, and is nicely triggered by Options,
but retains its old data when clicked forward, ignoring new OPT and RAY data.

In contrast, MultiPlot properly grabs new OPT and RAY data when coming forward.
 * GJIF's InternalFrameActivated, calls its GPanel::doPlot().   
 * That calls GPanel::getNewArtwork() that does two things: 
                  ---empties g2Tech
                  ---calls OS repaint() for one new artwork.

Diagnostics installed in both....
 * MapPanel calls doTechList 100 times for full map at startup, 
   then just once to show the final map on clicking forward. 
 * MultiPlot uses doTechList once, at startup and later if clicked. 

To unify these, maybe have GPanel::getNewArtwork() clear the entire Map?
So as to allow it to start from beginning, when popped forward?

Something bizarre here: GPanel::getNewArtwork() is GPanel's mouse tool.
It it called for a mouse drag, and is Final when mouse button is released.

STRANGE for the GJIF listener to use its GPanel's mouse tool!
Yes, it works fine in the sense that dragging MapPanel retains its artwork.
So mousing ought to continue to use getNewArtwork().

But that same tool cannot distinguish a new GJIF focus ---  GJIF focus ought 
to have its own authoritative way to start a whole new Mapping. 
I suspect these two routes of command grew up in the same bathtub and share
the same mechanism, which MapPanel has now outgrown.  

Rename GPanel::getNewArtwork(bFinal) as GPanel::getNewMouseArtwork(bFinal)
to emphasize what is driving this need and why is demands a bFinal flag.
This way there would be little interest in co-opting it for other purposes,
and it would be immediately obvious what the intended actions should be. 
^^ DONE. 

Similarly rename GPanel.doPlot() as GPanel.doActivationPlot()
to emphasize that it is ONLY called as a result of GJIF activation. 
^^ DONE.

Now it is utterly obvious that doActivationPlot() is calling the wrong routine.
My renaming makes this cross threading apparent.....
Instead of calling getNewMouseArtwork() it ought to do the entire job internally.
It might need to implement a flags of its own (bRestart?), or not.
This separation of implementations will permit the ActivationPlot do its thing,
while separately the mouse drag will not get caught up in that action. 
This way, MapPanel can be dragged & zoomed, keeping its Map, or when clicked forward
will have the extra information needed to reanalyze all its data groups and restart.

Needs some way into client GPanels, requesting a total restart.  Perhaps

     doActivationRestart();

will do the job?  Grab new OPT and RAY data, parse UO, then run. 










1 March 2011 A122: User Selectable RayGenerator Table Starting Row

New feature in all four RayGenerator options: "Start at row = []"
Also updated the Nrows callout on the RayEdit table to reflect the
final number of rays even for a displaced start of RayGenerator. 
^^ Works. Nice!


28 Feb 2011  A122: RayGenerator bug, continued...
Until today, if a ray table had zero declared rays, REJIF would bail out
on seeing that zero, and not proceed to parse all the column header fields.
Meaning: a ray generator could not proceed to put rays into an empty
ray editor --- it would lack the needed array rI2F[] field numbers. 

Now, I have eliminated that bailout, and continue with REJIF parsing independent
of the numerical value of nrays.    Works. 

Also I have attempted to repair MapPanel's failure to respond to changes in .OPT.
It works OK when its Options change, but not if .OPT or .RAY have changes.  
Layout always works, getting its RAY updates on every click.
Plot2D and MultiPlot sometimes fail to pick up their updates when clicked forward,
although they never miss when Optioned. 

Another failure: after RayGenerator, there is no REJIF parse() and the new
data do not appear in the RT13 arrays for immediate use by the artwork generators.
Each RayGenerator OK_OPTION needs a call to DF.rejif.parse() to perform the updates.

Done: I installed a call to DMF.redit.parse() into the OK clause of each RayGenerator
option, and now the telltale REJIF: starting parse() sees every RayGenerator change.

But that alone is not enough: REJIF says it is doing the parse() but
the graphics do not appear to get the message, and continue to use their old data. 
As if their entry point ignores the need to retrace the rays. 

NOTE each graphic correctly follows MANUAL changes to nrays:
  1.  Manual inputs to REDIT bring it forward for focus
  2.  Clicking the graphic now brings it forward for focus
      (That maybe helps the acquisition of fresh rays?)
WHEREAS for the ray generators
  1.  Put Layout in the foreground, focussed; 
  2.  RayGen changes REJIF while it stays in the background
      (Layout remains in the foreground)
  3.  Clicking Layout does nothing
        - already in the foreground with focus
        - hence no change
        - does not acquire the new data. 

Q: Well then! shouldn't RayGen pop REDIT into the foreground, with focus???
   To emphasize its new contents?  (and of course to defocus Layout!)
A: Yes. The way to focus and parse rejif is this...

            if (DMF.rejif != null)
            {
                try { DMF.rejif.setSelected(true); }
                catch (java.beans.PropertyVetoException pve) {}
                DMF.rejif.parse(); 
            }

Works! Seems to include a toFront() which is a nice dividend.
BEST OF ALL  -- NOW --- WITH REDIT FRONTED & FOCUSSED, ALL THE GRAPHICS
FRAMES ARE BACKGROUNDED, keeping their previous artworks, awaiting summoning.
When each is fronted, it acquires the new data and displays it.  

This is a major new consistency.
  - Manual changes to OPT, RAY etc: 
     GJIFS are forced background, must be clicked to come forward with new artwork;
  - RayGenerator changes to RAY:
     GJIFS are forced background, must be clicked to come forward with new artwork.

B4UsersGuide should receive an explanation of how to use it & why it is a good idea.  
 * Automatically saves previous results, on screen!
 * Compare with new results using a fresh Layout! or re-use the old one.
 * User's choice. 




 






27 Feb 2011  A122: simplifying Option's update mechanism

    private void updateAllInstances(int rmtype)
    {
        if ((rmtype < 0) || (rmtype >= RM_NITEMS))
          return; 
        String t = DMF.runItemStr[rmtype];           // title to search for
        JInternalFrame[] jifs = DMF.getJIFs();       // get all jifs
        for (int i=0; i<jifs.length; i++)            // search all jifs
          if (jifs[i].getTitle().equals(t))          // identify title
            ((GJIF) jifs[i]).doParseUOandPlot();     // parses then plots.
    }  

This routine works just as well as the one that pops backward then forward,
and does not mess up the GJIF stacking order: revised windows remain in their
current stack position yet update cleanly.     This routine continues to use the
bPleaseParseUO flag to permit reading the new Options, yet allow full pan zoom twirl:
almost all the time that flag is OFF and the graphic is available for mouse control.

27 Feb 2011  A122

Installed 2D Gaussian circular ray generator. 
Seems to work OK. I adopted sigma from Rmax, rather than
the other way around.  Let's have Rein Maripuu check it out.

26 Feb 2011  A122
A possible danger in replacing all calls to g.doParseUOandPlot()
with the newer slicker updateAllInstances(rmtype) is that, perhaps, some of
the GJIFs will not automatically grab & parse fresh data from their Options.
If that happens, the Options tool will appear to have broken. By reinstating
bPleaseParseUO for all GJIFs, I will reenable the Options broken earlier: 


Testing LAYOUT:  
  White/black/stereo works;  STILL OK
  Az El is broken;           NOW WORKS
  WhichAxis is OK;           STILL OK
  Rulers & axes works OK     STILL OK
  Arcs is broken;            NOW WORKS
  Line weights is broken.    NOW WORKS. 

Plot2D: 
  PlotVars are broken;    NOW WORKS.
  DotStyle is OK;         STILL OK
  White/Black is OK.      STILL OK.

MultiPlot:
  Nx, NY is OK            STILL OK
  PlotVars is OK          STILL OK
  Diagnostcs is OK.       STILL OK
This one clearly benefits from a unified unavoidable parser!

Map:
  Nx, Ny are broken.      FIXED.
  StepVars are broken.    FIXED.
  WHite/black is broken   FIXED. 

Plot3D
  Vars are broken.        FIXED.
  Plot symbols are OK.    STILL OK.
  Black White is OK       STILL OK.
  AND THE 3D TWIRL ACTION IS GOOD.

Histo1D
  var is broken           FIXED. 
  
Histo2D
  vars are broken         FIXED.
  White/Black works OK    STILL OK
  AND THE 3D TWIRL ACTION IS GOOD.

Common design: I am thinking that doParse() should be called only
at the top of doTechList(), and not in the constructor:   surely a
freshly created GJIF will be told to provide its tech list!  << Correct; works.

Eliminating bPleaseParseUO from MPlotPanel:  Works just fine for MultiPlot;
can drag and zoom, although somewhat sluggish. 

HOWEVER in LayoutPanel, it is needed in order to allow pan/zoom/twirl:
no parsing when twirling, or the parsed angles would overpower
the mouse angle changes. There needs to be a parse flag, normally
OFF to allow pan/zoom/twirl, but clicked ON whenever the Options
are changed.  

With the GJIF thrust rear and front, is there still a need
for GPanel's doParseUOandPlot() to do both jobs:???  

Q: How does a GJIF popping forward know to refresh its GPanel?
A: The GJIF constructor attaches its panel, and a listener for the
  state InternalFrameActivated; it tests for UO_GRAPH boolean 8 which was
  once the TotalRegenerate flag (now removed), and if True it calls 
  gPanel.doParseUOandPlot(), or if false calls gPanel.doPlot().  

I think this must be the pop forward new artwork trigger.  
CONFIRMED: with this code commented away, Layout can no longer respond to Options. 
CONFIRMED: with this code reenabled, Layout responds nicely to Options.
Yet it also will pan/zoom/twirl nicely.  And has good two-way comm with Elev+Azim.

Summarizing: the bPleaseParseUO flag is essential for 3D twirl;
the 2D artworks have the mouse pan zoom to control the artwork
so for the 2D artworks, use of bPleaseParseUO is optional. 

To make all artworks similar, I will include the same code everywhere....

        if (bPleaseParseUO) // unnecessary in 2D
        {
            String warn = doParseUO(); 
            myGJIF.postWarning(warn); 
            if (warn.length() > 0)
              return; 
        }
        bPleaseParseUO = false; 



26 Feb 2011   Forcing multiple JIF repaints with new Options
In Options::Graphics there is a need to address all extant GJIFs
with newly specified options.  Here is a way to do this, by popping each
GJIF back, then forward.  Seems to work!

            GJIF gFront = DMF.getFrontGJIF();        // save this to restore it, below
            
            JInternalFrame[] jifs = DMF.getJIFs();   // gather all JIFs
            for (int i=0; i<jifs.length; i++)
            {
                String t = jifs[i].getTitle(); 
                for (int j=0; j<DMF.GJIFtitles.length; j++)  // select only GJIFs
                  if (t.equals(DMF.GJIFtitles[j]))
                  {
                      try { jifs[i].setSelected(false); }
                      catch (java.beans.PropertyVetoException pve) {}
                      try { jifs[i].setSelected(true); }
                      catch (java.beans.PropertyVetoException pve) {}
                  }
            }

            //---after the scramble, restore the top GJIF-----
            
            if (gFront != null)
            {
                String fTitle = gFront.getTitle();  
                for (int i=0; i<jifs.length; i++)
                  if (fTitle.equals(jifs[i].getTitle()))
                  {
                      try { jifs[i].setSelected(true); }
                      catch (java.beans.PropertyVetoException pve) {}
                  }
            }

I think this same method could be used to replace the many calls in Options to
g.doParseUOandPlot()  which succeeds in parsing the new UO, but fails to replot. 
User must manually click her window to see the application of the new Options. 
Could be felt as a disconnect:  I asked for my change, but the darn plot appears
to be unaffected!   Instead of the present scheme

            if (RM_MPLOT == DMF.getFrontGJIFType())
            {
                GJIF g = DMF.getFrontGJIF();
                g.doParseUOAndPlot(); // via GJIF into GPanel
            }

we could ignore the flavor of the front GJIF type, and search all GJIFs:

            String t = DMF.runItemStr[RM_MPLOT];   // title to search for
            JInternalFrame[] jifs = DMF.getJIFs(); // get all JIFs
            for (int i=0; i<jifs.length; i++)      // search them
            {
                if ((jifs[i] instanceof GJIF) && (jifs[i].getTitle().equals(t)))
                {
                    try { jifs[i].setSelected(false); }
                    catch (java.beans.PropertyVetoException pve) {}
                    try { jifs[i].setSelected(true); }
                    catch (java.beans.PropertyVetoException pve) {}
                }
            }

This works, and the coming forward emphasizes the change. Big improvement!
Let's adopt this everywhere and bump the rev to 122. 





25 Feb 2011  A121: cleanup of Multiplot:

  * Basis is a single simplified doParseUO()
  * Always called by constructor at startup
  * Always called by doTechList

These improvements help a lot!  Now, whenever MultiPlot starts,
or whenever it comes forward, it gets the current data.

Of course if MultiPlot is in the background, it retains
its old data, and is not refreshed.  Understandable, when
editing .OPT or .RAY.  Perhaps not desirable when editing
Options:  there, the user might expect a fresh option group
to force a regeneration with the [OK] click. At present, Options has

            if (RM_MPLOT == DMF.getFrontGJIFType())
            {
                GJIF g = DMF.getFrontGJIF();
                g.doParseUOAndPlot(); // via GJIF into GPanel
            }
which calls for a ParseUOandPlot() only when the MultiPlot is already front. 

Do we have a proven mechanism, in Options, to force pop the client
artwork up front with each [OK], provided the client exists?
Reviewing Options...
...hmmm: 
  LayoutOptions calls g.doParseUOandPlot() via GJIF & GPanel;
  Plot2DOptions calls g.doParseUOandPlot() via GJIF & GPanel;          
  MultiPlotOptions calls g.doParseUOandPlot() via GJIF & GPanel;
ditto: Plot3D, doH1, doH2...
and:  doGraphicsDialog() actually steps through all GJIFs with
             DMF.gjif[i].repaint();
             DMF.gjif[i].setVisible(true); 
             DMF.gjif[i].toFront();  

...so I think Options:MultiPlot could run a similar loop, checking
each gjif to see if has a MultiPlot and if so, do the same thing.
Actually! Users might want a choice...  Immediately Regenerate? [ ]
which would apply options even to background artwork, when checked,
or would await the artwork popping to regenerate. 

I will try this....Nope.  Telltales show it proceeds through the JIFs and does its
triple actions, but on screen nothing changes.  As if a JIF cannot be told to repaint().
Yet it regenerates OK with a manual click. Thread.sleep(1) does not help either darn it.

            JInternalFrame[] jifs = DMF.getJIFs(); 
            for (int i=0; i<jifs.length; i++)
            {
                String t = jifs[i].getTitle(); 
                for (int j=0; j<RM_NITEMS; j++)
                  if (t.equals(DMF.runItemStr[j]))
                  {
                      jifs[i].repaint();
                      jifs[i].setVisible(true); 
                      jifs[i].toFront();
                      try {Thread.sleep(1);}
                      catch (InterruptedException e) { return; }
                  }
            }

Until I know more about forcing a repaint, I will remove the Total Regenerate []
checkbox from Option:Graphics and from Options:MultiPlot, and revert to the standard
notion (PLEASE EMPHASIZE IN THE MANUAL) that graphics output screens in the background
are saving their artwork and only the foreground one is going to update.



25 Feb 2011  A121: MultiPlot bugs
Bugs in MultiPlot: 

  1. Deviating ray starts is OK but optics angles TPR need matrix update;
  ^^ Fixed: installed OEJIF.setEulers(nsurfs) upon deviating & upon restoring. 

  2. Initial Run:MultiPlot stepping raystarts is OK. Stepping any
    .OPT parameter it gives false initial identical patterns, but when its
    window is popped forward then it corrects itself.  Popping can be via
    viewing its Options and pressing [OK], or by popping an editor then
    popping MultiPlot.  Either way it corrects itself. 

  3.  Optioning MultiPlot from step=[U0, V0] (works OK) to [U0, C1]
    introducing optics parameter: the first display is wrong, but gets
    corrected by popping something else forward then popping MultiPlot. 

  4. Lower case c1 is unknown, yet upper case C1 is OK.
   ^^4 is now fixed, using toUpperCase() everywhere. 

  (1) can be handled most easily by requesting a new Euler matrix,
  for example AutoAdjust uses bAngle ...

        if (bAngle)
          OEJIF.setEulers(nsurfs); // not ngroups!

  (2) seems to arise from the constructor lacking some initialization
  which is properly done on the second pass;  

  (3) is perhaps related to (2);



MultiPlot has two parsers: getUOwarning(), doParseUO(); 
they use parseOneStepVar() for four calls for the four parse fields.
Seems unnecessary!  Maybe could they be combined into one,
which always gets run before doArt, thereby assuring that each artwork is up to date?

^^ Combined the parsers into doParseUO;  and I see the same problem with A1, C1, X1, etc:
   wrong on the first appearance, corrected upon re-popping forward. 

^^ Yikes, nothing in the parsers sets up nsurfs! Only in doBoxes() is nsurfs set!
  So maybe that says why a doBoxes() run has to occur before we get good results. 

  Nope, still one options choice behind, if optics parms are specified.
  With new optional step parms, MultiPlot does update slightly immediately, but wrong.
  Its second pop forward gets it right.  
'
 

These bugs are likely also in MapPanel which is based on MultiPlot. 


21-24 Feb 2011: working on MapPanel & MultiPlot
  --these are sisters-- they should work the same---

MultiPlot has a nice "Regenerate Policy": recompute when its
options change, or when it is explicitly brought forward with a click.
Otherwise in the background it keeps its previous data. 

MapPanel is nice in showing its progress.
MultiPlot is evil in hiding its progress.
Might we put MapPanel's timer thread thingy in MultiPlot?

MapPanel recomputes on options but not on coming forward. 
^^ FIXED 23 Feb 2011

MultiPlot's auto box size is waaay too small, even in A115.
^^ FIXED, 22 Feb 2011
 
Need to explain the Regenerate Policy in the Manual. 

MultiPlot's ray adjuster works OK
MultiPlot's optics adjuster is OK on XYZAC fails on TPR
MapPanel's ray adjuster works OK
MapPanel's optics adjuster is OK on XYZAC but fails on TPR.

It is as if mods to the angle parameters does not update
the rotation matrix, leaving the original unit vectors unchanged.

This is a problem when exposing a public field surfs[][];
better would be to have a public method that can perform 
whatever local cleanup is needed to implement a modification.
Perhaps RT13 could also hide an undeviated copy of surfs[][], 
and have several public methods:

   public void clearSurfs();
   public void setOneSurf(i, j, value); << triggers matrix
   public void stashSurfs();  
   public void devOneSurf(i, j, dvalue); << triggers matrix
   public void revertToStash();          << maybe triggers matrix

Q: How does the present OEJIF get the matrix correct?
A: It must do more than simply write to the public field. 
If there is some kind of public doMatrix() method in RT13,
we could just call that after each deviation setup, and after
each parm replacement.  



>>>>>>> FEATURES 120 <<<<<<<<<<<<<<<

9 Feb 2011: Reverting to QuickPNG.
Eliminate 3-way screen capture. <<< DONE
Eliminate bitmaps from CAD.     <<< DONE
Abandoning WriteImage.          <<< DONE
Abandoning QuickJPG.            <<< DONE
Abandoning GIF (never worked)   <<< DONE
Keep original QuickPNG.         <<< RETAINED
Keeping Hart's biconics.        <<< RETAINED
Retaining Undo/Redo.            <<< RETAINED
Retaining Two-Way Twirl         <<< RETAINED
Keep sticky option PanZoom.     <<< RETAINED
Finish Map:
  needs all four metrics           << DONE but not tested yet
  needs bad cell graying           << DONE
  needs vignetting count & graying << DONE
  manual needs warnings about vignetting  << DONE
  Map should redo when Ray or Optics changes,
    like MultiPlot and Layout.
    (currently redo works only for Options)
  parallax code & testing
  fails to work with varying optics parms Tilt and Pitch
  
Add Maripuu's Gaussian 2D ray generator. 


17 Jan 2011 A120 working...

Rearranging File menu to eliminate QuickPNG and add WriteImage;
Adding a new Option::WriteImage to allow PNG & JPG formats & frame. 
  ( Dropping GIF: it has never worked. )
CAD will become all vector and non clipped. 
Addding Maripuu's Gaussian 2D ray generator. 



3 Jan 2011  A120: to do:

Reorganize CAD to include only the vector graphics: EPS, PLT, DXF, Quads
Rename QuickPNG as ScreenGrab (text or artwork as bitmap):
   PNG, GIF, JPG;  Frame or NoFrame; choices via Options::ScreenGrab.
   These are all bitmapped and are all clipped via window view. 

Rewrite the appropriate sections of the Manual: Chapter 7 FileMenu,
where the new Options::ScreenGrab dialog should be explained, 
and Chapter XX CAD where the new simpler Options::CAD should be explained.
Also explain that ray color information is lost going to DXF in accord
with DXF recommendations: colors ought to be associated with layers,
assigned by the CAD user, not by the Entities which B4 supplies. 
(Ref:  "AutoCAD 2011 for Dummies" by David Byrnes, Wiley Publishing NJ 2011). 

Verify that Print/PDF => clipped PDF while CAD EPS=> unclipped PDF. 

Finish MAP and create a new chapter for it in Manual.
Bugs in MAP:
  - With Nheight=4, Nwidth=10, thermometer is clobbered.
  - Eliminate option for "Pixels per point" make this fixed.
  - If Options::Map changes then Map redraws without recomputing
    and the resulting graphic is trash.  Need to recompute after
    each & every change to Options::Map.

Document Undo/Redo in manual and in Help screens. 
Explain that this can undo an errant AutoAdjust run, as well
as a one-deep table edit. 

Document sticky layout features: Azim & Elev, also zoom pan. 
Document the "Layout (sticky)" title when Sticky is ON.
Explain why it may be unsafe to leave this feature ON. 

Document Biconic surfaces. Use Biconic.OPT file and/or Chapter 9 "Optics."


---

2 Jan 2011  A119:  Things to update in the User Manual
1.  New chapter on Map function, with example.
2.  New section in Optics chapter about biconic surfaces, with example.
3.  Mention Ctrl-X in the Editor chapter.
4.  In Layout, describe sticky Azim-Elev, and the sticky flag. 
5.  In CAD section, say that unlike QuickPNG, CAD is not WYSIWYG in BEAM
  although it becomes WYSIWYG in the user's CAD software:  the CAD files
  always include the entire artwork even though only the screen view might
  be cropped. 
6.  In the distribution files, add BallLens.OPT and BallLens.RAY


3 Dec 2010  A119:  Preparing the installation of Biconic surfaces
on top of the A118 features.  Changes will occur in (a) the OXXX constants,
(b) the surface parsers, (c) the solvers.  Math has been checked out using
the code in Biconic.java.   
Biconic Feature was requested by John Hart; sent to him 4 Dec 2010. 
New Oxxxx codes:   OCURVX, OCURVY, ASPHX, ASPHY.  Biconic demands all four.

Changes appear in:  
   Constants.java  in particular OSBICONIC
   OEJIF.java      in its parse() classifier
   Z.java          in its static methods zBiconic(), vGradBiconic().
   RT13.java       in particular dIntercept() solver chooser, line 900. 

Might be a good idea to migrate my toric to use the same four parameters.
I think that toric is a subset of biconic, namely with ASPHX=0.  
  ^^ NOT A SUBSET: TOTALLY DIFFERENT. Toric curls around; biconic does not.

Yet it is still a good idea, from user perspective, to require CX and CY
as named variables both distinct from Curve. Could use presence/absence of ASPHX
as the desideratum: absent => toric;  present => biconic.   User can verify the
choice by setting Options::Debug=1 and look at the group "OEJIF solvers."


28 Nov 2010 A118: These three new features are installed
and appear to work, both PC and Mac.  
Evaluation Copy was sent to Rod Andrew, Optec, Belgium.

Undo/Redo is only one buffer deep, but works.  Nice recovery from Auto.

Map works for rmsWFE and pvWFE, but no PSF functions yet.

Layout sticky view works.  The El/Az control is always stickyt and is now two way:
Options:Layout controls ElAz, and mouse ElAz controls Options:Layout.
Layout sticky view mode stashes pan/zoom affines in six new slots in
B4OPTIONS.TXT and works. Sticky View has an on/off checkbox in Options:Layout.  


27 Nov 2010 A118:   Changes needed in the manual to reflect the A118 features:

  * Editor Options has a new look: Ctl/Cmd Z
  * Editor Options has a new title "Clipboard field separators"
  * Help Special Keys has a new key: Ctl/Cmd Z
  * Editor action: undo and redo
  * New chapter on Map and its uses; examples too
  * Layout Options: Sticky Zoom checkbox
      what it does
      why you might want it
      danger if you leave it sticky and forget




25 Nov 2010 A118: although MapPanel still is incomplete, more
messages from Rod Andrews (Optec) pleads for a Ctrl-Z undo in the
editor.  Maybe a Ctrl-Y redo as well?  I think this could be captured
by having every edit change request, and every request for Autoadjust, 
stash a private stash of the editor contents: perhaps in a giant String
format analogous to file i/o.  The swap mechanism could be a three
buffer rotation.  Redo is exactly the same; no separate key needed.

  swapUndo():  editor -> temp; stash -> editor;  temp -> stash. 

Done; works.

14 Nov 2010  A118: installing actual MapPanel code, replacing
the demo functional code of A117. 

9 Nov 2010 A117_final:  Yes this simple new MapPanel design works;
it animates itself as each calculation occurs. No stirring needed. 
Annotation works also. 

However, its mouse drag pan zoom fail.
^^ Ha found that its uxcenter uxspan etc were initialized in doArt()!
So of course each art panel had fixed spans and centers.
Moved that into setup code.  Works OK now.



7-8 Nov 2010 A117: Trying out the very simple H1Dpanel as a surrogate MapPanel.  
(Saving the actual MapPanel as MapPanel.txt)
Compiling, runs OK, looks just like H1DPanel except no random. 
Random added with permission in DMF for Map; works great, this phony MapPanel
now continually updates its screen for each fresh batch from Random.
However this MapPanel's internal Timer does not update: static unless stirred.
And moreover trying a variant that implements Runnable: static unless stirred.
Yet both work great when driven by an external Random class.

Can I internalize this Random class, as a kind of Timer?  If so, that would
make the MapPanel self-computing, always a nice feature. 

One way forward is to have a new class PseudoRandom that is just like
Random, except it has no user dialog, no Options, no search for its GFront,
but rather is controlled entirely by MapPanel which launches it. 

Yet it is an "independent" class, like Random.

Might work!



7 Nov 2010 A117:  Notice how Random.java splits off its computational thread.
Its constructor first verifies that all the current data & local variables are
okay for repeatedly running ray zero, then it ignites startBunches(): 

    private void startBunches()
    {
        goodcount = 0; 
        totalcount = 0; 
        myTimer = new javax.swing.Timer(50, doBunch); 
        bRunning = true; 
        myTimer.start(); 
    }

There are TWO LOOPS.
  1. The inner loop is the nBunch rays within the timer task.
  2. The outer loop is do we have enough bunches.

For RandomRay the million hits are not stored anywhere except the screen,
and only each fresh bunch is sent to g2Tech for painting.  Zoom or drag
loses all those million hits. 
 
1.  User calls up a Plot2D which has Random capability.
2.  User requests Run menu.
3.  DMF's runGrayingListener() ungrays Run:Random.
4.  User clicks Run::Random.
5.  DMF's RMIListener creates a new Random object.
5a.    Random discovers its targetPanel, using gFront.
5b.    Random builds a progress/stop dialog and shows it.
5c.    Random's startBunches() creates & runs a swing Timer whose task is doBunch().

6a. THE TIMER TASK PHASE: "doBunch" or whatever.
        Loops targetPanel.doRandomRay() nBunch times.
        Cleverly this call is in an if(..) clause...  
          ...so targetPanel must complete its ray before returning to Random.

        ----Now, targetPanel.doRandomRay() calls drawOneRay()
        ----drawOneRay() calls RT13.bRunRandomRay()
        ----drawOneRay() does its artwork via GPanel.buildScaledItem(bRand=TRUE).
        ----GPanel.buildScaledItem(TRUE) sticks it into myBatchList. 
        ----Then targetPanel returns its one ray status.

        After the bunch loop, doBunch updates its statistics & dialog. 
        Then doBunch() calls targetPanel.redo().
        Then doBunch() exits, ending this timer phase.

6b. THE TIMING PHASE: "50 milliseconds" or whatever.
        This break allows other processes like the Stop button to function.
        targetPanel.redo() completes its new artwork: g2Tech then blit.
        **See redo() detail below**
        The timer delay times out, starting a new cycle back at 6a.


GPanel's redo() redo() maintains two lists:
    myRandList, can grow and grow;
    myBatchList, just the current batch of quads. 
    redo() appends myBatchList to myRandList, in case of CAD or print;
    redo() then renders myBatchList atop biTech using g2Tech.
    redo() then clears myBatchList.
    if (bClobber)
      g2Tech= null;  discards toolset interface to biTech.
    
  * H1D, H2D, MTF always need a total redraw: 
     each sets bClobber=TRUE; 
     then redo() includes the statement g2Tech=null for fresh artwork.

  * Layout, Plot put rays atop earlier artwork; 
     each sets bClobber=FALSE,
     so redo() does not null g2Tech leaving old artwork showing. 

But it seems to me that the bClobber nulling will kill the current rendering,
at least when paintComponent() and drawPage() are consulted, as in an OS repaint.
GPanel.redo() will require TWO identical renderings if bClobber=TRUE:

  First, it does its own renderList();
  Then it sets g2Tech=null;
  Then it calls repaint()!
  Then after OS calls paintComponent(),
  drawPage() notices g2Tech=null, 
  drawPage() clears out everything,
  drawPage() rebuilds everything including client doTechList(),
  drawPage() calls renderList()!
  
Confirmed. GPanel reporting points show that for Plot2d and bClobber=false
there is only one rendering per batch, and for Histo1D and bClobber=TRUE
we get a redo() render followed immediately by a drawPage() render, for
each batch iteration.  

^^Fixed 7 Oct 2010, A117; now use only drawPage rendering for bClobber=TRUE
and only redo() rendering when bClobber=FALSE.   Never both. Works great.


For MapPanel: can the Timer dwell in the same MapPanel class, and still have
its timing phase open up a time interval in which its own artwork can update?
Or is it vital to have inter-class communication, with a class like Random
calling the shots, and another class like Plot2D performing the artwork?


MapPanel is rather like a Random task, with nBatch = nRays, and
nBatches = nX*nY = number of WFE cells on the entire MapPanel. 
It has bClobber=TRUE since it requires a total redraw at each iteration. 

======Example of a parallel construction: H1DPanel================

  H1D constructor does only parsing. No art. Its GJIF will call for repaints. 
  H1D.doTechList() will arrive thanks to an OS artwork call.
     It calls its own doParse() thereby getting table rays into histo.
     It then calls doArt().   
  H1D.doArt() does the furniture and the data display.

If someone requests Random, then the bunches are started:
  H1D.doRandomRay() runs one ray & adds it to its histogram. No artwork.
Between GPanel's tools, and Random, the histogram and the art are built.
All the bunching lies within Random, not within H1D. 

============Extending this design to MapPanel=====================

   MapPanel constructor will do only parsing. Its GJIF will call for initial paint.
     It will zero its dataList. 
     It will create a Timer and task doNextBlock(). 
     It will start its Timer. 
   MapPanel.doNextBlock() will acquire a WFE from RT13
     then will ask for a repaint. 
     then if all done it will shut down the Timer. 
   MapPanel.doTechList() will arrive thanks to an OS artwork call.
     it does the furniture and the data display. 


------------development MapPanel: a tiny version of MapPanel--------


1 Nov 2010 A117: The blinker frame BJIF calls repaint() for each
caret on/off state change.  So repaint() has to be quick, i.e. blit,
bitmapped, not regenerate all the underlying artwork. Seems to 
me there must be at least two levels of paintComponent():

  * shallow, just the preexisting bitmap + caret;   << see drawPage()
  * deep, constructing a new bitmap.                << see drawPage().

For the existing random ray processing, there is a control switch
"bClobber" that allows for near real time graphic display updating.
It has not been generalized random rays, but could be.  The needs
of MapPanel are a bit like those of RandomRays in Layout: there is a
base graphic & bitmap, and successive time blocks bring in a new
enlarged QuadList with artwork to be bitmapped. 


31 Oct 2010: A117; eliminating the nice dynamic MapPanel update
in favor of something simpler: a "Computing..." message, then the
finished plot.  No block by block progress since that seems to
require the bNewArt flag, which breaks other things. 

So now we need a way to have the artwork completion construct
the sole MapPanel artwork. This is not going to be easy! since
there will have to be  way a clientPanel can ask GPanel to recreate
all its artwork. Something like doTechList(), except that is called
only at the start of a new clientPanel, never in the middle.

PLEASE KEEP DEBUG>1 to assure that RT13.iBuildRays() makes it known
when it is called to deliver a new ray trace. Spurious RT13 calls are
to be eliminated! Darn it! so as to avoid workload. 



31 Oct 2010: A116g  Why, with the new dynamic repaint, does each
caret blink trigger the message

  "Layout:doArrays() is starting"

appear once per blink, when DEBUG = 2?  It is as if the caret can
request new LayoutPanel artwork, and for that a new LayoutParse()
has to be run, and the doArrays() method gets called to set that up.
The other graphics do not show any repeated message.

Indeed, a feeler put into RT13.iBuildRays() for DEBUG>0 shows that every
graphic panel calls for new ray traces for every blink, with this
dynamic repaint enabled.   Bummer. 

Why has the MapPanel's annotator failed? Indeed, all panels?
Even TestPanel.  No annotations.  They were OK in A116f.

Also in A116f, Layout did not give blink messages about
Layout:doArrays() is starting, even with DEBUG=2. 

BOTH THESE PROBLEMS ARE CAUSED BY THE NEW FLAG "bNewArt" in GPanel.
With this flag forced false, annotation is OK, spurious blink messages
do not occur, but of course MapPanel is now crippled i.e. it cannot perform its
live update block-by-block action. 

Odd thing about MapPanel: although crippled, it appears to show its
initial few failed gray cells!  How does it get those up so fast?
And why are their number so variable? as if maybe it has something to
do with Threads and their possible delays?  Jumping the gun? Starting
ray traces before the rays are initialized??
^^ Yes exactly: in MapPanel::run() if I introduce a 100 msec delay *before* the 
loop that calls doMathAndRepaint() then there are no gray blocks and all the cells
get filled in with their proper colors.  Even though I call myThread.start()
only at the very **end** of the constructor, when setups are nominally complete, 
still it acts as if there is work pending that run() interrupts, causing
gray blocks since the rays arriving at RT13 have not yet been set up.

Of course still needs stirring with bNewArt forced to FALSE at all times. 

Q: what is RT13 seeing??

Just as stirring clears annotation, bNewArt clears annotation. 
Perhaps stirring is somehow equivalent to bNewArt. 


24 Oct 2010:  A116g The lack of dynamic update has been caused by the
reliance of MapPanel on using GPanel's clearXYZO() method to trigger
a new display bitmap in GPanel's drawPage() method.

Actually GPanel::drawPage() only created a new bitmap in the case
that myTechList was entirely missing, not emptied and refilled, which
is what the MapPanel was doing. 

I have added a private flag bNewArt within GPanel that gets set when
clearXYZO() is called, and cleared when the new artwork gets its bitmaps
created.  With this plan, each client call to GPanel:clearXYZO() and
a repaint() will come back via OS to GPanel::paintComponent() thence to
GPanel::drawPage(), which will notice the flag, and recreate its bitmaps. 

This change permits dynamic updating of JPanels. See SimpleMapPanel.txt
located in A116g.  

Annotation has failed in MapPanel.
Also there is a lot of numerical testing that needs validation. 





23 Oct 2010 A116g: Adopting the self-contained MapPanel implements Runnable,
but converting it to fully one-dimensional data storage Alist, and making its
method doOneDatum complete its repaint():  not in a tight loop within run().

However MapPanel fails to update its display unless stirred.  The loop is
running since it emits numbers via System.out.println(); but screen is frozen
until stirred. 

Attaching a similar timing thread to TestPanel shows the same problem:
the mouse must stir the graphic to have it updated.  It is as if the repaint()
request never gets a foot in the door.  Maybe too much going on?

Trying the runnable thread in Java/Thread/Num4.java gives a properly updating
number loop with live graphics updates and no stirring needed.  Yes, Num4
uses a DesktopFrame, and JInternalFrame, and the same starter with main()
performing a createAndShowGUI(), just like B4JE.

I find, using TestPanel's demo cube, that I can post the thread completion
numbers onto myGJIF's title bar without any interference.  So I will adopt 
this scheme for MapPanel. 

Issue: on 5 July we forbid direct Panel calls to myGJIF.setTitle(),
in favor of three other calls that allow finer control over title timing.
Yet here in MapPanel, I find two calls to myGJIF.setTitle(): perhaps these
should be eliminated, in favor of myGJIF.postWarning()?





17 Oct 2010 A116: Although A116f fails to repaint itself,
Animation/RollArt updates itself OK.  Its method is to have a thread that
calls its owner's "moveAndRepaint()" method, then sleeps. 
During these actions, the UI buttons continue to work OK, 
proving that the Outside World is not blocked. 

A simplified version Animation/NumberArt is equally aware. 
This is Num.java, where all the button actions are in the JFrame,
and the ArtPanel handles the thread and the calculation details. 
One version of 116 had an internal run() method: MapPanel extends Thread
and kinda works.  However its run() method attempts to evaluate all
the map blocks in a single sitting, not sequentially. 

Can Num.java work internally, with its ArtPanel being a Thread?
Yes, Num3.java works internally, inplementing Runnable.



10 October 2010  A116f: working MapPanel
See Thread/ColorThread for the threaded calculation experiments.
However! the free standing app "ColorThread" nicely gets its repaint() whenever
its thread coordinated doMath asks for it,  the parallel code here fails
to receive any self requested repaints.  Darn it.  Note that a mouse drag *does*
get a refresh! but not a self repaint.  Why?  




8 Sept 2010  A116: ----COMPILER or RUNTIME PROBLEM ------

When I compile, jar, and Proguard my code on the Mac, it runs great
  on the Mac or on the PC.  On the Mac, the application signature
  "com.stellarsoftware.beam.B4" shows on the top Mac menubar. 

When I compile, jar, and Proguard my code on the PC, it runs great
  on the PC but fails to run on the Mac. Double click its icon: 
  first there is a pause (probably the Java loader) then the app's
  signature  "com.stellarsoftware.beam.M7" appears on the top Mac menubar,
  then after three seconds the menubar pops back to the Apple. 
  This PC compile uses the batch files a, b, c, d, e, f.bat.

I am thinking that there is a wrongly coded entry point "M7" in the PC
version, which might work better if that were changed to "B4" which is where
the actual "main()" method is located.  Yet: if that were the problem,
how could the compile/jar/proguard process work at all on the PC? It should
fail there as well as on the Mac. 

Aha: there is an ancient class M7.class that was not removed way back
when the entry point was moved to B4.java, and even though M7.java was
deleted, the M7.class continued to follow our revision system around.
Should ***always*** delete all classes to eliminate ancient hangers-on.
That class provided a backdoor way for the PC's files to run:
  b.bat called xxxx.M7 now it calls xxx.B4
  c.bat references  WinMan.mf
  WinMan.mf specified Main-Class M7 now it is B4
  e.bat references WinMan.mf, also WINOPTIONS.PRO
  WinOptions.PRO kept class M7 now keeps class B4


6 Sept 2010: A116 with MapPanel:
Testing shows that yesterday's MapPanel, with the separate calc thread,
does halfway OK with respect to the M-V-C ideal: 
   No new ray traces when dragged or zoomed. 
But it fails to update when .OPT is changed.  The mechanism that
detects a modification in .OPT or .RAY or .MED, and triggers a new run
of the calc thread before repainting, is absent.

Testing reveals a failure of the drag/zoom mechanism:
  1. although the blocks drag & zoom OK, the colors change oddly;
  2. although the text size is correct, the text spacing zooms.

Problem 1 must be some error in interpreting the data[][].

Problem 2 must be some error in the zoom management.  Let's adopt
the unit square display model belonging to Plot2D, Histo1D and other
two dimensional graphics, all of which work well.
^^ Done. But now drag & zoom fail. 

How are GPanel's drag & zoom implemented?
  1. Drag and zoom modify existing uxcenter, uycenter, uxspan, uyspan,
     then call getNewArtwork(false). 
  2. GPanel::getNewArtwork() clears the annolist and requests an OS repaint(). 
  3. GPanel::paintComponent() calls drawPage(). 
  4. GPanel::drawPage() requests client doTechList(), then renders it. 

...so it is important that client::doTechList() not modify uxcenter..uyspan.
Having uxspan = EXTRAROOM etc within doParse() killed drag/zoom, because doParse()
is called as part of doTechList, see line 105 of old MapPanel.

Moving uxspan = EXTRAROOM etc into the constructor is a shortcut way to avoid
this clobbering.   But we really want the pan/zoom to reinitialize whenever
a doParseUO() gets called.  So, then the uxspan = EXTRAZOOM etc
do in fact belong inside doParse() as they are in Plot2Panel line 228. 

Here's how Plot2Panel skirts this issue:

   doTechList() calls doParseSizes() only if bPleaseParseUO
    or if nsurfs changes or bChanged is true.  (Initially, nsurfs=0,
    ensuring doParseSizes() at startup.)

   doParseSizes() sets up uxspan etc. 

Seems that I should be able to do exactly the same thing in MapPanel,
yet when I do the setup in MapPanel::doParseUO it overrules the pan/zoom.
Needs more work!

Color problem fixed:  use addXYZO() not addScaledItem() to control colors,
lest the color interpretation goes nutty. 






5 Sept 2010  A116 developing MapPanel function:
What I should implement is a Model-View-Controller design pattern.
The "model" is the array data[][], driven by the ray trace.
The "view" is the visible map, rendered via QuadList.
The "controller" is the user interface: mouse drag, wheel zoom.

Each change in .OPT  .RAY  .MED or UserOptions should do three things:
  1. Redraw MapPanel as "...computing..."
  2. Parse the UO and compute the ray traces and data[][] model
       (this is time consuming; separate thread)
  3. Redraw MapPanel with the new map. 

Each change in mouse drag or zoom should NOT change the model, but
only change the display affines as per the usual mechanism, and then
redraw the MapPanel.  

So I need *two* MapPanel inputs:  major, triggering recompute, and minor
triggering only a repaint.

Q: When I pan/zoom a Layout, is there a new ray trace? YES 
   When I pan/zoom a Layout, is there a new quadlist? YES
A:  GPanel calls its own getNewArtwork(),
    getNewArtwork() clears the annolist and disposes the g2Tech;
    getNewArtwork() requests an OS repaint(). 
    GPanel's paintComponent() runs its own drawPage(). 
    GPanel's drawPage() sets up bitmaps and calls client's doTechList().
    LayoutPanel's doTechList() calls RT13.iBuildRays().           <THE RAY TRACE
    LayoutPanel then calls its own doFullArt() or doSkeleton().   <THE NEW ANNOLIST
    LayoutPanel's doFullArt() draws the optics and table rays. 

Q: When I modify Layout UO, what happens?
A.  If there is no LayoutPanel showing, nothing happens.
    If there is a LayoutPanel front, Options callss its GPanel doParseUOandPlot().
    GPanel() then sets bPleaseParseUO = true, advising client to get on the stick,
    and then calls its own getNewArtwork(true).
    getNewArtwork() clears the annolist and disposes its g2Tech;
    getNewArtwork() requests an OS repaint(). 
    GPanel's paintComponent() runs its own drawPage(). 
    GPanel's drawPage() sets up bitmaps and calls client's doTechList().
    LayoutPanel's doTechList() calls RT13.iBuildRays().           <THE RAY TRACE
      ^^ usually twice!  why?
    LayoutPanel then calls its own doFullArt() or doSkeleton().   <THE NEW ANNOLIST
    LayoutPanel's doFullArt() draws the optics and table rays. 

Q: when I zoom a Histo1D, is there a new ray trace? new quadlist?
A:  Yes there are *two* new ray traces each zoom or pan. 


4 Sept 2010: wrote a thread centric demonstrator, MapThread.java
located in Thread; works great, and helps me to understand the 
requirements.  The design is self-referential: the host class is
Runnable and it runs itself, i.e. uses the contruction

    Thread mt = new Thread(this);

which allows a class to create a running version of itself.
Sounds horrible BUT this allows the run() method to be immersed within
all the computational goodies that it needs to do the computation. 
If it were a separate class, cleaner interface, but gnarly passing of
arrays and parameters. 

Then I wrote a thread-centric MapPanel.java that also works.  

Runs, but there are issues:
  Mouse drag blobs the artwork into yellow
  Zoom behavior is unknown.



3 Sept 2010: new thread-centric design for MapPanel
MapPanel is very compute intensive.
Don't want to hang up the menu or menubar.
Instead of single time consuming paintComponent()::doArt(), 
let's implement two phases:

 1. doArtSetup() accomplishes the parsing,
  draws a nearly blank MapPanel,
  kicks off a compute thread, and exits.

 2. doArtFinish() responds to a thread complete message.
 It paints the color map & thermometer created by the thread.

All the work is done in the invisible thread:
  accesses setup data,
  has an occasional Thread.sleep(10) to be nice;
  occasionally posts its progress to the titlebar of MapPanel's GJIF;
  computes the color map z[ix][iy] with 0<z<1. 
  When done it requests a repaint of the MapPanel and exits. 
  

Repaints of 1 are quick: nothing to paint except a nearly
empty QuadList. 

Repaints of 2 are quick: need only color a given map z[ix][iy]
plus redraw the thermometer. 



1 Sept 2010: would be good to allow phantoms & retros to be 
optionally made invisible.  Maybe a check box on Options::Layout. 
^^ Aug 2011: Retros are now checkbox invisible. 

1 Sept 2010 amend the manual that retro is INCOMPATIBLE with WFE
and should be removed before evaluating WFE.  Reason: unphysical. 
^^ Done. 

1 Sept 2010 be sure to include some WFE tests: for example
a concave sphere, various speeds: what is the official WFE
and what is the computer output WFE.   Schroeder? need ref.
Must distinguish SA at the paraxial focus location from the
"balanced SA" taken at that defocus having the minimum spot size.
Can use autoadjust to find the balanced defocus, then do the WFE.
Or: can place the FP at the theo paraxial location, then do the WFE. 
Perhaps one of my five-part examples.  Explain rmsWFE vs rssWFE
with a mention of Pythagoras. 

31 August 2010:  Even though I have a .RAY table loaded,
my Options:RayGenerators:2Dcircular fails to run.
CRAZY WARNING: NO RAY TABLE.  Yet, there it is. 
Reason: I have not yet specified how many rays are
in the ray table.   BUT IT IS THE RAY GENERATOR THAT
SUPPLIES THIS INFORMATION.  So there is a code error
lurking in there somewhere. 





28-29 August 2010  A116: new "Map" feature: PSFmap and WFEmap
Idea is to provide a fully programmable color map of an optical
system's PSF or WFE over its working field.  

Model here is MultiPlot, except that instead of showing a grid of plots,
we have a grid of color blocks.  Each block encodes a single number as a color. 

Issue: remote pupil.  How to prebias U0 V0 or X0 Y0 to exactly
illuminate a remote pupil?  Is a linear offset term good enough?
Let's adopt the MultiPlot "parallax" concept of a linear offset. 
Let's adopt the MultiPlot UserInterface design as well. 
However here we do not step optics variables, only RayStarts.
Wait! why not allow **anything** to be stepped? Like MultiPlot?

This will be VERY time consuming calculation for 20x20 or 50x50 map points.
Will need to adopt a little Thread.sleep(20) every now and then to permit
an escape from the huge loop.  Maybe also a progress monitor % done number
in the MapPanel's GJIF title bar. 

User interface...

Which:     {rmsWFE  rmsPSF  rssPSF}

Horiz----
      How many points  1...100
      Pixels/point     1...100
      PlotVar  abc
      StepSize xxx
      Center, blank=auto=midrange from RayTable
      ParaVar  abc
      ParaStep xxx
 
Vert-----  
      How many points 1...100
      pixels/point    1...100
      PlotVar  abc
      StepSize xxx
      Center, blank=auto=midrange from Raytable
      ParaVar  abc
      ParaStep xxx
      Pix/bin  1..20

Max % Vignetting?  {xxx}
Black background?  {y, N}



Code:  
  Enumerate & limit the desired Hsteps and Vsteps.
  evaluate span summary data max & mins
  draw a span summary table on screen
  Build a two-dim loop of stepped params.
  Create data[][].
  loop: evaluate  data[][]
  loop: find max and min of data[][]
  create color scale rgb(datum)
  loop: paint map using data[][].
  draw thermometer showing max, min, mid.



10 July 2010 A115: nice, fixes listed below are in place, and 
product is released for production along with UserGuide_113.

However this revision still does not address Rod Andrew's complaint
that every change in .OPT or .RAY trigggers a Layout regeneration.
He wants Layout to keep his pan-zoom-twirl-Vzoom values while he
modifies .OPT and .RAY.  Release 115 discards those, and reverts
to the Options dialog values, for each change in the data tables.

I thought I had a fix in place for this?  Diagnosing LayoutPanel
using a fresh compile with diagnostics in place... 

----Initial Layout:
Layout:doArrays() is starting
bPleaseParseUO trigger started
doParseUO() is starting
Layout:setScaleFactors() is starting

----Panning or zoom or twirl:
Layout:doArrays() is starting
Layout:doArrays() is starting
Layout:doArrays() is starting

----editing .OPT or .RAY:
Layout:doArrays() is starting

AND PAN ZOOM TWIRL IS RETAINED NOT REGENERATED.
ALSO yesterday's compiled 115 retains pan zoom twirl, in A115!
Under what circumstances does it fail?
Trying BEAM4_115 compiled yesterday, and released, 
 in its non native "Ray Tracing" environment...
FAILS to retain current view, and Regenerates for even so simple
a stimulus as changing which window is in front!
Renamed this BEAM4_115_jumpy.jar because it is too quick to Regen.
Running off the memory stick: also jumpy.

Trying a fresh compile in Mac A115: BEAM4_115u.jar: not jumpy in A115.
But moving it to the memory stick: becomes jumpy.

In A115, renaming B4OPTIONS.TXT to become B4OPTIONS_u.TXT:
Now it becomes jumpy! as if the presence/absence of B4OPTIONS.TXT
controls the jump.   With B4OPTIONS.TXT: not jumpy.  Otherwise: jumpy. 

???????????

Running again in A115, now that a fresh B4OPTIONS.TXT has been deposited:
still jumpy.  Changed startup files checkbox: still jumpy.  What is the 
difference between B4OPTIONS_u.TXT and B4OPTIONS.TXT???  
DIFF shows one key difference: 
    jumpy:  Totally regenerate artwork?|T
    clean:  Totally regenerate artwork?|F
I fear I may have removed the user option from the dialog, but not
eliminated the <wrong> factory constant from the options generator,
so that every new installation -- which calls on the factory -- has
this set true! and thereby messes up Rod Andrew. 

BEAM4_115 Options::Graphics does indeed have a bitbox "Totally Regenerate"
and experimenting with this shows it works just fine.  
Digging into the code....
  * Constants.java shows group 12 UO_GRAPH item 8 has its factory default flag set "T";
  * Options.java has an item 8 "regen" that is evidently active & responsive;
If I change the factory default flag to "F" then Rod Andrew,
and others, will find the view persistence to work as expected.  
Changing the default...
Compiling & compressing...
Works fine, now. 
Updated the release 115 to date 10 July 2010 with this change. 
Rod Andrew should be pleased: even without B4OPTIONS.TXT it will do what he wants. 




9 July 2010 A115: Found the bug revealed by CookerADJ with
nsurfs=4, ngroups=2, that  kept Surface#3 in Group#1
from responding to pitch, tilt, roll:  Lines 545-6 of Auto.java

        if (bAngle)
          OEJIF.setEulers(ngroups); // should be nsurfs!

had the setEulers(ngroups) method doing only the first two surfaces,
not the whole list of four surfaces, so that surface#3 was not getting
its new Euler matrix evaluated.
^^ CHANGED. Checks out OK now.

5 July 2010 A115: Testing with CookerADJ, whose tilts and curvatures
are adjustable: why are the tilts & curvatures auto adjusted OK except
for Tilt #3?  It can be adjusted manually, and Auto reads (say) 12.0 and fills
in (say) 12.000 but keeps it frozen, in spite of its question mark tag.

Setting debug level = 3:  OEJIF report is correct:
Optics Adjustables onadj = 6
  0  field=7  surface=1  nslaves=0
  1  field=7  surface=2  nslaves=0
  2  field=7  surface=3  nslaves=0
  3  field=8  surface=1  nslaves=0
  4  field=8  surface=2  nslaves=0
  5  field=8  surface=3  nslaves=0
In particular, field 7 surface 3 is the Tilt #3 in question.
Indeed, Auto does fill its zeroes out, so it is successfully writing into that cell.
But why no derivatives, and no change in its value??  
InOut verifies there are good rays in the group from surface 3,
and indeed Curvature of surface 3 is responding to Autoadjust. 

Hint: If I extend the table to have four mirrors, three groups, and
four adjustable tilts, then the frozen tilt becomes #4 not #3, as
if there is something freezy about the final tilt.  Again it is read,
and parsed, and identified, but not adjusted.

Hint#2: This is a groups problem.  Proof:  ThreeMirror.OPT
has three successive mirrors, no groups; It has three adjustable tilts
and all three work just as they should. 



5 July 2010 A115 other tests, using CookerADJ files:
 When Plot2 is told to plot at a nonexistent surface, it simply turns black.
 Not informative.  Better would be to have a message either pop up or
 on the Plot2 Titlebar. Easy to get wrong if you are counting surfaces
 and ought to be counting groups!  

 THERE IS A TRANSIENT MESSAGE "Unavail Surface" seen only when mouse is unmoved
 but that is not permanent enough.  TitleWarning ought to be Plot2D: "xx" bad group
 or if no groups it should say Plot2D: "xx" bad surface
 or if it is the attribute it should say  Plot2D: "xx" bad attribute
 where "xx" is the exact offending string hst or vst that the user entered,
 and STAY THAT WAY until the problem is fixed. 

 ^^ Worse yet this out of range situation yields a system error message...
PLOT2 doParse() SNH  HVAR unknown: y4
Exception in thread "AWT-EventQueue-0" java.lang.ArrayIndexOutOfBounds -1
  at RT13.dGetRay(RT13.java: 147)
  at Plot2Panel.doParse(Plot2Panel.java: 206). 
I installed a telltale into RT13 line 147 just ahead of the error.....

PLOT2: doParse() SNH: HVAR unknown:   y4
RT13.dGetRay kray=8   g=-1   iatt=8
Exception in thread "AWT-EventQueue-0" java.lang.ArrayIndexOutOfBoundsException: -1
 at com.stellarsoftware.beam.RT13.dGetRay(RT13.java:149)
 at com.stellarsoftware.beam.Plot2Panel.doParse(Plot2Panel.java:206)

...meaning that the given group = -1 "no such group" this should never happen. 
This faulty request originated at line 206 of Plot2Panel, and indeed was predicted
by the dianostic SNH message at line 188.  It shows that hsurf = -1.
And hsurf was computed at line 182: hsurf = RT13.getGroupNum(op, ngroups); 
so now the question becomes, how can getGroupNum() return -1?? when hst = "y4"??
Which is simply an out-of-range plot specification?
It is as if no serious action is taken to handle illegal plot specifications. 
Perhaps doParse() should return a boolean, OK meaning OK to proceed?

Caller of Plot2Panel's private doParse():
  Plot2Panel:doTechList(), 

Plot2Panel's getUOwarning() tests the spec strings and returns "Unavail Surface"
or whatever it can; empty string if all is OK. 
Caller of Plot2Panel's  private getUOwarning():
  Plot2Panel:doTechList().
If nonnull warning, calls myGJIF.postWarning(w);

Q: if both have the same caller, and both are private, then WHY
aren't these one call??? Strange to have two parsers, one of which
(doParse) can crash and is called first, then another (getUOwarning)
that is crash proof. 

Renaming doParse() -> doParseSizes() and putting getUOwarning() first: compiles OK,
Works! and faulty UO spec yields a temporary warning in the titlebar. 

So... the fixes are these:
  1. do String warn = getUOwarning() first: it cannot crash.
  2. If successful, no warning, then proceed to doParseSize()
  3. or if there is a warning, post this permanently until fixed. 

Complication:  GJIF repaints its own title with each caret blink.
Strings that start with a blank are warnings! Yet, these get obliterated
when the mouse moves, even when they start with a blank.

GJIF's postWarning() precedes a given string with a blank character.
  But, how does mouse motion defeat the warning???
This is in GPanel MyMouseMotionHandler::mouseMoved();
  when front GPanel sees a mouse motion, it performs abstract doCursor().
In Plot2DPanel, doCursor() performs myGJIF.postMyName() or else shows coordinates. 
..and GJIF.postMyName() simply calls setTitle(myName) onto the JIF. 

Somehow we need a priority system.  If no graphic is possible -- because
there is a warning presently in place --- then the coordinate and retitling
should not take place, and the warning should remain prominent & visible. 
Presently the warning gets obliterated by doCursor().

Too many cooks spoil the soup.

There is a hierarchy of three situations:  postWarning(), postCoords(), cleanupTitle().
If warning is present, then it dominates. 
If no warning, but coords are OK then postCoords().
After using postCoords, it is essential to cleanupTitle(). 

Where should this decision be made?  In GJIF.  Three methods. 
GPanel knows all about coordinates. (But fails for Layout, Plot2DPanel...).
Title is known by everybody.
Warning is known by client Plot2DPanel; no one else. 

NEW PLAN 5 JULY 2010 A115 SIMPLIFIES & CENTRALIZES setTitle() 
  *  Eliminates the initial blank business.
  *  Never uses getTitle(), never uses initial blank coding. 
  *  No more countdown "Regenerating" temporary title
     (nb: "Saved" is used only by EJIF, never by GJIF. )

1. Forbid direct client calls to myGJIF.setTitle().
    (How to enforce this rule? Code sweeps are unreliable! 
     Yet cannot eliminate myGJIF since client GPanel needs GJIF methods.)

2. Externally, each GJIF offers three methods to its GPanel:
     public void postWarning() to be called by its GPanel's getUOWarning(); 
     public void postCoords() to be called by its GPanel's doCursor();
     public void cleanupTitle().

3. Internally, each GJIF instance carries two static strings: myName and myWarn.
     myName is initialized by the GJIF constructor and is fixed, immutable.
     myWarning is initialized to null string but is modified via setWarning().
     setTitle() is called *only* from within GJIF, as follows:

  public void postWarning(String w)
  {
     myWarn = w; 
     setTitle( (myWarn.length() > 0) ? myWarn : myName); 
  }

  public void postCoords(String coords)
  {
     if (myWarn.length < 1)
       setTitle(coords);
  } 

  public void cleanupTitle()
  // called whenever cursor exits window to clean up coordinate display
  {
     setTitle( (myWarn.length() > 0) ? myWarn : myName); 
  }
 

^^These all work OK, big improvement in setTitle() warnings.
^^All coordinated through Plot3, Plot2, MTF, MPlot, Layout, H1D, H2D. 
One oddity:  Layout continues to show coords even when dragged;
while Plot2Dim shows coords for free cursor, but title when dragged. 
Adding one line to GPanel::MyMouseMotionHandler::mouseDragged()

            doCursor(event.getX(), event.getY());  // abstract

makes Plot2D somewhat more responsive during a drag, yet if the
drag speed gets too slow it begins to drop out its motion strings
and pops into its myName title.  LayoutPanel *retains* its coordinates.
I wonder why! since they use the same GPanel mouse utilities. 
Might have something to do with iCountdown? overwriting? Nope.







A115: Layout CORRECTLY keeps its pan zoom when Nsurfs & Nrays change, and
when the parameters in those tables change.  
Layout correctly shows the proper number of rays, even when zero. 

Plot2 CORRECTLY regenerates totally when Nsurfs changes;
it also CORRECTLY retains its pan zoom when Nrays changes. 
If the number of good rays < 1, Plot2 turns BLACK: no explanation. 


27 June 2010  Starting A115 using two new shell scripts:

diff.sh   << can run from anywhere.
diff /Users/Mike/Desktop/Code/Java/A113/com/stellarsoftware/beam/DMF.java /Users/Mike/Desktop/Code/Java/A115/com/stellarsoftware/beam/DMF.java

dates.sh   << runs from A11X for local build.
ls -ltr com/stellarsoftware/beam/*.java >dates.txt
  This diagnostic has the advantage of a chronologically sorted
  directory listing for .java source files, built on Unix ls -ltr.
  It will help me identify where & when changes are introduced. 


Synopsis of plot:

A112 introduced new features: groups; and retain user pan zoom settings
even when changing the number of surfaces or rays.  Works!

A113 debugged groups:  Cooker.OPT, Slicer.OPT examples.
Works great! Except now the user pan zoom settings are lost,
and Layout always requests a total regeneration, as if the
new group-aware parser in OEJIF always forces a new Regen.

A114 was a tiny step; only change from 113 is in DMF:
  114, 115 have added lines 16,17,18 importing javax.swing.JMenuItem
  but this is unnecessary since we already have javax.swing.*
  I have eliminated this excess import, making 115 identical to 113
  and making 114 an unnecessary dead end. 

A115 is A114 plus future changes. 

Synopsis of work to be done:

1.  Find out if there is any value within A114; keep or dump.  << NO VALUE; DUMP.

2.  Find out how A112 manages to perform its Layout magic.

3.  Move this capability into A115, and test. 



17 June 2010   Report troubles in 113 from Rod Andrew:

  1. Table marking works: marked field turns blue,
  but Ctrl-X, Ctrl-C fail to copy.  Intermittent. 
  Noticed this problem working an old BEAM THREE file
  but is also an occasional problem on all files, on
  all B4JE releases.  

  2. Release 113 has a new bug, not a problem in 112:
  Changing the number of rays forces a total reset of the
  Layout scaling and viewpoint, just like a new layout.
  Previously, could modify ray numbers while keeping view.

Wish list from Tibor Keri:

  1. Now that 113 is out with Groups, how about following TIR?
  Tibor wants a way to trace both the refracted & reflected rays
  as part of the same calc.  ?? use ??

  2. Wants scripting: read files, do inout, save tables, exit. 

  3. Wants a formula to be a legal column header. I explained
  about spreadsheets but Tibor evidently is not happy with that.

  4. Wants more than 999 rays and more than current max columns.

  5. Instead of just quadratic, wants autoadjust based on worst case point.

  6. How about a soft penalty function for autoadjust, so that a solution
  can be guided smoothly around a problem area and keep going, rather than
  dropping dead, awaiting manual restart?


31 May 2010  A113  Why does AutoAdjust exit immediately with zero residual
when groups are present, yet is OK without groups?

1. In Auto.getDelta() the sizing process uses OEJIF.getAdjSurf() which is
organized to return the surface number of each adjustable.  
^^ Changing this to convert:  g = RT13.group[j]. 

2. But with this in place, still exits all zero, as if accessing ray information
from surf number, not group number. This information is fetched at Auto.java
line 483 in dPerformResid(), which runs iBuildRays() with wrong arg "ngroups"
should be "nsurfs"  and then turns over action to Comparo.doResiduals. 
^^ Changing this to nsurfs.  
^^ Works now on Lens!
^^ Works now on the individual mirrors of CookerADJ!
^^ Works to tune up all mirrors simultaneously on CookerADJ.


30 May 2010  A113  Why do MPlot, Histo1D, and Histo2D fail to recognize groups?

They are OK recognizing dynamic changes in nsurfs and nrays. 
MultiPlot autosize fails to resize when given more rays, but at least it shows them. 
MultiPlot correctly resizes when nsurfs changes. 
MultiPlot shows only zero for ray coords when groups are present. 
I find that MultiPlot is calling... RT13.iBuildRays(true, nrays, ngroups)
where other routines are calling... RT13.iBuildRays(true, nrays, nsurfs).
^^Fixes the problem for MultiPlot.

This is not the problem in Histo1D nor Histo2D; they correctly use nsurfs
in their doTechList() method.  But they use ngroups in their doParse()!
Changing this...
^^ Works;  Histo1D & Histo2D now respond to nsurfs and groups and regroups.
Histo1D and 2D do NOT respond to nrays.  
^^ Fixed:  (nprevRays != nrays) alongside (nprevSurfs != nsurfs)
^^ Works: now Histo1D and Histo2D both respond properly to changes in nrays. 



29 May 2010  A113

For this revision I continue to use the old unchecked ArrayList type
not the newer safer template ArrayList<Integer> kind, owing to
cross compiler issues explored in A44 A45 (see Compilers.txt).
The 24 warnings that javac -Xlint produces are listed in Warnings.txt
and they are all about using the vagueness of the unqualified ArrayList.

This means I will have to continue ignoring the notes.....
  Note: Some input files use unchecked or unsafe operations.
  Note: Recompile with -Xlint:unchecked for details.
......that accompany each compile.  The older jdk 1.4 on the
PC is happy with these unsafe definitions and yet yields 
executables runnable on a huge range of old and new JRTs. 


A113 (groups): although the logic updating nsurfs & nrays works properly
for Layout,  << no it doesn't! Rod and I concur, Layout also regenerates. Damn.
Plot2D etc (thanks to the newly installed doParse() logic
installed in A112)  -- there is still an error in identifying nsurfs
and ngroups when the optics table is regrouped.  Layout: no problem.
Plot2D: huge problem.  This renumbering of surfaces needs to be made
automatic & invisible, so as the grouping changes, FinalSurface changes
and Surface6 changes.   Invisibly, automatically.  

Presently Plot2D shows all rays at (0,0) after a regrouping.
Might it be enough to detect a change in ngroups, and invoke doParse()
whenver the number of groups changes?  More thorough to detect any
change in surface/group assignment, perhaps by retaining a stash of the
array group[nsurfs] and running a comparison between the stash and RT13.group[]
every time doTechList is wanted?
^^ Installed into Plot2D: Works! fully group aware.
^^ Installed into Plot3D: Works! fully group aware. 
^^ Installed into Histo1D: OK on nsurfs & nrays; fails groups
^^ Installed into Histo2D: OK on nsurfs & nrays; fails groups
^^ Installed into MultiPlot: OK on nsurfs & nrays; fails groups.

A113 w/Groups: Yikes I discovered that H1DPanel does not implement all the abstract methods
specified in GPanel!  Missing was doRotate().  This could be a major crash
type bug if someone attempts a rotate on an H1D.   Checking all GPanels....
  LayoutPanel:OK
  Plot2Panel: OK
  Plot3Panel: OK
  MPlorPanel: OK 
  H1DPanel:   OK
  H2DPanel:   OK
  MTFPanel:   OK
  TestPanel:  OK





>> 25 May 2010 A112: the "final" solution and Regeneration

Since Layout handles both nrays & nsurfs dynamically,
  policy is to regenerate only when UOs change. 
  This allows user to retain current pan & zoom. 
  VERY MUCH APPRECIATED FEATURE. 

Since Plot2D and Plot3D use "final" they must regen if
  any UO change or if Nsurfs change.  Change in nrays
  is handled nicely without regen.

For all other graphics, we *always* regenerate.
Each and every time a Histo comes forward, we rescale
everything.  

Implementation:  In Plot2D and Plot3D:
   1. Create and stash nprev = nsurfs;
   2. In each doArt routine, test 
          if ((nprev != nsurfs) || bPleaseParse)
          {
              doParse();
              nprev = nsurfs;
          }
while in all other GPanel implementations, doParse(). 

Implemented! Works. But groups still confuse Plot2D. 


>> 24 May 2010 A112: the "final" problem
I think that the final surface is getting chosen in the 
process that is triggered by choosing new Options.
Options, of course, merely sets up new UO strings,
and warns of any conflicts in the desired settings.
But each Options change triggers GPanel.doParseUOandPlot()
for the front target graphic.  

GPanel.doParseUOandPlot() does two things:
   sets flag          bPleaseParseUO = true;
   calls GPanel's     getNewArtwork(true);

GPanel.doPlot() does only one thing:
   calls GPanel's     getNewArtwork(true); 

GPanel.getNewArtwork(true) simply clears g2Tech and calls for a repaint().

To repaint, the client graphic rebuilds a fresh g2Tech. 

That warning should not originate in the Options but
rather originate in the Plot2D's doParseUOandPlot() when
it tries to plot.  This way the UO can be set first, and
then there will be the warning when doParseUOandPlot()
attempts the setup, and then the user can decide which to
change: the UO or the Nsurfs. 
^^ Done. Works.





--------Old bug, Mac Only------------------
When I stretch the main DMF frame window, 
I get a blizzard of Terminal messages:

  CGContextGetCTM: invalid context
  CGContextGetClipBoundingBox: invalid context

Does not happen on the PC; must be a Mac thing.
Q: what is the simplest JFrame that does this??
Perhaps an empty frame does this too?


------TESTING FOR AWARENESS OF NRAYS AND NSURFS------
  1. Set up OPT, RAY and WindowUnderTest set to "final"
  2. Cycle through Nrays, WUT, Nsurfs, WUT, etc
  3. Note any lack of responses to these inputs.


23 May 2010, Testing Plot2D
OK when active and properly senses changes in RayStarts:
  It always triggers a fresh bRunray() when it fronts, as it should. 
  It correctly senses changes in Nrays. 
Its "final" fails to sense edits to Nsurfs. 
It often shows a zero result after a change in Nsurfs, even though bRunray() runs.
(But if I then call Options:Plot2d, then OK, then it properly reinitializes Nsurfs)
..which tells me that there is a routine in Options that sets up "final"
but this routine is lacking in Plot2D.  Plot2D seems to need Options to reset "final". 
Without help from Options, it gets confused when Nsurfs changes. 
^^ issue:  Total Regenerate was turned off.  Turned on, Plot2D works fine. 
Regenerate should always be ON. 
^^ Changed to provide this: removed registry option, 
   and eliminated the GJIF logic line 75 checking flag and doParseUOandPlot() vs doPlot().
^^ Downside of this fix: Layout always reverts to its UO scale factors azim elev, which will
   oblige our zoom users to rezoom every change in anything.  Annoying!
   Save zoom settings??   "...or always use the most recent azim elev zooms?"
Here I may have confused ParseUO with ParseOpt.  For Layout pan+zoom, what would be
best would be to ParseOpt, ParseRay, ParseMed, but not totally regenerate from UO.
What Plot2D has been failing at is ParseOpt.  
When I insist on ParseUO, I seem to get ParseOpt for free.
But to keep user pan+zoom I should instead ParseOpt but not ParseUO. 
^^ Fix here: reinstall doPlot() but be sure that it includes Nsurfs!
^^ Done.  Back where we were: Plot2D cannot adapt to varying Nsurfs,
   unless the "totally regenerate" flag is ON. 
   As if doSurfs ignores new Nsurfs,Ngroups. 

What's NOT happening: when I modify .OPT or .RAY, I am not triggering
a new ray trace.  The old data are retained. 
^^ WRONG: there is a new (unreported by diagnostics) trace that responds
to changes in Nrays.  But it does not respond to changes in Nsurfs. 


MultiPlot: works fine, tracks both nsurfs and nrays. 


New bugs, 22 May:
1.  Cooker (with groups) initially showed "Dia 1" error
  for all rays! but then it changed its mind, is OK now. ??

2.  Options:RayGenerator:LinearArray did something odd.
  I had a table whose columns were Y and @wave and others.
  I requested a group of Y0 values.
  The values were generated, but went into the @wave column!
  Then I made the table have X0, Y0, and @wave columns.
  Now the generated numbers went into Y0.
  As if there is some mess up in the destination column numbering.

3.  Curlicue X fails to delete
  Yet, Edit::Delete works OK
  And Curlicue V pastes OK.
  
4. Although groups are OK with InOut RMS blur output,
The graphic diagnostics Plot2D etc cannot find their ray data,
and AutoAdjust shuts down without discovering any derivatives,
as if it is adjusting a nonexistent parameter. 





-----from Rod Andrew May 2010---
Hi Mike,

Freeze it does,- occasionally;  I will try to keep better tabs on it. My simulation work is sporadic,- but then frenetic!;- at the moment busy with other things,

I am using mostly a Toshiba Satellite M60 laptop,  but also a kit-built  tower system,- both XP. I can't say  I've seen any difference between the two, but stats are not that good. No other Java app.that I know of. on either. I nearly always have Word, Excel & Outlook open, plus a nice little utility Grabber 2k.

Most common observation is that Ctrl C/X/V etc stop working to edit tables ; so I quit B4 & return; then it's OK. This has been the case on all versions of B4 Java since the beginning. Have not figured out what provokes this.

At other times, when I try to move/resize a Layout window, I get multiple windows and one senses that the machine is walking through treacle; this may be linked to not having stopped random, though on other occasions this seems to be OK. Don't know.

I think on 2 occasion(s)  I had a real freeze when NOTHING worked any more, Cnrt/Alt/Del then OK after restart.

I will try to be more precise in my observations, but you know how it is when my mind is elsewhere.

Cheers
------------------------------



New material for the manual, release 112:

New Optics section on Groups.  Give examples:
  Cooker; IFU. 
New Layout figure with ShowScaleFactors, and
  showing how they appear on the titlebar. 
Add more examples of arrays.  LensArray: Corduroy.
  MirrArray: SolarCooker?
New figure and paragraph for StartupFiles.




21 May 2010  A112: Unexpected empty editor frame 
When I ask File::Open to show me some available files,
but then hit Cancel, what pops up is a totally empty editor
frame.  No skeleton.  Useless.  

One possible response would be that the EJIF frame is destroyed,
leaving an uncluttered DeskMenuFrame.

Or alternatively we could leave a new Editor, ready for input.
^^ I chose this alternative.  See EJIF line 247, where the
   file chooser dialog "Cancel" response is handled. Works!


20 May 2010  A112: Alex Kim finds a bug.
When we try to save a file in a directory, it always goes
into the local directory, not the specified one.
^^ Duplicated this problem on my PC
^^ Duplicated this problem on my Mac, with Tables.
^^ Not a problem with saving graphics QuickPNG, where the entire
      File Save Dialog starts at the root. 
^^ Not a problem with IFUlayout.png saves OK wherever I specify.
      The file/save dialog starts locally, but works. 
^^ Not a problem with Histo; goes where I aim it. 
^^ Not a problem with MTF.  Goes where I aim it.
^^ Not a problem with CAD; goes where I aim it. 
  Here, DMF calls GFront.doCAD() which calls GPanel.doCAD().
^^ Not be a problem in H1DPanel.doSaveData()    << line 258
  Here, DMF calls GFront.doSaveData() which calls GPanel.doSaveData().
^^ Nor a problem in H2DPanel.doSaveData()       << line 361
  Here, DMF calls GFront.doSaveData() which calls GPanel.doSaveData().
  LayoutPanel.doSaveData() is a no-action stub. (Layout has no data).
The error is in EJIF.pleaseSaveAs()            << line 512; 
^^ Changed getName() to getPath everywhere, and *presto* fixed. 



QuickPNG processing:
  DMF owns the flag bQuickPNGrequest, set true by menu click;
  BJIF examines this flag in BlinkTask of frontmost JIF.
  BJIF performs file creation in doQuickPNG() and clears the flag.




18 May 2010, A112 with inputs & requests from Rod Andrew:
  Added a feature, Layout can now display its own
  H and V scale factors (pixels per UserUnit) and their ratio.
  ^^ Done: HorPS, VertPS, Ratio appear in TitleBar when scale factors change.
     All this is now in GPanel, where zooms are managed, for Layouts only.
     No impact to LayoutPanel.  The title bar is owned & operated by GJIF.

  Rod Andrew comments: my sqrt(0.5) is only 0.7 not really sqrt(0.5).
  ^^ fixed and moved into Constants. 

  Rod Andrew would like sticky memory pixel scale factors.  He usually
  deals with long skinny optics and usually needs lots of vertical zoom.
  ^^ Doubtful.

  Rod Andrew finds an occasional crash: if he edits a table while
  RandomRay is running, B4JE locks up. 
  ^^ Cannot reproduce this; get more detail please.

  Nice feature, this artwork for LensArray and MirrArray
  Nice feature, groups. 
  Nice addition, not losing a window under the Menubar on Macs.

Notes on Graphics Title Bar Posting
  BJIF is a JIF that has a blinker triggering recurrent tasks.
  GJIF is a BJIF whose paintComponent() method refreshes its NOMINAL titlebar.
   ^^but if getTitle starts with "Hor" it overwrites nominal with the "Hor".
  GPanel manages zooms and zoom factors.  
   ^^ For LAYOUT, when these change, GPanel calls myGJIF.setTitle() to post zooms.
   ^^ GPanel also manages the crosshair coordinate cursor. 
      Each of four manageXXXzoom() calls on sScaleFactors() to generate the string. 
   ^^ GPanel contains the method sScaleFactors() to create the string. 

17 May 2010, A112 design for Groups
  Layout size of a late surface "j" with no specified Diam, 
  if lies beyond the groups?
  Never will any rays go there; no way to have auto diam size.
  Layout should set its Diam = biggest rox[] encountered within
  the bRunray() sequence, even if it is unsuccessful??

  1.  "Groups require a Group column" to specify which surfaces
  constitute each group.  

  2.  "Groups require defined Diams" assures correct
  solution to the Intercept() task.  Without predefined Diams
  it becomes ill-defined which interception is valid. 






16 May 2010: testing A112
  TMA72: looks good, InOut without goals is OK;
    but with goals, Autoadjust NG: goal averaging "a" etc fails.
    Worse, InOut puts 0.00000 into all average floating goals,
    as if its *input* values are all zero.   ??
  Lens: looks good
  LensArray: looks good
  Hyper -- AUTOADJUST FAILS.  why?!
  Hartmann: looks good
  IrisArray: looks good
  MirrArray: looks good
  Stack: uses Groups, works!
  Slicer1: uses Groups.  Works.
  Slicer2 trying autoadjust: fails. 
    Seems that xf=0=xgoal and yf=0=ygoal, so no action. 
    Yet InOut shows reasonable data, like Layout. 
    It is as if AutoAdjust & Comparo is looking in the wrong place for xf,yf.
    Running InOut with goals: RMS=0.0E00 at InOut dialog; yet clearly RMS=big.
    InOut *correctly* supplies xf, yf even in this Group case.
    Diagnosing Comparo:  good data when run via Inout, bad when Auto,
    yet the kray, ngroups, iattr are all equal.
    Perhaps an interaction in RT13?
    
  NOT A PROBLEM with ungrouped optics: TMA72 optimizes nicely. 
  Hyper3 failure revisited.  What exactly fails?  No groups here!
     InOut with/Users/Mike/Desktop/Code/Java/A112/com/stellarsoftware/beam/InOut.java 
     no goals: Comparo is unnecessary;  
     RayTable output is OK, nonzero;
     InOut with xgoals=0: Comparo is needed and is OK; 
        Raytable output OK, nonzero;
       ...yet the "RMS from goals" dialog shows zero discrepancy.
     InOut with xgoals=0.001: again RayTable is OK; 
       InOut gets its own data at line 125.
       ...and now "RMS from goals" dialog shows RMS error = 0.001
       ...showing it has the goals right and the ray data wrong. 
     Where does the "RMS from goals" dialog get its faulty ray data?  
     The dialog runs Comparo's doResiduals() and dGetRMS(). 
     yet Comparo shows correct ray data at getRay() line 143.
     Comparo.dGetRMS() relies upon private static double sos.

Disregard the above: in Comparo.getRay() line 144 I introduced a new
bug by inserting a diagnostic.  RETEST...  now Autoadjust works!
TMA72 gives 3 microns RMS blur, as expected. 




10 May 2010: A112 Implementing surface groups: Problems, fixes

Why is this: in LayoutPanel, both nsurfs & ngroups are set.  Then:

   ngood = RT13.iBuildRays(true, nrays, ngroups);   // fails
   ngood = RT13.iBuildRays(true, nrays, nsurfs);    // works

...as if iBuildRays() needs to access the entire surface list,
even though OEJIF has already parsed the optics table for surfaces?


Presently bRunray() blocks single-surface "d" error codes, calls them all MIS.
Really should somehow extract the clearest possible description, BAK or MIS, each group.
^fixed, I think: plano solver failed to create BAK.

Also the InOut failure message points to the wrong target surface, nfail-1, not nfail.
Perhaps all I need is howfarRay+1; seems that howfarLoop ought to do this but it does not.
^fixed, I think. 

Grouping: works selecting which surface is nearest, but fails to properly
show RAY table coordinates vs group number.  It is trying to show surfaces.
With 6 surfaces and four groups,  trace is "OK 6" should be "OK 4" and there are
entries under Z5 and Z6 should be blank.  List only as far as ngroups. 
Also, the valid final ray datum Z4 now shows "-0.0000" meaning missing; it
ought to get filled in with the final values.  
^^fixed.  Problem was nsurfs/ngroups confusion.

3 May 2010, A112: new bug found "Null Pointer Exception"
at EJIF line 300 when opening a new Optics table.
^^Fixed: test for existence of myFile before updating myFname.

Old bug: a new table is created dirty, i.e needs saving.
/Users/Mike/Desktop/Code/Java/A112/com/stellarsoftware/beam/EJIF.java
Should be created clean with no warning about exitting unsaved.
Reason: although the bDirty flag is initialized false, the building of the
initial empty table has insertions that automatically dirty the table. 
^^Fixed. In EJIF, bDirty is now set false at end of constructor, after 
vLoadSkeleton().


29 April thru 2 May 2010: A112

A.G.Kim's discovered bug: although MirrArray, LensArray, and IrisArray
all work optically, Layout portrays only IrisArray.  The others receive
a non-array cartoon making them look as if non Arrayed.  Better to divide
up the surface into Nx by Ny cells using peripheral arcs.

Another Kim discovery:  while on PCs dragging a BEAM window to the top
border of its Desktop is easily reversed, on the Mac that drag lets the
drag handle slip underneath the menubar! and now the window is stuck there.
No agressive mousing will get it free.  Either I need a short width menubar
or else I need the drag to stop before sliding under the menubar or else
I need to make the menubar transparent to mouse drags.   ???
HA this is easy to fix with a custom DesktopManager that limits drags.
^^ Fixed; see DMF's LimitingDesktopMgr() class. 

A long standing bug -- probably fixable! -- is Rod Andrew's complaint
that when he does a SaveAs and shuts down, the OpenWith keeps its previous 
filename, not the new one.  His preference is to have the Startup Files
be updated to most recent SaveAs.  I will correct this by adding a checkbox
to the Startup dialog "Always use most recent files" and stashing the current
filenames in three DMF fields, and keeping them current via EJIF. 
^^ Fixed: now uses vMostRecentFilenameOpt, etc, and when that checkbox is
   set to "T" these most recent filenames are copied into the reg.UO fields.
^^Revised dialog: "Or instead of these, always load the most recent files?"
^^Revised dialog: PLAIN_MESSAGE because QUESTION_MESSAGE is an exclamation on the Mac.

Another Kim request: GROUP SURFACES for multi slit mirrors.  Rework the
sequential logic so that if some surfaces are declared to be in a common
group, then they are tested sequentially, first success proceeds beyond
the group.  This will take some surgery on the Main Loop to allow successive
members of each group to be tested; first winner moves the sequence onward.
^^see above work on A112, 17 May.
 


---2 Feb 2010: to do: anamorphic aspheres
---2 Feb 2010: to do: invisible retroreflectors


---10 Jan 2010: A-111: fixed up the width of the BorHorizStereoBox() option component.
Was 190 pix, maximum; enlarged setPreferredSize(300, 90) and setMinimumSize=preferred. 
With these changes the Stereo Format box is 65mm wide and the dialog becomes 71 mm wide.

Sent Ralph Berggren the **full** Release "A111" dated 10 Jan 2010 thanking him for
his inputs and other suggestions: top & bottom border lines on unshaded lenses (easy!)
and user selectable JSTART and JSTOP lines for .OPT plotting Layout (Yikes! what about
the rays! do they have to start at JSTART too? Yet they start at surface 0!)

-----31 Dec 2009: Customer finds LayoutDialog too narrow!----
Ralph Berggren at OdinOptics.com tried out B4DEMO on his Mac and
finds that only six of the eight checkboxes on Options::Layout
show up in his dialog.  My Mac and PC do not have this problem.
I offered to create a special "A111" with wide dialogs and ask him to try
it out. He finds this now OK but finds another bug: the Format stereo box
in Plot3D has its parallax box clipped off. 

Sure enough, the code provides barely enough width for this box, 
and specifies a setMaximum() to the nominal rather than a setMinimum().

Moreover --- looking at all the option dialogs -- I discovered today
that Options::Graphics has a cramped "Special Graphics" text box
that truncates its own text!   Dialog width=58mm, textbox = 52mm
Reason: doGraphicsDialog() line 961 specifies a preferred and maximum
Dimension  (190, 24+20*count).   

Also Options::Editors text box is tight, not quite truncated.
Need bigger text boxes here!  Same reason: doEditorDialog() line 893
specifies Dimension (190, 24+20*count). 

Also Options:DefaultRays truncates its own "RandomRayPositions" text!
Code doDefaultRaysDialog() line 1021 has same cramped Dimension.

Also, Options:RayGenerators 2D Rect is very tight in its six radio buttons. 
      Ditto 2D Circular.  
These generators do not specify their own dialog dimensions -- the way to
enlarge them is to specify a greater width to the BorHorizRadioBox().
But yikes I've already increased that to 40*n.  Maybe 50*n???  Yes!


Initial status, as in A110: on screen:
  Options::Layout dialog box width = 58mm
  Octuple checkbox-border = 52mm
  Checkbox spacing = 6mm
Initially in source:
  in doLayoutDialog(), line 333: no specified size, hence automatic.
  in BorderedCheckBoxRow() line 1713: preferred size = (30*n, 75)
  in BorHorizRadioBox() line 1591:  preferred size = (180,75) for six radio buttons

Now trying in A111 source...
  in BorderedCheckBoxRow() line 1713: preferred size = (40*n, 75):
  in BorderedHorizRadioBox() line 1591: preferred size = (50*nbuttons, 75);

Result:  Layout dialog = 76mm wide, borders = 70mm wide, lots of spacing showing.
Oddly the axes checkboxes are comfortably spaced while the arcs checkboxes
are tightly grouped in the center of their border.   

RayGenerators 2D is now 70mm wide, 2Dcoordinates box = 65mm wide with
lots of room around its six radio buttons.

Enlarging the text boxes in doEditDialog and doGraphicsDialog:
  1. Eliminating the setMaximumSize() statements does not allow larger text box.
  2. Changing the 190 pixel limit to 300 pixels: gives a nice wide 71mm dialog
  and a comfortable 65mm wide text box for SpecialEditorKeys and SpecialGraphicsKeys.

Accepting these changes... compiled compressed and jarred.
Sent to Ralph Berggren (Ralph@odinoptics.com; 505-690-8908) to test.


------15 Dec 2009: customer solves "Can't find Main class" problem----

Art Neergaard (513-627-5918) tried the B4Demo, and finds that it fails to run
on his office maching with Java 1.4.2, but works OK on his home
machine equipped with Java 1.5.  He suggests easy fix: put the 1.5 requirement
onto the website.   
^^DONE.



------AppleBar title = com.stellarsoftware.beam.M7--------

Why this peculiar title for the Apple bar?  The main window title is
BEAM FOUR DEMO as it should be, and on my PC (Windows, Vista) there is no
Apple bar at all and the main window title is BEAM FOUR DEMO.
In A110 I am changing the name of the Main class entry point from M7
to the tidier-looking B4 but really I would like the Mac title to be
BEAM FOUR DEMO just like the PC.  

Changing to entrypoint in B4.java not M7.java.
This requires changes to b.sh, MacMan.mf, and MacOptions.PRO.

On the Mac, running Excel, or TextEdit, the app name and its menubar
occupy the Apple bar.  Individual task windows have no title except
for a filename, and no menubars.  So there must be a way to retitle
the Apple bar.  Perhaps the "com.stellarsoftware.beam.M7" is some
kind of default app description, shown when none is provided by the app.

A 2003 article by Daniel Steinberg suggests including in the .jar

    -Xdock:name="MyAppName"

but Steinberg does not discuss the potential adverse impact of such
a statement on computers lacking an Xdock.   Possibly no impact!
daniel@dimsumthinking.com  << wrote him 12 Dec 2009



---6 Dec 2009: parallax offsets for Options:AutoRay?--------
In creating folder "A110" I imagined adapting the MultiPlot parallax
mechanism to AutoRay, but did not pursue that.  Still it would be
useful in making AutoRays emerge from, or converge to, a pupil that
is not at Z=0.  For today's purpose, I just created several different
offsets for the various ray direction groups. 


---12 Sept 2009:  improvement in B4GUIDE sought----

On page 35 there is a short blurb on "off axis optics" and words
on how to implement them.  An example here would be very useful!
I have a customer puzzled about how to implement an off axis parabola.
Create a new example,  Example 9.3 "off axis parabola" and show the
optics table, the ray table, and the layout.  Then renumber the
remaining examples and of course repaginate.  Mention that later
in Fig 10-7 "Catcradle" will illustrate a pair of off axis parabolas. 
^^ DONE

---27 August and 7 Sept 2009: A108: 
  In LayoutPanel() line 914 I added a case RADARC: putRadialArc(); break;
to handle the completion of FinishArt.  This had been inadvertently
omitted.  Layouts look better now. 


---16 August 2009: Selectable line widths in PostScript output too
The June feature of Layout selectable line widths works great, but
until now was available only in screen & bitmap.  For high-res output,
which advertising publishers need, I want this feature to become available
to Postscript.  Not too difficult!  Added it today.  Basically the
PostScript renderer was previously...

            case LIGHTLINE:  pw.println(" thin"); break; 

The separate cases LIGHTLINE and HEAVYLINE are eliminated in favor of the
cases SETSOLIDLINE and SETDOTTEDLINE, each of which enforces its style
and its "x" quad member sets the desired line width in pixels or points. 
For screen graphics we have in GPanel::renderlist().....

               case SETSOLIDLINE: 
                  x = Math.max(0.0, Math.min(5.0, x)); 
                  fline = (x==0.0) ? 1.0f : (float) x; 
                  gX.setStroke(new BasicStroke(fline, 
                     BasicStroke.CAP_ROUND, BasicStroke.JOIN_ROUND));   
                  break; 

               case SETDOTTEDLINE:
                  x = Math.max(0.0, Math.min(5.0, x)); 
                  fline = (x==0.0) ? 1.0f : (float) x;                               
                  gX.setStroke(new BasicStroke(fline, BasicStroke.CAP_BUTT,
                     BasicStroke.JOIN_ROUND, fline+2.0f, fdash, 0.0f));
                  break; 


In CAD::writePSquad()....

            case SETSOLIDLINE: 
              pw.println(" solid"); 
              x = Math.max(0.0, Math.min(5.0, x));
              pw.println(sx + " setlinewidth"); 
              break;

            case SETDOTTEDLINE:   
              pw.println(" dotted");
              x = Math.max(0.0, Math.min(5.0, x)); 
              pw.println(sx + " setlinewidth"); 
              break;               



With this, users can make high quality graphics .eps -> .pdf with user
selectable line widths. 


---5 July 2009: A107: trying MAXI=512: wider than previous MAXI=256.


---25 June 2009:  A107-----New Feature?

Would be nice to have user selectable line widths for
separate rays and objects in Layout.  That way I could
custom tune my advertising artwork for best impact while
retaining high def pixellization.   Problem: the Layout
Options dialog is already kind of big and busy. 
^^ Added a not-too-huge three-data dialog feature and three
new LAYOUT UO data "rays" "surfs" "axes" default 1, 2, 1.
I generalized the LIGHTLINE MEDIUMLINE HEAVYLINE mechanism
to use the unoccupied "x" field of the XYZO quad to convey
desired line breadth; default is x=0 giving the old widths
of 1.0, 1.5, and 2.0 pixels.  For 0<x<5 the widths will be
honored; anything outside this range including zero gives the
nominal default widths.

In LayoutPanel I draw lines using the new GPanel calls
addXYZO(width, XXXLINE) and buildXYZO(width, XXXLINE). 
At present, these calls are unique to LayoutPanel.

Other callers of addXYZO() won't use these new calls in
GPanel, and I've made sure that a zero x argument is rendered
as before, namely LIGHTLINE = 1.0 pixels, MEDIUMLINE=1.5 pixels
and HEAVYLINE=2.0 pixels. So there should be no adverse effects
of these additions. 

Works.  Now I can fool with the line breadth in improving
the PennWell Laser Focus World "Focus On Products" graphic,
which uses the beautiful Czerny.OPT artwork but which came
out a bit wimpy in the "Summer 2009" edition for my repeat
in the Fall 2009 edition.   The previous artwork used the
default settings {rays=1.0, surfs=1.5, axes=1.0}
and I'm submitting {1.5, 3.0, 1.0} and {2.0, 3.0, 1.0} as
files Czerny1530.PNG, Czerny2030.PNG, and Czerny1020.PNG.
I like the 1530 {1.5, 3.0} best but hey I was wrong before.
The publisher likes this best, too.


 


---15 June 2009:  A107----------

Annoying bug:  NIR7.MED loads reads unloads OK
 but   NIR8.MED refuses to load, or loads but no caret,
 and then kills app: all subsequent loads fail. 

What makes NIR8.MED special??   nglasses > MAXMEDIA: overflow crash.

Other newly created big files like SchottTropf.MED fail too.

NIR7.MED has 15 glasses.
NIR8.MED has 105 glasses. 
SchottTropf.MED has 108 glasses.
In Constants.java, MAXMEDIA=100.
Failure to test against this limit?  Yep.
Changed the limit to MAXMEDIA=200 and recompiled. 
This seems to do it: caret OK, unload OK, reload OK all files.
If so, then I must rewrite MEDIA loader to avoid overloads:
simply quit loading once the buffer is full. 
Indeed every converter table->numbers should perform checking,
and to make the limit transparent, the editor should warn about
excessive number of records.  

20 June: additional fix in MEJIF line 51, test limiting nglasses <= MAXMEDIA.

But this is really a crappy fix since the text table display still shows
all the overflow glasses! yet they are not accessible!  Should instead 
quit pouring into the editpanel (MAXI, MAXJ=1650) and post a warning that
MAXMEDIA has been exceeded and that glasses beyond MAXMEDIA are toast. 

Probably have the same trouble with MAXWAVES and MAXFIELDS; need test plan
and a comprehensive plan.  

But before that, I want to introduce a mechanism letting an EPanel
or its EJIF announce when it is getting overflow: perhaps a titlebar
word "Overflow" to alert the user.  This must be tested for at every possible
lengthening of the table and must of course know the number of records
in its client doubleData[][] dimension. So how about, upon creation of a
new EPanel or EJIF, it gets told its own MAXRECORDS (not JMAX which is an
editor limitation: instead MAXSURFS or MAXRAYS or MAXMEDIA).

Methods that increase the contents of an EPanel:
  EJIF bLoadFile(File f)  -->  ePanel.vLoadString()
  EJIF doPasteInto()      -->  ePanel.vLoadString()
Diagnostic Method:
  EJIF getNumLines()   -->  ePanel.getLineCount()

This code is now (5 July 09) installed into EJIF lines 827-840, 
using the mechanism of a negative iCountdown whose repaint
timer triggers the timed countdown just like SAVED. 
EJIF's bLoadFile() checks for overflow and if found it sets
iCountdown = -10 starting the warning.  Ditto doPasteInto().
Seems to work OK. 





----6 April 2009, A106, Bug Fix: Chooser files cannot be Startup files----

Heretofore, files loaded via DragNDrop are seen by the Startup
Options utility and can be subsequently loaded automatically.
However files loaded manually, via FileChooser, were invisible
to the Startup Options utility.

Now I have fixed that.  Instead of passing a file name from the
static EJIF String field myFname to the utility, I have created
a dynamic inquiry for Options to call and for EJIF to offer...

public String getFname()
{
   myFname = myFile.getPath();
   return myFname;
}

which is always fresh, and now always works. 
I still have no idea why the DragNDrop mechanism always gives
correct myFname data.  



----6 April 2009: notes on GPanel's affines----------

  * Any extension may use the AddScaledItem(xyz, opcode) method
  * to add a vertex to a drawing BUT MUST FIRST SET THE AFFINES
  *    uxcenter, uxspan, uycenter, uyspan.
  *
  * This abstract class is concreted by clientPanels doing artwork:
  *   Layout; Plot2D; MPlot, Plot3D, H1D; H2D; MTF; Test.
  *
  * Native system is CenterOriginPoints, +X=right, +Y=up, +Z=out.
  * so artwork quads have -250.0 < x,y,z < +250.0
  * Pixels are the same, except origin = ULCorner and +Y=down. 
  * Conversion to pixels uses local getIXPIX(x), getIYPIX(y).
  *
  * To get user coords from the artwork, the quadlist includes
  * userconsts x,y,z = offsets for that quadlist view;
  * userslopes x,y,z = magnifications for that quadlist view;
  * UserValue x,y,z = userConst + userSlope * quadListValue.
  * These affine userconsts & userslopes are added HERE by addAffines(). 
  *

    void addAffines()
    // stash user affine consts & slopes for DXF: pix->UserUnits
    {
       addXYZO(uxcenter, uycenter, 0.0, USERCONSTS); 
       double d = (dUOpixels > 0) ? dUOpixels : 500.0; 
       addXYZO(uxspan/d, uyspan/d, uyspan/d, USERSLOPES);
    }

    void addScaledItem(double ux, double uy, int op)
    // scales user (x,y) and appends to myTechList.
    // allows pan zoom twirl thanks to getXX() calls
    // Be sure to addAffines() before using this!
    {
        addXYZO(getax(ux), getay(uy), 0.0, op);
    }

    double getax(double ux)
    // converts userX to annoX
    {
        return dUOpixels*(ux-uxcenter)/uxspan; 
    }



---5 April A106: means and moments; remote pupil------

Added "Box Statistics" display to MultiPlot
[Would be nice to add "means and moments" display to Plot2D]
Adding parallax steps to MultiPlot so that
  a remote pupil can be illuminated.
^^Seems to work but more testing please.
^^Needs major enlargement of MPLOT chapter.
Still to add: ten box statistics
  N = number of rays in box
  HS = horizontal step value
  VS = vertical step value
  <h> = ray h plot value mean, center of box
  <v> = ray v plot value mean, center of box
  h.h = RM of h^2 values
  v.v = RM of v^2 values
  h.v = RM of h.v values
  rss = RM of h^2 + v^2
  rms = RM of (h^2 + v^2)/2
^^Added 6 April; initial tests show all ten are OK & useful.

Q: how does the graphics work here?
A: see above. 
Q: ray zero in use? might eliminate ray saves?
A: No, ray zero is not in use. Instead MPlotPanel does
 a complete substitution then a restore of saved parameters. 


---2 April A106: caret specifies startRow for AutoRay----------

Added a routine getCaretY() to EPanel and EJIF so that Options
can use rejif.getCaretY() as a starting point in listing the
AutoRay numbers. 
^^Done, works, PLEASE EMPHASIZE THIS FEATURE IN MANUAL




----14 March A104 bug: StartupFiles won't grab current editors--------
  
When running under Terminal, the Options::StartupFiles
  fails to show 
any filenames after loading and specifying these. 
  
However it runs fine when free-standing.
  I'm going to 
disregard this bug, customer will never see it. 






----9 March A103 bug report: dotted extension beyond IrisFail----


When rays encounter a diameter failure, they don't just stop

at the surface as they should: they trigger a dotted extension

beyond the math surface, as if they failed the next surface.


^^ Check out bExtend[] in RT13, maybe that is the problem?

It is set both in the intercept and in the redirect.  Correct??





-----9 March A103 bug report: farside-------


On A103, if two conic solutions are available,

but a surface crossing forbids the nearer, the

solution taken is the farside, without permission

of having > or < present.  Should be nearer hemi

only, else fail. 


^^Reason: use of iGetPosRoots() presents only the one

positive root when there is a (neg, pos) pair;

this makes it impossible to check the pair and reject

the pos root when the neg root is nearer the vertex. 

MODIFIED iGetPosRoots() so as to always return both

roots when there is a distinct pair, so that after the

selection takes place, then can decide if OK or not. 

^^Seems to work.  Needs lots of testing. OK on MIS7.OPT

In this connection I reestablished "bak" alongside "mis"

as ray failure messages.  Needs testing. 



-----9 March A104: Autoadjust Ray Risk----------


Removed the 10% step size feature.

Rewrote this so a BIGVAL ray fail error

is treated just like any large SumOfSquares;

it drives an increased damping, making the 
step tiny, 
but downhill.  

Since now there will be close approaches 
to ray failure,
the numerical derivatives routine getJacobian() 
is at risk.
It is likely to fail owing to the potential failure of one

or more rays.  Needs reporting and bailout!


So far, Seems to work.   Bigger test suite needed!




----4 March A101  Autoadjust Ray Risk-----


Installed a "last chance" 10% step size feature, 
before declaring 
bad ray NG exit, tries 10% step vector.
 Documented via IDEBUG > 0 
indicator.  Needs testing
to see if it helps at all.

 
Yes it helps but is an ugly wart on otherwise clean code.
I think it is unnecessary.  



----4 March Beeping PC Compiler Syndrome----------


This syndrome is caused by having Mac system files with 
names

.DSxxxxx.java

whose suffix begs the PC compiler to compile 
them, whereas they
 are not actual Java code.  
DELETE ALL DOT FILES before compiling on PC.





----1 March 2009  A101----future improvement idea---


It would be superior graphics to have each & every arc segment

z-sorted, instead of entire arcs being z-sorted.  Of course

this is a slower and more complicated process with a zillion

tiny disconnected line segments rather than the somewhat more

efficient PolyLine.  But still, worth an optional try. 






-----21 Feb 2009 A101 Automatic Diameter bug------

O
n Sigler3  (a simple 2-mirror camera) the automatic Diameters work great.

On 3MirCam18 (slightly more complex) the automatic Diameters are just right

on mirror 2 and FP, but way too big on the concave mirrors 1 and 3.  Odd!


Maybe not so odd.  Mirrors 1 and 3 have nonzero OffOx, while the entrance

iris, mirror 2, and the FP have zero OffOx.  

LayoutPanel line 453 is where 
the observed radius is adopted.
  Aha! no subtraction of vertex offset from 
ray intercept position.

^^Fixed, lines 446 and 448 of LayoutPanel. 
Works. 


B4DEMO.jar  144kB
BEAM4.jar   152kB


----------5 Feb 2009  A72--------

minor cleanup: in constants.java and in editors:
unified IMAX JMAX everywhere,
deleted MAXRECORDS, MAXLINES,
fixed JScrollBar(JMAX),
tested with TMA149 with 1296 rays; works!




------10 Jan 2009   A72------------------

A potential feature is a TextEdit mode for the table editor.
This would differ in four ways from table editing:

1.  Keystrokes would insert i.e. shove right;
2.  Delete & backspace would pull left;
3.  Enter will break the remaining line to the line below
4.  Delete & backspace at BOL would append line to EOL above. 
5.  Cut and paste should work on line fragments not just lines.
     (This is a big change!)

It should be made obvious that the editor mode has changed.
Perhaps a blinking I-beam caret rather than the block caret?
Also an I-beam cursor rather than an eleven-o'clock arrow? 
Something to suggest inserting text?  People are accostomed
to seeing an I-beam caret when inserting. 
^^ caret width is set in EPanel:paintComponent() line 174.
^^ Modified to use editor mode to control caret width;
   Block caret is size of char block,
   Bar caret is same height but 1/4 the width. 

1. Added Constants: Editor text mode, default "F";
2. Added Options:Editors dialog radio buttons. 
3. Added a test and an insert char loop into EPanel.keyTyped().
  Odd though: backspace shoves right too! Aha, Bksp needs to be
  filtered out of shoveRight just as with putTypedChar().  
4. Added a test and a delete char loop into EPanel:keyPressed()
  to handle VK_BACK_SPACE and VK_DELETE.  
^^Done; tested; works. 12 Jan 2009. Nice caret feature reminder. 

-------------

Yikes, on the Mac, Options::Editor info boxes overflow!
Within "Special Editor Keys" perhaps eliminate some of those
spaces, and within "To insert lines" be less chatty?
Same trouble within Help:SpecialKeys. 
Also these boxes, please change to combine Ctrl with Cmd
to be platform neutral. 
^^Fixed 10 Jan 2009  A72. 
^^New artwork needed for Manual showing new info boxes
  both in Options:Editors and also Help.
^^New text in Manual needed about editor modes and caret behavior.

----------------

Yikes, where is B4OPTIONS.TXT kept?  Does not appear to
reside in B4 startup folder alongside the other B4 files.
Many copies are in Trash; most recent copy is in 
Business:Products:B4JE72  -- strange. 


---------2 Jan 2009  A71---------------

With the EPanel fixes, the Mac OS clipboard error messages

   CGContextGetClipBoundingBox: invalid context
   CGContextGetCTM: invalid context

continue to appear occasionally.  Let's keep looking!



---------31 Dec 2008 QA STUDY: DO TAGS MESS UP EXCEL TRANSFERS?--------

1. LENS.OPT has a ? tag on Zvx for surface 3.
2. Select Options::Editors::ClipboardOutput::Tabs
3. Mark all the text in LENS.OPT
4. Choose Edit::Copy
5. Into a waiting Excel, paste the clipboard
6. Wow, all tags (colons & Question mark) vanish
  and the fields continue to line up as they Should!
7. but Yikes, the ruler line does not appear under the ruler line.
  ^^ see analysis and fix below^^


---------RARE BUG----------

1 Jan 2009: there is a **rare bug**: sometimes Cmd::D fails to do anything.
Usually works OK.  Edit::Delete always works. 

---------RARE BUG-----------

2 Jan 2009:  I may need to enforce mouse.capture() and mouse.release()
explicitly.  Sometimes the mouse appears to be captured (acting on my
edit window) when the cursor is far outside my application space.  


---BUG: HEADER LINE LOSES EOL IN TABS MODE; PERSISTENT COLONS-----------

Copying tabs sometimes fails.  After the "f" there appears to be no 
CR or LF or EOL and the subsequent ruler goes unprocessed. 
Select Options::Editors::ClipboardOutput::Tabs, 
and widen this text viewer to see a very long header line...

TEXTMODE is okay:
3  surfaces            LENS.OPT
 Index    Zvx    Curv Asph   Type? Dia f
------:---.----:--.--:--.---:-----:---:-:--
 1.00 :  6.0   : 0.25:-2.763:Lens : 3 : :
 1.66 :  7.0   :-0.25:-2.763:Lens : 3 : :
 1.00 : 13.0188?     :      :Film : 3 :S:
      :        :     :      :     :   : :

TABMODE: (needs wide editor screen!)
3  surfaces            LENS.OPT
 Index	   Zvx  	 Curv	Asph  	Type?	Dia	f	------:---.----:--.--:--.---:-----:---:-:--
 1.00 	  6.0   	 0.25	-2.763	Lens 	 3 	 	
 1.66 	  7.0   	-0.25	-2.763	Lens 	 3 	 	
 1.00 	 13.0188	     	      	Film 	 3 	S	
      	        	     	      	     	   	 	
TABMODE IN HEX (needs very wide editor screen!)
 33 20 20 73 75 72 66 61 63 65 73 20 20 20 20 20 20 20 20 20 20 20 20 4c 45 4e 53 2e 4f 50 54 0a
 20 49 6e 64 65 78 09 20 20 20 5a 76 78 20 20 09 20 43 75 72 76 09 41 73 70 68 20 20 09 54 79 70 65 3f 09 44 69 61 09 66 09 2d 2d 2d 2d 2d 2d 3a 2d 2d 2d 2e 2d 2d 2d 2d 3a 2d 2d 2e 2d 2d 3a 2d 2d 2e 2d 2d 2d 3a 2d 2d 2d 2d 2d 3a 2d 2d 2d 3a 2d 3a 2d 2d 0a
 20 31 2e 30 30 20 09 20 20 36 2e 30 20 20 20 09 20 30 2e 32 35 09 2d 32 2e 37 36 33 09 4c 65 6e 73 20 09 20 33 20 09 20 09 0a
 20 31 2e 36 36 20 09 20 20 37 2e 30 20 20 20 09 2d 30 2e 32 35 09 2d 32 2e 37 36 33 09 4c 65 6e 73 20 09 20 33 20 09 20 09 0a
 20 31 2e 30 30 20 09 20 31 33 2e 30 31 38 38 09 20 20 20 20 20 09 20 20 20 20 20 20 09 46 69 6c 6d 20 09 20 33 20 09 53 09 0a
 20 20 20 20 20 20 09 20 20 20 20 20 20 20 20 09 20 20 20 20 20 09 20 20 20 20 20 20 09 20 20 20 20 20 09 20 20 20 09 20 09 0a

On this tabbed file, EOL = hex "0a" since Mac style output. 
The hex 09's are the tabs mostly where they should be.
The hex 2d's are hyphens.  
Notice there is no EOL=0a following the "f"="66" and tab="09" on the second line.
Instead there is a bunch of hyphens "2d" and an occasional "3a"=colon.
The above hexdump reveals that one character is missing: the EOL  "0a"

Likely place to find the problem are in EPanel, responsible for formatting
and sequencing output strings.   The call for Edit:Copy is handled by DMF line 770
which sends us to EJIF doCopy() line 552, which in turn requests EPanel's
text extractor getMarkedText() line 521.   Here, a StringBuffer is initially
filled with the marked text.  Then, if "Tabs" was chosen, a second pass
is made (aha!) that evaluates each line of the StringBuffer and where
the ruler line has a colon, it replaces that char with a tab.

But! what if that char was an EOL?  What then?  It replaces it anyway.

Oops.

Trying a code modification that does not clobber EOLs:

       if ((charTable[2][iX]==COLON) && (sb.charAt(i)!='\n'))
         sb.setCharAt(i, TAB); 

Works! Now the tabbed clipboard retains its lines and is colon-free...

3  surfaces            LENS.OPT
 Index	   Zvx  	  Curv 	 Asph   	 Type?	Dia	f
------	---.----	---.---	---.----	------	---	-	--
 1.00 	  6.0   	  0.25 	 -2.763 	 Lens 	 3 	 	
 1.66 	  7.0   	 -0.25 	 -2.763 	 Lens 	 3 	 	
 1.00 	 13.0188	       	        	 Film 	 3 	S	
      	        	       	        
Also now works, transferring to Excel via the clipboard. 

^^DONE 2 Jan 2008



------31 Dec 2008, A71----DOUBLE PASTE BUG---------

On the Mac it's customary to use the Command key, not the Control key,
for File and Edit shortcuts, e.g. Edit::Copy and Edit::Paste and Edit::Delete. 
On the Mac, the editor's Control-C, Control-V, and Control-X work but can't I also
get some action with the Command key?
^^Trying DeskMenuFrame line 975 combining bitwise OR the Command & Ctrl modifiers. 
^^Nope: the bitwise OR kills both accelerators. 
^^Trying to set two accelerators to one item. 
Attaching CTRL_MASK then META_MASK:  CTRL fails, Cmd works but an accelerator letter
such as "c" leaks through into the table being copied on Cmd. 
Attaching META_MASK then CTRL_MASK: META fails, Ctrl works.  Cmd still leaks the letter.

From Java Development Guide for Mac OS, trying their recommended solution...

    item.setAccelerator(KeyStroke.getKeyStroke(accel, 
    Toolkit.getDefaultToolkit().getMenuShortcutKeyMask())); 

^^Interesting. On the Mac this gives Cmd-C copy action, what I want,
except that the char "c" leaks through into the text table being edited.
It does not give any Ctrl-C copy action on the Mac, as expected. 

1. Let's centralize recommended accelerator key modifier "iMask" within DMF.
   This affects DMF constructor.
2. Verify that "^" or curlicue appears automatically in the File & Edit menus. 
 ^^ OK on Mac!
3. In the editor, set up char blockage based on DMF modifier iMask.
   This affects EPanel line 1014 where the keystroke event is tested.
   Perhaps better than "event.isControlDown()" would be to extract and test
   the event modifiers against DMF.getKeyMask(). 
   Better still: how about allowing *both* masks as accelerators?
   Maybe impossible.  But at least block *both* masks from leaking?

Yikes, with this dual-blockage keystroke processing idea...
            int mod = event.getModifiers(); 
            if ((mod == iPC) || (mod == iMac))      // allow either platform
              switch (c)
              {
                 case 'x': myEJIF.doCut(); break;
                 .......

...the cursor started sticking, not letting go of a row-selection task.  
It is as if the Event modifiers are messing up the mouse (don't see how!).  
Only by activating another app with the mouse can I get B4JE to relenquish its
grip on the cursor. 

Trouble faded with the simpler single-blocker...
            if (mod == DMF.getKeyMask())
             .....
Trouble stayed away when I reinstate the double blocker.  

Today the entire OS is seemingly a bit cursor happy!  
The TextWrangler cursor seems to confuse itself with the TextEdit cursor.  
It is as if the cursor can leave an app window yet still influence it.
Perhaps some cursor state logic needs to be installed?  

Another bug:  ignoring accelerators, using only Edit::Cut, Copy etc,
capturing one line and paste yields two lines not one, as if some
routine is being called twice?!   

STATUS ON MAC EDITING USING EDIT::CUT ETC:
  Cut & paste are OK: no chars leak into table, no spurious record(s). 
  Delete is OK: vanishes while clipboard retains previous cut.
  Copy is OK too: subsequent paste into TextEdit shows correct record(s). 
  Paste is OK too: Copy then paste, via Edit.. works properly.

STATUS ON MAC EDITING USING ACCELERATOR KEY
using if (mod==DMF.getKeyMask()) i.e. single platform;
also using double platform: 
  Paste after Copy doubles up! Two lines for one!
  AS IF THE PASTE ACCELERATOR RUNS TWICE.  Problem is not in
  the accelerated Copy, since paste into a TextEdit is single not double.
 

[Why do I get occasional error messages...
[  CGContextGetClipBoundingBox: invalid context
[  CGContextGetCTM: invalid context
[when I am using the clipboard for text i/o? 

A telltale installed within EPanel::KeyTyped() reveals that keyTyped() is being
called once for each accelerator key paste, and of course never for Edit::Paste. 
Trying "event.consume()" at end of keyTyped() maybe help??  No change: one call
to keyTyped(), yet double pasting. 
Hmmm now I am getting one telltale but two pastes.  Edit::Paste remains single. 

I fear that there are two routes into Paste: 

1. an invisible route in DMF via EMIListener (calls explicit Edit::Paste),
2. a route via the KeyTyped function.  

What would happen if I eliminated the KeyTyped processing of accelerator keys?
Documentation is in public static AWTKeyStroke() on the web...

"The modifiers consist of any combination of:

    * java.awt.event.InputEvent.SHIFT_DOWN_MASK
    * java.awt.event.InputEvent.CTRL_DOWN_MASK
    * java.awt.event.InputEvent.META_DOWN_MASK
    * java.awt.event.InputEvent.ALT_DOWN_MASK
    * java.awt.event.InputEvent.ALT_GRAPH_DOWN_MASK 

"The old modifiers

    * java.awt.event.InputEvent.SHIFT_MASK
    * java.awt.event.InputEvent.CTRL_MASK
    * java.awt.event.InputEvent.META_MASK
    * java.awt.event.InputEvent.ALT_MASK
    * java.awt.event.InputEvent.ALT_GRAPH_MASK 

also can be used, but they are mapped to _DOWN_ modifiers. Since these numbers 
are all different powers of two, any combination of them is an integer in which 
each bit represents a different modifier key.   Use 0 to specify no modifiers."   

My simplified code in EPanel eliminates all the accelerators, since it will be
fully implemented via the listener in DMF:        

            if ((mod==0) || (mod==java.awt.Event.SHIFT_MASK))
              putTypedChar(c);

^^WORKS! no double pasting on the Mac.
^^WORKS! no double pasting on the PC either.  
Fix completed  1 Jan 2009.




------------

29 Dec 2008 A71: Changed DeskMenuFrame's FileMenu label from "Print" to "Print/PDF"
to emphasize this is how to create a .PDF of any given printable item. 

------------

24 Dec 2008  A71:
  Boosting MAXRAYS to allow 1000
  ^^DONE.

Introducing MultiPlot stepping "@wave" field 
  ^^Two cases to consider:
  NumWaves used in diffraction gratings & HOEs;
    code will resemble code for other rayStart variables.
  TxtWaves used in lookup from .MED table;
    code will have to use field headers in current .MED table.
    Use fieldNum within current .MED?  @=1,2,3,4,5,6?
    this will avoid pattern matching issues, but will be
    rather opaque to the user, since will be based on table layout.
    Or: use strings?  CenterWave = "D", span=4? 
^^ NOT DONE


22 Dec, A70: why limited to 998 rays? How about 1000?

20 Dec: A70; fixed Autoadjust bug.
Previously the autoadjust process would not always
stop when a ray is killed.  Now, a ternary internal flag
"istatus" is employed to distinguish three iteration results:
LEVELITER, OKITER, and NGITER.  Messages appropriate to the
status are posted on the Auto dialog box.   Works.
^^Doesn't work: way too often it immediately exits with its
new "Ray Risk" exit, altering nothing, no clue as to what is
going wrong.  Even on a simple zero-conflict lens. 



18 Dec: Bug in A70, StartupFiles fails to load the
current editor set!  .OPT is OK but .RAY is an old one,
and the telltale stays old too.   Even after saving the
new file.
^^REASON: oejif.myFname fails to receive new file name
when the file is SavedAs XXX.  It hands Options::StartFiles
an old filename.  Need to get myFname synchronized upon saving.
^^reason: EJIF contained myFname and managed it, but also
OEJIF contained a field with the same name set by constructor
but then did not manage it.  So the call to oejif.myFname got 
only the initial startup name.   SHADOWING IS BAD and this is
a case of shadowing. 
^^FIX was to eliminate the daughter OEJIF myFname and allow
the more general class EJIF to make its myFname field be
protected hence accessible to the daughter classes.  
Also fix implemented in MEJIF and REjIF.
^^ Works. 




15 Dec 2008: Further internationalization issues  A70

1.  What becomes of the syntax check for input data,
now that we run each field through suckDouble()?
Is there still such a thing as a failed syntax?
^^ Yes indeed; Double.parseDouble() returns NaN
which is properly interpreted as a syntax error. 

2.   The formatter is U.fmt(): efmt() and ffmt().  
Each has its own decimal format.  Need to standardize the
US locale format.  In format strings, # is optional char
and 0 is a mandatory digit.  See \Java\Format\Driver.java.  

        NumberFormat nf = NumberFormat.getInstance(Locale.US); 
        DecimalFormat df = (DecimalFormat) nf;
        String fmt = "00.0000;-0.000";
        df.applyPattern(fmt); 
        ...
        double d = 123456.123456; 
        String result = df.format(d); 
        System.out.println(result); 


Here it is not necessary to nf.setGroupingUsed(false) since
the format string "fmt" overpowers any nf grouping status. 
Format strings can differ for neg and pos arguments by having
an appended extra format: "##0.000;#0.000" but the mandatory
"zero" parts never differ. 

And, in U.fwd() can simply use...

        NumberFormat nf = NumberFormat.getInstance(Locale.US); 
        DecimalFormat df = (DecimalFormat) nf;
        df.setMaximumFractionDigits(d); 
        df.setMinimumFractionDigits(d);
        df.setGroupingUsed(false);  
        ... 
        String s = df.format(x); 


3.  The ruler line decimal points can be used to fix
the numeric output into fields: period vs comma.  But
two changes will be needed: a ruler field punctuation
sensor, and the putDoubleField writer.  Need a way to
generalize U.fmt() to allow calling with the ruler
punctuation char:  'e' or 'E' -> exp; '.'-> period;
','-> comma.  Present code uses boolean exp.  Let's
change that variable to a char and decode in U.fmtc()
which is the old U.fmt() but with character recognition.

SOLUTION: see below.  U.nationalize() is used on input.
U.fmtc() is used on output, with an extra character 
argument (extracted from the ruler line substring)
to specify the comma vs the period for floating point
and to specify 'E' vs 'e' for exponential notation. 
^^ DONE. works!

15 Dec 2008  Built A70 BEAM4.jar; testing has begun. 
17 Dec 2008  working smoothly, commas & periods & e and E.



===14 Dec Testing Internationalization: commas OK?==========

U.nationalize() has been tested and installed into U.java.

U.parseDouble() has been merged into U.suckDouble(), and
now nationalizes before parsing. 

Build went smoothly. 

In tracing FASTIE.RAY, putting commas into @wavel is OK: runs.
But putting commas into a table FASTIE.RAY and then
reading this file back into B4JE causes it to mis parse fields.
Fragments of fields appear:

As seen in Notepad....

 48 rays   EBERT2.RAY
  X0      U0      V0    @wavel     xfinal  note
------:-------:-------:-------::----.----:------:--:
  100 :  0,10 :   0   :  0,44 b: -22.5056:OK  4 :  :
  100 :  0.05 :   0   :  0,44 b: -22.2999:OK  4 :  :
  100 : -0.05 :   0   :  0,44 b: -22.6302:OK  4 :  :
  100 : -0.10 :   0   :  0.44 b: -22.9281:OK  4 :  :

As seen in B4JE....

 48 rays   EBERT2.RAY
  X0      U0      V0    @wavel     xfinal  note
------:-------:-------:-------::----.----:------:--:
  100 :  0    :10 :   0   :  0:44 b: -22.5056:OK  4 :  :
  100 :  0.05 :   0   :  0    :44 b: -22.2999:OK  4 :  :
  100 : -0.05 :   0   :  0    :44 b: -22.6302:OK  4 :  :
  100 : -0.10 :   0   :  0.44 b: -22.9281:OK  4 :  :
  100 :   0   :  0.10 :  0.44 b: -22.4283:OK  4 :  :

This, even with Options::Editors:"Expand commas when reading"
set to unchecked.  Maybe that checkbox is broken???
Why would we ever allow commas to force new fields?
comma delimited is unnecessary given that we have tabs
and colons built in.  

Yes indeed EPanel.java line 608 includes the comma as a 
new field trigger, independent of the checkbox.

Sure enough, (UO_EDIT, 2) is ignored by EPanel.
In fact the only UO_EDITs that are in EPanel are...

UO_EDIT, 6
UO_EDIT, 7
UO_EDIT, 8
UO_EDIT, 5
UO_EDIT, 3

and in EJIF...

UO_EDIT, 0
UO_EDIT, 1
UO_EDIT, 6
UO_EDIT, 7
UO_EDIT, 8

leaving out 2, 4! Whereas in Constants.java....

       {  // group 11 = UO_EDIT
          {"Show file paths?",            "F"},  // 0
          {"Show row & col?",             "T"},  // 1
          {"Expand commas when reading?", "T"},  // 2
          {"Default fieldwidth, chars",  "10"},  // 3
          {"Colons, for text?",           "T"},  // 4
          {"Tabs, spreadsheets?",         "F"},  // 5
          {"Editor font size, points",   "14"},  // 6
          {"Editor bold font?",           "T"},  // 7 
          {"Editor pixel smoothing?",     "T"},  // 8

Methinks there is unfinished business in the editor loader
and in the colons/commas parsing work. 

Trial modification: remove comma & semicolon sensor from 
EPanel::vLoadString() and replace with a colon sensor. 
See tests at line 612 & 823.   [Why so complicated?]

^^Works!  fields with DP=comma or period both get
parsed appropriately, and traced properly.

^^next to test: Options;  AutoAdjust.   





============14 Dec 2008, Internationalization  A70 =================

INPUT===All the table parsing is done in EPanel line 310:

    public double getFieldDouble(int ifield, int jrow)
    // Empty returns -0.0; badnum returns Double.NaN
    // U.suckDouble() includes trimming and -0 for empty.
    {
        return U.suckDouble(getFieldFull(ifield, jrow)); 
    }

so the conversion of strings into doubles is already
centralized.  Good!

Options also inputs floating point numbers.  Although Options
uses strings in and out, it must at several places update 
optional doubles.  For this work it calls U.parseDouble(myString). 

*** U.suckDouble()  [U.java line 409]  
  which trims, tests, try/catch calls Double.parseDouble().

*** U.parseDouble()  [U.java line 374]
  within a try/catch block calls Double.parseDouble().

[Duplication: I think U.parseDouble() can be eliminated]


OUTPUT===Writing into the tables is done in EPanel line 354...

    public void putFieldDouble(int f, int jrow, double d)
    {
        String s =  U.fmt(d, 
                          iFieldWidth[f], 
                          iFieldDecimalPlaces[f], 
                          bFieldExpFormat[f]);
        putFieldString(f, jrow, s);
        myEJIF.setDirty(); 
    }

Here, U.fmt() divides into two local formatters...

U.efmt() handles format overflows => hyphens, 
and then it hand-assembles a stringBuffer
using '+', '-', a period, an 'E', to match the
specified field width and leading zero suppression. 
It could be altered to optionally use a comma.

U.ffmt() works from java.text.DecimalFormat
by setting up the digits, grouping=false, 
then after calling DecimalFormat it applies some
cleanup tests & fit checks. 
It too could use a comma if user prefers. 

What a mess. 

Could Horstmann's Format class help?
In Java 1.5.0 there is a Formatting class. 

--------------Solution---------------------

Internally always use Locale=US and always format 
with grouping=FALSE so as to produce only a period
as a decimal point.  Then existing outputters can remain.
(whew)  For now.  Never use default locale. Enforce Locale=US. 

When receiving a string to parse...
Search & eliminate any grouping punctuation within the string.  
Convert the remaining comma to a period internally. 

  On input, either period or comma is acceptable, and
  input formatter U.suckDouble() is smart enough to discard
  preliminary grouping punctuators and assure that the
  final punctuator is a period even if a comma was used. 
  U.nationalize() can do all this. 

Now it is Locale=US compliant.  

Leave all output in US format.  

*** Optional extra credit for output:  
  For output only, two-radio-button (.) period ( ) comma
  user option preferred decimal indicator.  Internally still
  Locale=US, but on output, my efmt() and ffmt() substitute
  a comma for the default decimal point.  




========tasks from Rod Andrew beta, 13 Dec 2008, A69===========

Layout's "opaque sides" cannot be switched off:
the Options::Layout checkbox is broken. 
^^REPAIRED 13 Dec now option 27 controls opaque. 

Internationalization and the decimal point.

User supplied weighting individual rays;  
User supplied weighting deviations in x, y, z, u, v, w, WFE.
User supplied weighitng on Aberrations: longitudinal vs transverse

Explain (a) Layout is quick but imprecise: straight line segments
(b) for accurate surface coordinates, use "bed-of-nails"
GIVE AN EXAMPLE fully worked. 




--------------for manual only----------------
Mention the fact
that there are free viewers of 3D DXF
files out there: for example
DWG TrueView 2009 from AutoDesk?








6 Dec 2008  A69  Adopting Package "com.stellarsoftware.beam"

For total compatibility with Mac compiling, the package
name has to be all lower case.  I have changed the package
to lower case and rewrote the compile jar & test scripts.
For Win the batch files are a.bat to f.bat
For Mac the scripts are a.sh to f.sh

The Win details are in WinBuild.txt

The Mac details are in MacBuild.txt


4 Dec 2008 A67A
Annoyance in AutoAdjust: when arriving at a 
ray killer, the adjustment stops after a ray
has been killed and does not back up to the
previous OK configuration.  It should sense
the problem and back up, not leave the user
with a damaged trace. 


A67A now has vertical zoom  2 Dec 2008
In GPanel.java line 1101 there is now a sensor isShiftDown();
this triggers wheel VertZoom [without it you get normal zoom].
Function keys F5,F6 perform vert zoom.
Updated the info panels in Options::Graphics and
also Help::SpecialKeys. 
^^ MANUAL needs to be updated with this feature.
^^ Manual has been updated, also on-screen guides. 


********************************************************

Common failures & errors generating PS and EPS files:
  http://www-cdf.fnal.gov/offline/PostScript/AdobePS.html


**********************************************

23 Nov 2008  A67  DeltaParms for Polynomials

Polynomial coefficients need tailored delta sizes
for numerical derivatives, since there are many
orders of magnitude involved when typical ray
radii are numerically far different from unity. 

Previously, in AutoAdjust.java, around line 195,
getDelta(int i) would return a simple dUser (typ 1E-6)
for most entries, including all poly coefficients.  

Really, dUser is dimensionless and should therefore
be interpreted as a slope deviation not a coefficient.
So deltaAn = dUser/(n*r^(n-1))  where n=polyIndex and
r=radius of outer ray.  This formula gives a deltaAn
whose dimensions are length^(1-n) just like An itself.

An approximation to radius is dOsize, computed within
OEJIF.java and made robust; see line 400. 

A better treatment would be to use the setup raytrace
to evaluate the actual Rmax of rays at each surface and
set deltaAn = duser/(n*Rmax^(n-1)) instead. 

[There is a similar issue, already solved, on curvature.
Its deltaC is dUser/dOsize.  Better would be dUser/Rmax.]

This problem was initially noticed tracing SIGLER3.OPT
wherein there is polynomial correction of a surface
specified in millimeters wherein the ray radii and
optical sizes are hundreds of millimeters.  The A4
value needed for this optic is ~1E-10 but the delta
was 1E-6 totally blasting the trace. 

^^DONE using generic dOsize; works!  
SIGLER3 now optimizes smoothly, even A6.
^^DONE using traced radii each surface; works!


**************Compiler Compatibility Issues**************

29 October 2007  Compiler Compatibility

For best user experience I want to use an old compiler,
max compatibility with broad range of user Java RunTimes.

Adopted...
     j2sdk1.4.0

Newer ones tested are more troublesome....
     jdk1.5.0_06
     jdk1.6.0_03

How to distinguish compilers: in the command window type 
    javac -version

1.4.0 will respond "javac: invalid flag: -version"
1.5.0 will respond "javac: jdk1.5.0_xx"
1.6.0 will respond "javac: jdk1.6.0_xx"

**warnings about hide(); A44,A45 changed to setVisible(false);
**warnings about serializable; A4,A45 are fixed by putting
     public static final long serialVersionUID = 42L;
**warnings about unchecked deprecated generic ArrayList:
     A44 uses ArrayList<xx> compiles under 1.6.0;  
     A45 must revert to (xx) ArrayList to compile under 1.4.0

Results:              A44 ArrayList<xx>       A45 (xx)ArrayList

1.4.0 compile:             illegal <xx>            OK?
         runs:               no .JAR               OK?

1.5.0 compile:               OK                 warning:unchecked
         runs:               ??                     ??

1.6.0 compile:               OK                 warning:unchecked
         runs:         Fails on Mac,PC             ??

In A44 I attempted a full cleanup with...
     hide()->setVisible(false),
     public static final long serialVersionUID = 42L;
     and fully qualifying every ArrayList<xxx>; no casts.  
Compiles without a peep under 1.6.0 but FAILS TO RUN on the 
MacBook & HP computers.  This is a compiler fault in 1.6.0:
resulting code is incompatible with older JREs and therefore
must not be used in production environments. 

  [The fault message is (see Win98 installation)
   "Java Virtual Machine Launcher:
    Could not find the main class. Program will exit!  [OK]"
    which suggests some fault within my manifest MyMan.mf but looks OK:
    Main-Class: com/stellarsoftware/BEAM4/M7
    Author: Lampton 
    My CLASS.LIST is a bit odd, containing two M7 entries (why two?)
    com\stellarsoftware\BEAM4\M7$1.class
    com\stellarsoftware\BEAM4\M7.class
    Of course many classes are multiple in this sense. Why?]

Therefore in A45 I reverted to 1.4.0, kept the serialVersionUID,
this being legal even in 1.4.0 compiles;
reverted to generic ArrayLists because ArrayList<xx> is forbidden
under 1.4.0.  

>>THE FAULTY CODE is A44's BEAM4.jar 206kB 10/28/07 11:27AM
>>Copies exist a.k.a.        A44.jar 206kB 10/28/07 11:27AM

Lenovo javac -version confirms 1.5.0_06
  * this version complains about X.show(), prefers X.setVisible(true); 
  * this version complains about using generic ArrayLists. 
  ? does this version create fully acceptable BEAM4.jar's?
Dell javac -version "invalid flag -version"
Dell PATH="....C:\j2sdk1.4.0\bin;"
 ...and sure enough there is that directory there. 
Dell javac does not complain about X.show() nor generic ArrayLists.
Dell javac produces fully acceptable BEAM4.jar's

**************end of compiler compatibility******************

21 Nov 2008: A67: x,y,z axes fail to show up in Layout.

^^Reason (23 Nov) is not the Options logic which is OK;
reason is that global xmin=xmax=0 so it draws a zero
length dotted line on the drawing.   
WHO IS RESPONSIBLE FOR THESE GLOBALS?
Layout::SetScaleFactors() does not manage them.
Yet it manages to zero them! and manages all the other
scale factors hmin etc.
I am going to introduce xmin etc into setScaleFactors()
which is beautifully set up to sense the optic and the
ray set.  
^^Done 23 Nov; works! now they are equally visible. 


20 Nov 2008  A67
Add to the manual: a section on converting
the .OPT format into the .LENS format
where curvatures -> radii
where Z -> deltaZ

and the reverse .LENS -> .OPT


19 Nov 2008  A67
Yikes, when I modify the requested Layout arcs,
I fail to get a redraw.
^^STRANGE now (Nov 23) they redraw automatically. 

19 Nov 2008   A67
In Autoadjust, when optic dimensions are ~100mm,
like in SIGLER, and turn on A4 coeff, correct adjustment
level is order of 1E-10.  BUT auto makes steps ~ 1E-6
which is waaaaay too crude, clobbers the autoadjustment.
Instead want **small** adjustments! 
Say, slope = 1E-6, no more; to get this slope require

   deltaAn = 1E-6/(n * r^n-1)

where r = radius of each optic = Diam/2 or thereabouts. 
^^FIXED see 23 Nov 2008, A67. 


17 Nov 2008   A67

Bug: if a table is read in which has some text with commas in it,
the text tokens between commas get parsed into neighboring fields
and the commas get discarded.  So if a user note beneath the working
space in the table says "This glass sequence is Flint,Crown,Flint"
it looks OK when saved but is corrupted when reloaded.  As if there
is a comma-detecting parser at work.   ??


17 Nov 2008   A67

Sometimes auto converges nicely to a small RMS
but then, with InOut, a much larger value appears.
Why?  

Answer: check for some rays getting lost: either
lens surfaces have intersected, or Diameters have
clobbered some of the outermost rays.  

Also: be sure to apply enough digits of precision that
the table contains the needed accuracy delivered by the
Auto run. 

SUPPLY USER WARNINGS FOR AUTOADJUST:
  * TURN OFF DIAMETERS
      unless you want adjustment to stall
  * ENSURE PLENTY OF DIGITS
  * AVOID SURFACE COLLISIONS
      or expect adjustment to stall if collision happens.



17 Nov  A67

Why, when I put stuff into the .OPT, does the header
complain "Optics file is empty"  ??  Should keep up
with keystrokes i.e. with the user. 


13 Nov 2008  A67
Why does autoadjust sometimes make a step, fail some rays,
yet cannot go back and undo that: it exits showing a wrecked
trace and a ruined .OPT table.  Example: Cooke6.OPT

12 NOv 2008   A67
Why does RT13 include the test

            if (j == nsurfs)  // reached end of trace; bail out.
              break; 

when its main loop is already checking for j==NSURFS
and when the VXtoLab() task remains to be done?


12 Nov 2008   A66
 Rod asks for a way to weight various goals, to combine
 WFE with Xgoal and Ygoal fairly.

11 Nov 2008   A66

Would  be really nice to introduce Edit:Undo
  * right before each edit, capture the file as a temp
  * if Undo, replace file with temp


27 Oct 2008   A66

Bug:  Plot2D cannot handle an enlargement in Nsurfs.
It must be dismissed and restarted to acquire the new
value of Nsurfs. 


Annoyance: Layout still does not scale properly at startup.
^^FIXED 23 Nov A67 with new setScaleFactors() code. Works!


Manual: no index to "Czerny-Turner" but see page 119.
Also should include Rowland, Eagle, Littrow, etc.
Index to "Grating" does not direct to Appendix; it should.



30 Sept 2008    A66

There is a disconnect in the "intercept solution choice" issue.
Presently the logic goes like this:
  User specified preference: default or > or <
  B4 finds math intercept for that one preference.
  That one choice is tested by Diameter.
    if OK, use that intercept
    if NG, abandon this ray

What is wanted however is to register *valid* intercepts:
  User specifies preference: default or > or <
  B4 finds both intercepts and does not yet decide which.
  Each intercept is tested by Diameter.
  If there are no good intercepts, abandon the ray.
  If there is one good intercept, use it.
  If there are two good intercepts, apply user preference. 

Adopting this logic will make B4 behave a bit more like reality:
the choice of intercept will be governed by moving the target
surface or its Diameters (its domain of definition) just as
real light will be subject to shadows. 

This redesign should influence the design of RT13:bBracket().
Currently, bBracket() starts with the interval [eps,big] and
adjusts eps, then big, to get a bracket.  However this
will succeed only for a nearside root.  If the user wants the
farside root, then this procedure will fail.  Should instead
start with [eps,big] for nearside then [nearside+eps, big] for
farside.   This change will make the numerical solver half
as fast but produce a more powerful product, able to accept
the users preference: default, >, < even on higher surfaces. 

^^POSSIBLE DOWNSIDE is only that now a paraboloid from conic
will have two alternatives while a paraboloid from polynomial
will have just one alternative.  Of course that's the current
situation as well.  




13-14 Sept 2008  A66

Continuing work on the bracket:  Yes a direct d[1] search from
TINY=1E-8, factor=BASE=1.1, several hundred steps, works;
but I'd prefer something less expensive of machine cycles
if possible.  An alternating search starting at HINT would
be more efficient provided that the hint is not too crazy.
To assure the proper (smaller) root of a pair, must make
sure d[0] is very small, i.e. zero or TINY.

How to choose HINT?  

Best to avoid 1/|curvature| which is often infinite. 
How about...
  0.2*getOsize()
  never zero, always roughly right. 

^^TESTING; hint=0.2*DMF.getOsize() and a bracketter that finds
d[0]=0.0 if f() is nonzero there, else steps away from
zero using decade steps from 1E-8.  Then d[1] search
starts at hint alternating fine steps with factor=1.1
THIS WORKS on Sholl's TORfail00 files. 

^^TESTING: (set Debug Level = 1): 
On TORfail00 it uses 1 to 5 function calls to bracket. Good!  
On TORIC.OPT it gets hint=0.1; d[1]=1.08; 50 calls, not good.
[At finesse=1.1 it takes 50 alternating calls to go a decade.]

Improved hint:  0.2*getOsize + 0.8*vertexDistance
This is a way to get the ray vote into play, to handle
the situation of a small optic illuminated from far away. 
^^TESTING (DEBUG LEVEL = 1):
On TORfail00 takes 1 to 9 iters: hint=0.077; d[1]=0.05;
On TORIC.OPT takes 4 iters: hint=0.90, d[1]=1.09.
Excellent.  Nicely balanced. 
On TMApoly.OPT takes 1 iter: hint=1m, d[1]=1m.
This is an extreme test, ultra short range since the ray
starts immediately in front of the PM. 

--------------------------------

12 Sept 2008  A66

1. Sholl points out that if Options::Editors::Clipboard
is set to "Tabs" mode, then cut/paste of text notation
fails because it attempts to impose the fragmented
field assignments of the notation when it pastes. 
Default is Tabs; this should be changed so that
default is Colons.  
^^DONE
Moreover the manual should recommend that EXCEL users 
set EXCEL to recognize colons as delimiters both
on input and on output.  (Output??) as opposed to
using this B4 feature which messes up non-tabular
text notes when copy/pasted.  (Even the tabs mode
works fine for copy/paste of tabular data.)


2. Sholl points out that in any mode, if he tries to
insert blank lines via copy/paste, that fails.  
Works OK only when there are actual characters in
the lines being copy/pasted.  Could be fixed by
promoting an empty string copy to a single space char
string, which will actually force a push down.  <Nope!>
^^PROBLEM originates in EPanel.vLoadString()'s use of the 
Delayed Pushdown Principle, where nothing is done until a
printable character appears. Empty lines have no printable
characters and therefore fail to push down.  [Duuuh.] 
^^FIXED by abandoning the D.P.P. and instead adopting the 
vLoadString() routine from A62. Its only problem is in extending 
fields past the end of the ruler line: it lacks a smooth 
transition from colon driven to formula driven spacings of fields.  
But at least Sholl's issue is a big issue and is corrected.
The A62 edit worry is a very minor concern, neglect for now. 

3. Sholl says Options::Graphics::Graphic font size should
default to 12 not 10 because 10 is illegible on his display.
^^DONE --- made default = 12 point.  Looks nicer. 





10 Sept 2008  A65-A66:  toric bug

Sholl found that a simple point source illuminating
a toric reflector fails, although illuminating a similar
cylindrical reflector succeeds.  

 2 surfaces     TORfail00.OPT OK if cylinder; torus often fails
   X          Z     pitch  Cx      Cy     Diam  f   Mirror?
---.------:---.----:-----:---.---:-------:-----:-:------------:
 -0.009425? -0.065 : 0   :  15   : 0.0010:0.12 :S:  mirror    :
-.008     :  0.0479:     :  0.0  :       :     : :  spectralon:


 7  rays  TORfail00.RAY
 X0     Z0       U0      V0     W0       @    Xgoal   ygoal Xfinal   note
----:---------:--------:----:---------:-----:---.----:---.-:--.----:------:
  0 : -0.0553 : 0.9767 :  0 :  0.2147 : 0.6 r -0.008 :  0  :       :mis 1 :
  0 : -0.0553 : 0.9896 :  0 :  0.0437 : 0.6 r -0.008 :  0  : 0.0770:OK  2 :
  0 : -0.0553 : 0.9974 :  0 :  0.0721 : 0.6 r -0.008 :  0  : 0.0757:OK  2 :
  0 : -0.0553 : 1.0000 :  0 :  0.0000 : 0.6 r -0.008 :  0  : 0.0787:OK  2 :
  0 : -0.0553 : 0.9974 :  0 : -0.0721 : 0.6 r -0.008 :  0  :       :Dia 1 :
  0 : -0.0553 : 0.9896 :  0 : -0.1437 : 0.6 r -0.008 :  0  :       :Dia 1 :
  0 : -0.0553 : 0.9767 :  0 : -0.2147 : 0.6 r -0.008 :  0  : 0.0783:OK  2 :
    :         :        :    :         :     :        :     :       :      :

All rays are OK if Cy=0, so it is not a problem in the raystart routine,
and indeed the presence/absence of V0 makes no difference. 
The errors here are the "mis 1" and "Dia 1" results: should all be OK. 
The above pass/fail pattern persists for all nonzero values of Cy. 
Since the cylinder solver is a simple quadratic, and works, but the toric 
solver is numerical, the bug must lie in the numerical solver.  
That would be the bracketer or the rootfinder. I am guessing the bracketer.

[Unexpected bug co-discovered: if the second surface has no defined
diameter, layout does not draw it, even though it is properly
intercepting some rays. Aha: this surface is named "spectralon" and
fails to draw itself.  Renaming it "Lens" makes it draw itself. 
This is surely a clue.  Names abcdefgh=ok; i=fail; jkl=ok; m=reflects;
nopqr=OK; s=fail; tuvwxyz=ok.  Note: "s" is reserved for spider,
which is a kind of Iris;  irises are not shown unless they have
declared diameters!  which explains it. Confusing, especially since
the examples in the manual call it an "iris with legs" not a spider.
I will eliminate the "S" category from OEJIF, retain the user manual
designation as an iris with legs, and now *presto* spectralon is OK.]

A very similar off-axis RoF illuminator torus, TORfail01, does not have
this problem: all rays reflect OK whether cyl or toric.

RUNNING BUILT IN DIAGNOSTICS:
The bracketting convergence process appears crippled.  First there is
a dozen messages Z.zToric() exitting with zero because arg2<0 i.e.
r*r-c2x2 < 0;   then there is 50 alternating messages
   Z.zToric() exitting arg2<0                     < fail exit
   Z.zToric() reports finding z = 6.69334E-04     < good exit
What does this pattern mean? Probably a bracketting effort with
one persistent fixed bracket point and a roving bracket point.
One legged march!

Q: does RT13::dNumSolve()'s return status code "RPBRA" value =-2.0 
get posted in the Ray.NOTES field?  or not?  Notice that HINT is 
fixed at 1.0 which might be the source of the problem if indeed it 
is a bracket problem.  RPBRA is returned by RT13:dIntercept() when
bracket failure occurs.  RT13:dIntercept() is called by RT13:bRunRay()
which substitudes the RRMIS failure key for all negative return values.
OK so I added a test & return value RRBRA showing bracket failures
in the Ray:Notes field; works; confirms bracket failure in TORfail00.

RT13::bBracket() uses MAXIT = 100 might explain the 50 alternating
messages.  Bracket bottom = TOL = 5E-14.  The search for bracket top uses 
alternate trials bigger/smaller than hint.  But if HINT is in a forbidden 
space, then there is no hope of converging because that bracket end will 
be zero from the failure of Z.zToric(). 

Perhaps choosing bottom=TOL makes it way too easy to have zero as a bracket
function value?  Choose 1E-8 instead?  Better: do a search. 

Perhaps RT13.bBracket() should modify its hint, so as to assure that
it lies in a feasible (nonzero) location, before starting its binary
greater/lesser march?  For example start at 10*bottom? Or at least
refuse to stop when func(d[1]0==0?

Installing these two ideas....No joy, the failure pattern persists.
Can HINT=1.0 be the source of the alternating failures & successes?
Should not matter... But it does: HINT=0.01 solves this problem. 
Why?? Of the alternating success/failures, a success should have
exitted the d[1] search loop, yet it does not exit.  

I find that if the grow/shrink factor in the alternating d[1] search
is 2.0 then it is easy to miss a good window where the sign changes.
TORfail00.RAY first ray is of this kind.  A factor GROW=2.0 is too big
but a factor GROW=1.1 works Ok here.  

Having sufficient finesse makes it desirable to use HINT to properly
place d[0] and d[1] in the likely vicinity of a root.  Else must raise
MAXIT to 1000.  Note 1.1^100 is only 13000 and 1.1^200 is 1.8E8 and
1.1^300 is 2.6e12, more than enough. 

So for now: BASE=1.10, MAXIT=300, d[0] starts at hint (currently 1e-3
as determined by caller and passed), d[0] can alternately try larger
and smaller factors GROW if func(hint) happens to be nearly zero;
then d[1] starts at d[0] alternating by BASE until sign changes or
iterr>MAXIT. 

Seems to work.  At least the Sholl file tests run OK.

Add on capability:  global double dOsize field within
DMF, available for setting numerical solver step hint.




15-18 August 2008  A65  New bug pasting text
Discovered a bug in pasting text into tables.
Dependent on hyphens in the ruler line, hence is
a problem in EPanel::vLoadString().

=======With Editor::mode=TABS==========
If the ruler line has 2 or more hangover hyphens (beyond the final colon)
then all is OK;  but if there are 0 or 1 hangover hyphens, then
copy & paste loses the final colon.
Then, with missing colons, subsequent multiline copy+pastes
lose a the final field entry and the CR, making a double length record
that lacks the terminal fields.  

========With Editor::mode=NativeColons============
No bug.  Must be related to terminal colon OK vs terminal tab=NG.

Redesign of the method vLoadString to simplify the adding
of characters to the table, dependent on jCaret and on the status
of the incoming string being CSVTAB vs native colons. 

It works!  Bug is gone, logic is cleaner.  
Semicolons are now allowed as separators also. 

Tiny bug remains: when pasting entire spreadsheet -> B4JE,
with a requested FieldWidth=10, the first field width = 11,
other fields are 10.  Sounds like an error in formulaTagPos()
and it is, see \java\periodTags for full explanation.
Fixed using (=((i+p)/p)*p -1 rather than ((i+p-1)/p)*p. 

Big bug:  in TABs mode, internal copy+paste to the bottom of
a table is apparently OK, but into the middle of a table
introduces extra unwanted blank lines, as if the inserter	
is being called more than once.  Often: two unwanted blank lines.
-0.361 	0.208  	4	
-0.361 	0.208  	4	
-0.361 	0.208  	4	
  0.000	  0.417	3	
Yikes it is intermittent!  Sometimes no unwanted blank lines. 
 -0.361	  0.208	4	
 -0.361	  0.208	4	
 -0.361	  0.208	4	
[Verified: No trouble in native mode.]
I think the trouble is in the paste not in the copy, because
when I've pasted making unwanted double blank lines, then
pasting the same clipboard into this text makes no blank lines.

aaaaa:
aaaaa:

Hmmm, if the string being loaded has no terminal CR or LF,
then the code must push down one line without this helper.
But if the string includes a terminal CR andor LF, then
this terminal thingy has to be ignored.   The pushing
down should result from starting nonblank chars on a new
line, where i=0, not from reading CRLFs. 

Hmmm no this is not the problem: copying AAAAA + LF, 
vs plain AAAAA, leads to distinct incoming strings yet proper
formatted output, always pushing down one line as required
to fit the AAAAA never any extra lines. 

And when the paste messes up with extra blank lines,
the byte monitor shows nothing unusual about the incoming string.
It terminates in a colon (as it should) plus a 0A = LF char,
as it should. 

Sure 'nuff, three pushings down not one. Why do I get three
pushings down? not one?   Maybe it is the use of "break" to terminate
each loop task.  Perhaps "break" causes a new cycle, poorly tested
for jCaret??  All three pushings have jCaret=7; yet k=0,1,2;  
---  that is to say, jCaret has not incremented yet k has.
As if the first few characters force new pushdowns!
Strange! since after pasting some chars into the table, we expect
that k will have incremented quite a lot, maybe 5 or ten units??
All the pushing down occurs before CharWriter gets into gear,
and when k=0,1,2 while i=0. 

It is as if the skipping introductory blanks, which fail to
advance i, allows further pushdowns.    Perhaps those initial
blanks in the incoming string allow repeated pushdowns?
YES that's it.  Indicates that we don't just want pushdowns to
happen if i==0, but rather when a new char is actually written in
the new line.   So the pushdown should occur when a good writing
char is detected **and** i=0. 

So.... move the pushdown out of the main loop, into the switch()
situation where an actual written char is detected.  Because, only
then, do we have the authority to pushdown. 

    // DELAYED PUSHDOWN PRINCIPLE: allow pushdown *only* when 
    // there is a displayable char presents itself for a new line.

^^Works! amazing.   MORE TESTING IS MANDATORY. RELEASE 0.65 FOR TEST.
IN PARTICULAR NEEDS MORE SPREADSHEET I/O TESTING. 

For the two competing versions, I like the Concept Two
better because of its clean explicit dependence on its
bReqNewLine flag, also has a bit better range checking. 
Concept One has no flag and instead uses the implicit
condition i==0 (column of charTable==0) which could occur
due to conditions other than CR/LF:  if an incoming
string has some nonprinting chars in it (NULL for example)
then could get into the situation i==0 while k>0, which would
be interpreted as having found a CR/LF earlier, which would
force an improper jCaret++.  The explicit management of the
CR/LF and the i=0 avoids any misunderstanding. 

^^ Tests OK on PC and on Mac: works nicely; copy/cut/paste OK
even for repeated cuts & pastes.  Mac checks out Ok on
exchange with TextEdit and with Mac:Excel.  PC ditto. 



15 August 12008  A64-A65   Crippled freebie?

Here's a way to cripple a freely downloadable trial version
for all users to try out:  remove all the output routines.
No file out; no copy to clipboard; only screen bitmap copy
will work. However permit all input functions.  

With a crippled freebie, there could be some useful links
built into the SS website:

1.  free Java tester
2.  free download B4JE DEMO edition
3.  free download of B4MAN user manual
4.  free downloads of example data files

Urge all prospective users to try out the freebies
and be sure this product meets their needs, before ordering.
No other guarantees or warranties implied.  But wow. 

ProGuard is very effective at omitting unreachable code based
on a declared global constant.  For example, if DMF contains
a constructor clause  "if(DEMO) return;"  then the ProGuard
.jar file shrinks to 10kBytes when DEMO=true.  

I can safely assume that distributed demos will not contain the
code needed to restore a demo to full power.  Thanks to ProGuard
the class components & methods will be absent. 

Putting demo blockers into FileOut() routines will be easy.

Putting demo blockers into the clipboard transfer mechanism
should use the concept of the local clipboard, constructed
& maintained locally, as distinct from the system clipboard.
Details: See Horstmann & Cornell V.2 pp.722-729 and example
7-18 where local objects are transferred.  Basic idea is,
instead of 

  Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();

use a locally created one:

  Clipboard clipboard = new Clipboard("local"); 

This switch will be needed three places within EJIF.java:
  doCut(),  doCopy(),  doPasteInto(). 
One key difference:  the system clipboard can be accessed whenever
without needing a constructor since it already exists.
The local clipboard has to be created once, and kept around
as a static entity, for subsequent usage. 

So a redesign is indicated:  always keep a local reference
to the clipboard.  If this is ever found to be null, then grab
the system clipboard and stash a reference to it if allowed, 
or if (DEMO) construct a local clipboard (once) at startup. 

Works! this is installed into EJIF. 

16 August 2008  A65  Completion of DEMO permission system.
FileOutputs, and MainMenuGraying, are now controlled by DEMO constant. 
^^Works; more testing is definitely warranted. 





14 August 2008  A64
  Added an MPlot feature showing average of the nonzero rms values. 

13 August 2008  A64   Two little changes
  New labels for Startup File buttons.
  Changed fwe() to give 9 char strings not 10 char strings.
  This should look better in cramped environments such as MultiPlot.
  Cost: one digit of precision; 3 digits was four. 


11 August 2008  A64    Alternative to .RAY tables?

Instead of 600 rays, many users would prefer to have
two tables: a 30 ray pupil table and a 20 ray field table.
Can this alternative be implemented?

Easy to allow two more table types .PUP and .FLD that
together multiply and create an internal .RAY table and
permit the computation to proceed.  

However now there is no direct way to indicate which rays fail.
Perhaps a pop-up dialog could display a running score of
the ray success statistics.   This dialog would parallel the
InOut report -- indeed it might simply be the InOut report. 

[Q: should the InOut report pop up always? even if no goals?
in order to display the ray success statistic? ]

Also pupils are often internal, not located at the X0 Y0 plane,
and pupil filling is important when quantitative aberration
RMSs are to be computed.  So, .PUP is a misnomer; better names
would be .XYZ and .UVW or some such and emphasize that this
is merely a division of the .RAY into two components that will
be multiplied, and is not necessarily a pupil vs field distinction
except in the simpler cases.  

How to implement: how are goals to be specified?
If there is an xgoal and a ygoal for each UVW, then goals could
be set there, applying implicitly to all pupil rays in XYZ.
Goals can have question marks if they are to float, or colon tags
if they are prespecified. 



7 August 2008   A64  rare paste bug  SNH
Rarely, when I paste a hunk of table that has some double or
triple colon groups, the pasted records have a longer-than-usual
length: some of the final chars in each line are repeated. 
This seems to be dependent on the ruler line having some
trailing hyphens vs no trailing hyphens, as if the ruler can
influence the string length of the copied records.  ??



7 August 2008   A64
On MultiPlot it would be good to offer two available readouts
of spot blur:  RMS and RSS.  Reason: Zemax appears to offer
only RMS and (worse) it is actually RSS.  Having both flavors
available will remind the user of the distinction and serve
to eliminate the confusion. 
^^DONE. Works.  Ch15 graphic examples in B4Man updated too. 


31 July 2008  A63
Oddly, **still* find that Layout comes up with too much
magnification.  Thought I fixed that.  

Also, I find that the terminal Layout redraw (the 
optics draw following the rays, not preceding the
rays) does not appear to use fat lines but only
thin lines -- makes the artwork fail to convey
the 3D shadowing.  I tried changing the method
doFinishArt() to start with HEAVYLINE rather than
the previous LIGHTLINE but same behavior.  Ah well.


10 July 2008  A63: Upon answering Charles Olmstead's
question about which quadratic root is default, and how
to specify nearside vs farside vs nearest-to-vertex,
and the related question of hemiquadratic vs full quadratic,
it's time to review those options & specifications and then
rewrite the page "Intercept Solution Choice" (p.130 of the
old B4 manual) to make the alternatives clear and easy to
specify. 
**FINDINGS**
  Code review shows clean specification of quadratic intercept:
  default = root nearer vertex
  ">" = overrides this, gives longer ray segment 
  "<" = overrides this, gives shorter ray segment.
In the B4JE manual...



10 July 2008  A63: Layout automatic diameters are too small
Manual Diam specification are drawn properly, but when the
Diameters are left unspecified, they are calculated within
Layout and drawn -- but always too small, approx 70% of the
size needed.  Looks weird because the rays are drawn properly
and reflect/refract off of vacuum!
**FINDINGS**
  if all the rays have Y0=0 it is OK
  and if all the rays have X0=0 it is OK
  but if the rays have both X0 and Y0 nonzero, Diams are wrong.
As if using max(max(absX), max(absY)) rather than max(sqrt(x^2+y^2). 
Square surfaces: Layout is OK.  Round is bad. 
ERROR occurs at LayoutPanel line 415 where the max() appears.
I modified it to use a new local method isOuterRect(j) and branch 
between two formulas: the max() or the sqrt(). 
FIXED.

Another complaint: these derived Diameters aren't used
in choosing a display scale.  Often the Layouts are somewhat
too magnified at startup.  Maybe they hinge only on the rays
not on the Optics?  Oddly, boosting the value of EXTRAROOM,
and putting huge declared Diameters in place, does not influence
the scale of the generated graphic. 
AHA faulty logic in the code that generates the scale factors.
Enlargements were computed in lab frame but never conveyed to screen frame.
I modified the computation in LayoutPanel:setScaleFactors(). 
Now, the envelope Diameters are applied in screen frame, after the
lab frame centers have been converted. 
FIXED; WORKS; EXTRAROOM=1.2 is appropriate. 







4 July 2008  A63: failure to reliably store Current Editor Startup File names.
First try worked fine.  Second change failed, retains the first change
but not the second change.  NOT REPRODUCIBLE -- just now, eight successive
changes in file were properly followed using Current Editor. 

2 July A63:  Editor "Paste" garbage bug
Sometimes, pasting a block of records causes duplicate record fragments
to appear beyond the proper end of the pasted items, as if the record
block is either corrupted when being copied to the clipboard, or being
corrupted being copied from clipboard to the edit buffer. 
Attack: divide and conquer.
Findings: 
With Options:Editors:Mode=Tabs
  On CASS.RAY, copy + paste shows final colons missing
  in the pasted records; no garbage. This must mean that
  The final tab is either absent or ignored. 
  Pasting into Notepad shows all colons missing; probably tabs.
With Options:Editors:Mode=Colons
  On CASS.RAY copy + paste shows proper records, no garbage.
  On OffAx15f.RAY, no garbage. 
  On OffAx14a.RAY, with OffAx14a.OPT also loaded, no garbage. 
  A dozen cuts & pastes, no trouble. 
Phooey, unreproducible. 



1 July:  Options:Layout "Which Axis Vertical" function is
broken; always is +X.  Other functions are OK. 
^^FIXED it was a bad array index in Options::Layout. 
Also I moved getLayoutVertAxis() routine into LayoutPanel.java.


30 June A63:  In MultiPlot, Zfinal is unrecognized when parsed
by a virgin session that has never seen any optic, but is OK when 
an 11-surface optic is loaded. Z11 is okay and works properly
and no complaint even from a virgin session.  It is as if
"final" means -1 or some illegal value when no table has been
loaded, yet retains its value after having seen a table. 
REASON must lie within MPlotPanel parseStepVar() routine. 
^^Yes, parseStepVar() assumes that it is running with a .OPT
file already loaded and parsed, so that it can use nsurfs
value when it detects "final".  But really it should stash
a trigger "9999" or some such, requesting a final=nsurfs
lookup later at run time not at parse time.  
^^FIXED: parseStepVar() is now run-time-only, not used in
the preliminary parsing.  It properly uses nsurfs when it sees 
"final" which is OK at run time because nsurfs is known then.

SIMILAR potential problem in MultiPlot getUOwarning() uses nsurfs. 
^^FIXED: getUOwarning() is now static and handles both the
plotVars and the stepVars. 



BUG the dot style control works OK on Plot2D but fails on Plot3D. 
It is as if the fat line choice, used for coordinate axes,
is also allowed to continue into the ray spot work. ??
^^FIXED now linestyle is LIGHTLINE throughout Plot3D.

29 June A63 Constant UO strings rewrite using 3D array: seems OK!.

Crashes:  Mouse zoom after switching the zoom wheel polarity:
sometimes triggers a IndexOutOfBoundsException, with 
  java.util.ArrayList.RangeCheck()  "get()" method
  at GPanel.getUserSlope line 720, 
  from GPanel manageZoomIn line 753.  
COULD NOT REPRODUCE THIS.
^^FIXED: code inspection however reveals the blunder:

    private double getUserSlope()  // ZoomIn limiter
    {
        if (myTechList==null)
          return 1.0; 
        int reach = Math.max(myTechList.size(), 5); 
        for (int i=0; i<reach; i++)
        {
            XYZO myXYZO = (XYZO) myTechList.get(i); 
            if (myXYZO.getO() == USERSLOPES)
              return myXYZO.getX(); 
        }
        return 1.0; 
    }

Here, "reach" will never be less than 5 and the loop will always
try getting the first five elements of myTechList, even if there
are not five elements present.  Correcting this by limiting the
search to no more than the first five:

      int reach = Math.min(myTechList.size(), 5); 

Now it searches the first five elements only if they are present. 

----------

MultiPlot is broken: no spots.  Parsing variables???
On manual box size, no spots.  On auto box size, 5E-14 as if empty. 
The other UOs work OK: black bkg, show RMS, etc are functional. 
^^FIXED is was poor design of the getUOwarning() routine which
depended on current nsurfs.  

-----------------

Plot3D spot choice error:
  Always draws big dots on table rays (ignores UO dot choice)
  Always draws little dots on random rays (ignores UO dot choice)
  Always resets UO dot choice to "DOT" ignoring UO preference. 
  Other UOs work OK. 
^^FIXED there was an array index error in VertRadioBox().
Still another error: Plot3D starts out in fat line mode,
changes to thin line for random rays.  Should always be thin. 
^^FIXED; now uses thin lines exclusively. 

-------------------

Histo1D UO is visually confusing: the MIN and MAX ought to become
visually connected to, and subservient to, the Manual(.) button.
Presently they are outside the bounds box and appear to be unrelated. 
They work OK, just looks confusing. 
^^FIXED 

-----------------------

Histo2D (like 1D) the manual bounds aren't visually associated
with the manual bounds button.  But they work. 
^^BETTER.

-------------------

Editors::show file paths fails to show anything. 
However the other UOs work OK.
^^FIXED needed myFile.getPath() vs myFile.getName().
Both methods include the extension. 





A63  June 27 2008 -------- REORGANIZING USER OPTIONS--------

Renaming DeskMenuFrame as DMF to reduce the typing. 

Is it practical to implement the three dimensional UO[][][]
scheme wherein the fixed strings in Constants.java
are addressable by group, member, and 0=title, 1=factorydefault?
Hope is to make the installation of new user options simpler than
the traditional one-dimensional long list.  

The benefit would be to group all related UO constants.
Traditionally, these constants are spread out over big blocks:
200 Macro defs, then 200 titles, then 200 factory strings. 
These are troubling to keep synchronized. 

The user variable strings cannot be a ragged right 2D array.
Variables have to be allocated as a 2D block.  This may require
a diagnostic checker to run, before allocating sUser[][]:

    String sUser[][]; 
    int maxmember = 0, nItems = 0; 
    for (int i=0; i<NUOGROUPS; i++)
    {
        nItems += UO[i].length;
        if (maxmember < UO[i].length)
          maxmember = UO[i].length;
    } 
    sUser = new String[NGROUPS][maxmember]; 
    for (int i=0; i<NUOGROUPS; i++)
      for (int j=0; j<maxmember; j++)
        sUser[i][j] = new String(""); 

Traditional titles:  DeskMenuFrame.reg.uoNames[base+i]

Getting the UOtitle does not require a getXX() method
because the UO[][][] are static final strings in Constants.java;

    UO[igroup][member][0]. 

Getting the factory UOdefault ditto: 

    UO[igroup][member][1].

Setting and getting the user preference strings sUser[][]
is equally easy if they are members of a public static array
located within DMF or in DMF.reg:

    DMF.sUser[igroup][member] = sNewPreference;
or
    DMF.sUser[igroup][member] = UO[igroup][member][1];
and
    sCurrentPreference = DMF.sUser[igroup][member]; 
     
How to convert the one-dimensional file B4OPTIONS.TXT
to and from the two-dimensional array sUser[][]?
Easy, if the i/o is clocked by the 2D format plan
defined by the array UO[][][]:

Writing B4OPTIONS.TXT from sUser:

    for (int i=0; i<NUOGROUPS; i++)
      for (int j=0; j<UO[i].length; j++)
        file.out.println(UO[i][j][0] + "|" + DMF.sUser[i][j]); 

Reading B4OPTIONS.TXT into sUser:

    boolean bOK = true; 
    int   nGoodItems = 0; 
    for (int i=0; i<NUOGROUPS; i++)
      for (int j=0; j<UO[i].length; j++)
      {
          sUser[i][j] = "";
          String s = new String(""); 
          String t = new String("");
          String u = new String("");
          if (bOK)
          {
              s = readLine(fileio); 
              if (s.length() < 1)
                bOK = false; 
          }
          if (bOK)
          {
              t = getField(0, s); 
              if (!t.equals(UO[i][j][0])
                bOK = false; 
          }
          if (bOK)
          {
              nGoodItems++; 
              DMF.sUser[i][j] = getField(1, readLine(io)); 
          }
      }
      if (nGoodItems != NUO


This plan requires that global button identifiers be replaced
with local numbers.  Instead of successive numbers for
UO_LAY_PX, UO_LAY_MX, etc, number them 0, 1, 2....

    static public int getLayoutVaxis()
    {
        if ("T".equals(DMF.reg.getss(UO_LAYOUT, 4)))
          return 0; 
        if ("T".equals(DMF.reg.getss(UO_LAYOUT, 5)))
          return 1; 
        if ("T".equals(DMF.reg.getss(UO_LAYOUT, 6)))
          return 2; 
        if ("T".equals(DMF.reg.getss(UO_LAYOUT, 7)))
          return 3; 
        if ("T".equals(DMF.reg.getss(UO_LAYOUT, 8)))
          return 4; 
        if ("T".equals(DMF.reg.getss(UO_LAYOUT, 9)))
          return 5; 
        return 0; 
    }

or more simply...

    static public int getLayoutVaxis()
    // For use by LayoutPanel; returns 0....5
    {
        int PX=4; 
        for (int i=0; i<6; i++)
          if ("T".equals(DMF.reg.getuo(UO_LAYOUT, i+PX)))
            return i;
        return 0;
    }


-----------------



A62 Bug: FIX THIS:   24 June 2008: the StartFiles option
fails to update when I choose "Current Editor Files" --
it retains the old filenames not the current names if
these files have been autoloaded.

But if you load the files by hand (drag & drop or dialog)
then the "Current Editor Files" function works OK. 

^SEEMS NOW TO BE FIXED -- keep watch on this.




A62 Bug: FIX THIS:  28 May 2008: Often, a mirror with unspecified Diam
is drawn a bit smaller than necessary.  Yet it reflects
ok.  Problem is therefore within Layout. 

----------------------------


26 May 2008:  Excessive string length in Graphic Options Wheel:
looks OK on PC but overruns allowed length on Mac.  Changed the
radio button descriptor (Constants.java) from "Zoom in: pull mousewheel?"
to the simpler "Zoom in: pull wheel?" and changed box title from "Wheel"
to "Mouse Wheel".    Also changed "Window size, pixels" into
"Initial window size, pixels". 
^^FIXED. Much improved.

26 May 2008:  A62, needs usable CenterValue for MultiPlot.
^^Installed; works. Added warnings about blank=default. 


18 May 2008:  In A62, explore evaluating aberrations.
Use ZernXX and some optical path distorter OTDISTORT
to solve for defocus, spherical, coma, astig, etc.
A distorter has to be placed at a pupil to make any sense.

Test OTDISTORT on normal and nonnormal rays; 
write a paragraph describing how it converts its
surface deviation into OPATH whereas other surfaces
use their parameters to move the surface in SPACE. 

Write an explanation about general pupil issues: 

  What does coma mean when pupil is not a filled circle?  
  What do ZernXX mean, when pupil is not a filled circle?  

Evaluate with some textbook lens or mirror whose Seidel
aberrations are well known, show that things work. 

Do a new chapter on Aberrations or at least explain Zernikes. 

I am profoundly troubled by OTDISTORT because it is so nonphysical.
It makes the ray directions non variational. It's like the retroreflector
only worse: it introduces a discontinuity in OPD without a discontinuity
in distance. 

A better way: use ZernXX only on real surfaces to modify them. 
This way they modify reality, and deliver physically correct solutions. 



13 May 2008   A62:  please revisit OPD theory, practice, testing. 



Cinco de Mayo  A62: MultiPlot

Installed a field for user's center value for X, Y
parameter range, with blank (unspecified) option to
gather & use midrange of ray table. 

Q: MPlotPanel appears to lack code allowing surfaces
10, 11, 12, .... to be diagnosed?
^^ No! It's OK! True that only the first two chars are
needed to distinguish Otable from Rtable, but the
identifier of surfaces gets the full string. 

Q: In MPlotPanel::doParse() there is a piece of mischief:

         if (nx > 1)....

so that when nx=1 (single plot) the step var does not get parsed.
This is OK when the existing ray table gives a single spot diagram.
However if we are to be able to deviate its center, we have to know
the identity of the variable being deviated, even if not stepped. 

So introducing the new center value feature makes it important to 
discover ijx[] and ijy[] which convey attribs & surface (0=raystart, 
1=surf deviation). 

Yet: for 1-D multi plots, nice to allow all blanks for the
second variable, as in the Manual's example.   Let's continue
to allow all blanks, but posit the .RAY = single spot diagram. 



FIX THIS IN A63.....
3 May 2008   A62 Prospective code for UO User Options

Rather than have the options fields being one linear list,
it would be easier to manage them if we adopted a two dim array.
2D arrays can be ragged right, so there is no need for all the
option dialogs to share a common number of strings & defaults.
To accomplish this changeover, make the option strings
a three dimensional ragged array of strings:
  first index = group 0...15
  second index = item 0..ragged
  third index = 0 or 1 = {title, value}; 

In Constants: declare option index then item index:
    static final int UO_IO = 0;
    static final int UO_IO_RMS = 0; 
    
    static final int UO_LAY = 1; 
    static final int UO_LAY_ELEV = 0; 
    static final int UO_LAY_AZIM = 1; 
etc,
then declare 
  static final String[][][] UO = {
  {
     // group 0, InOut:
     {"Show RMS when goals exist", "T"},
  },
  {
     // group 1, Layout:
     {"View Elevation", "33.0"}, 
     {"View Azimuth",   "45.0"}, 
     ...
  }, .......
};

======ALTERNATELY MAYBE USE "\" TO SEPARATE UOTITLE & UOFACTORY======

    "Show RMS when goals exist\T", 

This way to write Factory need only write single string as
no need to assemble with a demarcation symbol.
Parser must be set up to recognize "\" as field separator. 
However then cannot directly access UOTITLE as a free String;
instead have to access it via a String valued function(). 

For saving output, do this:

    for (int i=0; i<NGROUPS; i++)
      for (int j=0; j<UO[i].length; j++) 
        file.out.println(UO[i][j][0] + "\" + pref[i][j]); 

And for input, do this:

    int count = 0; 
    for (int i=0; i<NGROUPS; i++)
      for (int j=0; j<UO[i].length; j++) 
      {
          String s; 
          file.in.readln(s); 
          prefs[i][j] = parsePrefPortion(s); 
          count++; 
      }
    if (count != NPREFS)
      setFactoryPrefs();  // writes UO.  

To discover UO_COUNT in Registry.java, count UO strings:

    int uo_count = 0; 
    for (int i=0; i<NGROUPS; i++)
      for (int j=0; j<UO[i].length; j++)
        uo_count++;


------------------------------

1 May 2008  A62
In the manual, emphasize that to use MultiPlot,
first step is to clean up the .RAY table so that
there is only one field point represented: 
reduce the number of table rays (U.L.Corner)
so that the ray list is just one field point,
which will become the center of the MultiPlot. 

^^ Or: have a programmable center?  
^^ And: use only the pupil data from .RAY?  (How?)

------------------

New feature:  when MultiPlot runs, it should gather
its Hcenter and Vcenter points from the average,
or midpoints of the extrema, of all the rays in .RAY
allowing any typical .RAY file to serve as its
plot basis.  Present problem is cannot tolerate
a .RAY file with a range of starting values.  

How about a selectable UserSpecified [xx] center, or
a TableDriven center?  A blank field => use Table center,
or a nonblank field => use this value. 

-----------------------

New feature: when specifying StartupFiles, have a button
that grabs the current file titles and makes them the
startup files. 

----------------------------------


28 April 2008
WFE11 cannot implement a proper Diameter.
It must rely on an auxiliary Iris.
This may cause a difference in the way edge rays
are censored.  

Changed WFE11, giving a proper in-surface Diameter. 
Still gives 621 rays all U0, unlike B4JErev62 which gives
625 rays when U0>6mrad. 



24 April 2008   A62

How to make progress on this business of WFE?
Two approaches are obvious:

  1. Single ray.  Start one ray and gather full 16-digit results.
     This would detect any optical differences in the test.

  2. Failed rays.  WFE11 always gets 621 rays; B4JE=621 or 625.
     This would explain any pupil differences in the test. 

Exploring #2 in B4JE: 
U0=0.004 gets 621 good rays.
First good ray group in the table has three rays.
X0=-0.93333;  Y0=-0.0667, 0.0, +0.0667.

In contrast U0=0.008 gets 625 good rays.
First good ray group in the table has five rays.
X0=-0.93333;  Y0=-0.13333, -0.06667, 0., ....
Ray #45 is the first changeling:
  Diam1 at U0=0.004, OK at U0=0.008.
This situation is not changed by allowing X0, Y0 to be
regenerated with 12 digits. The only way to have Dia1
is to have the 

Notice that the B4JE ray generator is constrained to filling
in text with a predefined column width, hence not full
double precision numbers but rather five digits worth.
In contrast, WFE11 has no text interface and fills in
full double precision ray starts.  


-------------------------------

MultiField Copy Down:  
  1. group the fields making them adjacent
  2. remove the colons separating them
  3. AltDownArrow to copy the block downward
  4. replace the colons. 

-----------------------------

22 April 2008  A62

Plan: Direct comparo, WFE11 vs B4JErev62
WFE11 does a square grid of NxN rays.
B4JE can also do a square grid of rays.
Let's set up a common set of ray starts and run the WFE
diagnostics on both platforms, and search for discrepancies.
WFE11 used a grid of 100 x 100 intervals of 2cm, 101x101=10201 rays.
This is too many for B4JE, limited to 999.

Let's do 31x31=961 rays, space=2m/30= 6.666667cm.
x=-1.00+i/15.0; i=0; i<=30. 
Make sure that OuterDiams=1.88 and InnerDiams=0. 

WFE11                   RMSWFE       fitA        fitB        fitC
--------------------------------------------------------------------
mRad =0   nCount=621   7.406E-08  -2.679E-07  -4.376E-16  -7.677E-16
mRad =1   nCount=621   7.276E-08  -2.524E-07   3.502E-07  -3.728E-16
mRad =2   nCount=621   6.895E-08  -2.071E-07   6.879E-07  -3.089E-17
mRad =3   nCount=621   6.296E-08  -1.348E-07   1.000E-06   4.162E-18
mRad =4   nCount=621   5.536E-08  -4.062E-08   1.275E-06   4.390E-16
mRad =5   nCount=621   4.707E-08   6.852E-08   1.497E-06   6.110E-16
mRad =6   nCount=621   3.940E-08   1.835E-07   1.653E-06  -1.649E-15
mRad =7   nCount=621   3.407E-08   2.929E-07   1.729E-06   9.855E-16
mRad =8   nCount=621   3.231E-08   3.832E-07   1.708E-06  -8.607E-16
mRad =9   nCount=621   3.343E-08   4.383E-07   1.573E-06   4.796E-16
mRad =10  nCount=621   3.503E-08   4.398E-07   1.307E-06  -7.504E-16
mRad =11  nCount=621   3.472E-08   3.663E-07   8.877E-07   2.628E-16
mRad =12  nCount=621   3.148E-08   1.938E-07   2.952E-07  -7.812E-16
mRad =13  nCount=621   2.849E-08  -1.048E-07  -4.942E-07  -5.624E-16
mRad =14  nCount=621   3.819E-08  -5.599E-07  -1.506E-06   7.224E-16
mRad =15  nCount=621   6.836E-08  -1.205E-06  -2.769E-06   4.162E-16
mRad =16  nCount=621   1.169E-07  -2.079E-06  -4.313E-06   6.039E-16
mRad =17  nCount=621   1.838E-07  -3.221E-06  -6.171E-06   2.012E-16
--------------------------------------------------------------------

B4JEr62                 RMSWFE       fitA        fitB        fitC
--------------------------------------------------------------------
mRad =0   nCount=621   7.400E-08  -3.128E-15  -1.255E-23  -7.243E-16
mRad =1   nCount=621   7.270E-08  +1.006E-08   2.083E-24  -3.502E-07
mRad =2   nCount=621   6.889E-08   3.948E-08   3.897E-24  -6.879E-07
mRad =3   nCount=621   6.291E-08   8.603E-08  -1.747E-23  -1.000E-06
mRad =4   nCount=621   5.532E-08   1.459E-07   4.253E-23  -1.275E-06
mRad =5   nCount=623   4.698E-08   2.154E-07  -6.787E-23  -1.507E-06
mRad =6   nCount=623   3.931E-08   2.849E-07  -7.766E-23  -1.665E-06
mRad =7   nCount=625   3.398E-08   3.472E-07  -3.711E-22  -1.744E-06
mRad =8   nCount=625   3.237E-08   3.908E-07  -1.324E-22  -1.724E-06
mRad =9   nCount=625   3.362E-08   4.037E-07  -2.720E-22  -1.588E-06
mRad =10  nCount=625   3.528E-08   3.711E-07   2.729E-23  -1.320E-06
mRad =11  nCount=625   3.497E-08   2.764E-07   1.246E-23  -8.983E-07
mRad =12  nCount=625   3.167E-08   1.006E-07  -6.326E-23  -3.012E-07
mRad =13  nCount=625   2.860E-08  -1.781E-07  -1.717E-22   4.948E-07
mRad =14  nCount=625   3.838E-08  -5.841E-07   2.708E-22   1.516E-06
mRad =15  nCount=625   6.881E-08  -1.145E-06   2.044E-22   2.789E-06
mRad =16  nCount=625   1.177E-07  -1.890E-06  -8.522E-22   4.348E-06
mRad =17  nCount=625   1.851E-07  -2.855E-6   -1.143E-21   6.223E-06
---------------------------------------------------------------------




21 April 2008  A62
Comparing B4JEr62 against WFE11 in \Java\WFE\WFE11
Using the test file CSR188c which has been a concern.

1. The WFE vs OffAxis angle curves disagree at small angles.

         0deg    0.1     0.2     0.3     0.4    0.47    0.8     0.92deg
         0mrad   1.745  3.49    5.235    6.98   8.20    14mr    16.0558 
WFE11    63nm    60nm    52nm    42nm    35nm   34nm    41nm    >120nm
B4JEr62  77.29   73.23   62.09   47.32   35.84  33.87   40.13   124.9nm
A          0   +0.0316  +0.119  +0.241  +0.359  +0.412  +0.589  -1.98E-6
B          0      0       0       0        0      0       0       0
C          0   -0.632   -1.193  -1.614  -1.814  -1.778  +1.528  +4.56E-6

2. The ABC fit parameters disagree at 0.92deg off axis:

           A           B           C
WFE11   -2.64E-6    -5.74e-6       0
B4JEr62 -1.98E-6       0        +4.54E-6

This disagreement is disturbing since the code is "the same" except
for the environment (the pupil finder; also the final coordinate
system which is local in WFE11 and global in B4JE).  I shall install some
diagnostics about pupil finding. Also will install some WFE11 diagnostics
giving ABC at 0.1, 0.2...degrees off axis, or better 1,2,3,4,5mrad. 


From WFE11:  nCount=5724 rays (not enough?)
mrad   A        B       C
----------------------------
0    -0.321     0       0E-6
1    -0.300   +0.528    0
2    -0.237   +1.033    0
3    -0.136   +1.499    0
4    -0.000   +1.908    0
5    +0.145   +2.239    0
6    +0.303   +2.472    0
7    +0.452   +2.583    0
8    +0.572   +2.550    0
9    +0.642   +2.347    0

Yikes: WFE11 has a central obstruction of 0.8 meters!
This makes an obvious incompatibility, and explains why
the large on-axis (centrally peaked) WFE curve does not
appear in WFE11 yet *does* appear in B4JEr62.  Idiot error. 

Repeating WFE11 without any central obstruction,
should be good comparo since the 919 rays are smoothly distributed
over the entrance pupil (hex grid)  and the WFE11 rays should be
comparably well distributed (square grid).  

         0deg    0.1     0.2     0.3     0.4    0.47    0.8     0.92deg
         0mrad   1.745  3.49    5.235    6.98   8.20    14mr    16.0558 
WFE11    75nm    71nm   60nm     46nm    35nm   33nm    39nm    >100nm

compare old B4, Diam=1.885, RrayGen=0.93 DrayGen=1.86
B4JEr62  77.29   73.23   62.09   47.32   35.84  33.87   40.13   124.9nm
B4 A       0   +0.0316  +0.119  +0.241  +0.359  +0.412  +0.589  -1.98E-6
B4 B       0      0       0       0        0      0       0       0
B4 C       0   -0.632   -1.193  -1.614  -1.814  -1.778  +1.528  +4.56E-6

However! if RrayGen=0.94 rather than 0.93, 
then 35.84 -> 37.02nm at 6.98mrad, continuing to get all 919 rays. 
   B4: A=+0.368E-6
   B4: B=0
   B4: C=-1.857E-6
which sorta resembles WFE11 but with B & C swapped & reversed in sign.... 

From WFE11:  nCount=6977 rays (enough; Diam=1.885)
mrad   A        B       C
----------------------------
0    -0.271     0       0E-6
1    -0.256   +0.354    0
2    -0.210   +0.696    0
3    -0.137   +1.013    0
4    -0.041   +1.291    0
5    +0.069   +1.516    0
6    +0.186   +1.676    0
7    +0.297   +1.753    0
8    +0.389   +1.734    0
9    +0.445   +1.599    0
10   +0.448   +1.332    0
11   +0.375   +0.912    0
12   +0.202   +0.316    0
13   -0.098   -0.479    0
14   -0.557   -1.499    0
15   -1.207   -2.771    0
16   -2.088   -4.327    0
17   -3.240   -6.200    0
-----------------------------

Can the remaining discrepancy come from different size pupil illum?
WFE11 uses a square grid, -1.0 meters to +1.0 meters, should nicely
overfill a 1.88m aperture. 

But! WFE11 specifies an aperture of 1.885 meters.  Why??
Setting this to 1.88 meters exactly....hardly any change. 

         0deg    0.1     0.2     0.3     0.4    0.47    0.8     0.92deg
         0mrad   1.745  3.49    5.235    6.98   8.20    14mr    16.0558 
WFE11    75nm    70nm   59nm     45nm    34nm   33nm    39nm    >100nm

compare old B4:
B4JEr62  77.29   73.23   62.09   47.32   35.84  33.87   40.13   124.9nm
B4 A       0   +0.0316  +0.119  +0.241  +0.359  +0.412  +0.589  -1.98E-6
B4 B       0      0       0       0        0      0       0       0
B4 C       0   -0.632   -1.193  -1.614  -1.814  -1.778  +1.528  +4.56E-6


The key to this on-axis discrepancy *has* to be the pupil illumination, since
on axis, the B & C coefficients cannot affect the computed WFEs, being zero.
The problem with B4JE is that I am using a hex grid which is crudely quantized
in zone.  Perhaps better is to illuminate it with a square grid, say 30x30,
with one meter radius?  Trying this in CSR188c.RAY gives only 592 rays,

U0mrad   B4(1.885)   WFE11
----------------------------
0.0       75.72nm     75nm
1.745     71.74nm     70nm
3.49      60.79nm     59nm
5.236     46.29nm     45nm
6.98      35.05nm     34nm
----------------------------

I would say this agreement is getting acceptable. 
Surely within the 1-2% range that has been described by



















7 April 2008  A62  
Here's a way to find the pupil: the "AutoKluge" approach.
Fact: two coords will span the pupil: XY, XZ, YZ, UV, UW, or VW.
So:   construct six ranges: Rx, Ry, Rz, Ru, Rv, Rw, 
and then make up the six products RxRy, RxRz...
and then decide which range is largest,
and if this largest range > 1E-8 (hence nonsingular)
then evaluate & subtract the tilt & pitch in that range.

Use the getABC() method of MinFit to allow determination of
const offset A, slope B, slope C.

Do not use the getXY() method since it finds only that best
fit model that passes through the origin, and such a model
will contain biases if the best fit surface fails to contain
the origin and has some in-pupil asymmetry. 

To most easily apply a getABC() fitter, it will be advantageous
to create a 3xN data vector: the 3 represents x,y,f 
and the N represents the number of good rays within a WFE group. 
Test the denominator matrix and, if zero, make no WF correction. 





7 April A62  WFE continued
Seems to me possible that a mere 2x2 matrix solve for the best
fit OPD pitch & tilt would do what is needed: neither 3x3 nor 4x4
being required since these extras deliver no useful information
(the 3x3 gives piston, which is already zeroed by subtracting the
average OPD; the 4x4 delivers three non-independent components of
the best fit plane unit normal vector, plus piston). 

There is however the issue of what variables to adopt in defining
the exit pupil:  UV? UW? VW? XY? XZ? etc.  UV makes sense for the 
test case CSR188c, but does not make sense for an afocal telescope.
In general the final wavefront might be planar or spherical, and 
could  be distributed over any subset of XYZUVW. 

To handle more ray variables than two there will likely be some that
are not exercised, and whose presence makes the determinants zero,
thereby crippling the direct inverse method.  Singular Value Decomposition
(Golub) is the way around this, eliminating those nuisance variables. 
The idea of SVD is that any matrix A can be written as a product U*W*Vt
where U is column-orthogonal, W is diagonal nonnegative, and Vt is the
transpose of an NxN square matrix that is both row- and column-orthogonal. 
The inverse is Ainv = V * diag(1/wj) * Ut.  If poorly conditioned, some
of the 1/wj values are nearly infinite and the generalized inverse Ag
is constructed by eliminating their rows and columns. 

The useful thing about this representation is that W exposes the eigenvalues
and those rows with zero (or very small) eigenvalues can be deleted which
eliminates the singular part of the problem, allowing the inverse to be
computed.   This generalized Golub inverse is the best operator O that
minimizes |A*Ob - b|, where Ob is the optimum estimate of x.

SVD in Java:  http://math.nist.gov/javanumerics/jama/
 includes SVD package, for mRows>=nColumns;
 downloaded to \Java\LinAlgebra directory. 





4 April 2008  A62  WFE issue

WFE comparison against Zemax and Sholl's routine shows
that B4JE WFE estimates are somewhat larger than they
should be.  Exploring a shift in the origin from its
ray-hit centroid shows that for TMAs like CSR188c the
lateral shift has to be several microns to minimize
the WFE averaged over the pupil.  Files are in \java\WFE.

To fix this error, I've introduced a linear algebra
package class LinFit that contains a bilinear fitter 
to f(x,y) using model = a + bx + cy.  It requires some
span in the x data points and y data points; if either
range is zero then no bilinear fit is possible.  
(Why not?  couldn't use a collapse to 1-D case?)

RT13 bRunRandomRay() ---line 175---contains the end correction 
terms that convert optical path into wavefront error for random
rays, after the table rays have been prebuilt.  

RT13 doWFEtable() -- line 368---contains the end corrections
for the table rays.  They are fully 3-D that is to say they are
the full dot product x*u + y*v + w*z and thereby handle rays
with scatter and travel in any directions.  The LinFit package
is only 2-D, no obvious way to use it to de-tilt the WFs.

However! there might be a vector formulation of the LinFit goal,
namely how to adjust each OPD to make a vector become zero. 
It would have to allow changes in x, y, and also z, since the
reference sphere would in general have to move in all three directions.
Perhaps this would be a trilinear adjuster?

A way forward is to ask: what 3D plane best fits the OPDs when they
are projected to infinity?  A plane can be defined as the set of points
P such that n.P+k=0 where n is a unit vector (the normal) and k is the
distance of the plane from the origin.  Writing n=ui+vj+wk, the best
fit plane to a collection of data points {xi, yi, zi} is given by
expanding the SumOfSquares and differentiating w.r.t. u,v,w,k and
setting the derivatives to zero:

  ux   + vy   + wz   + k  = 0; 
  ux^2 + vxy  + wxz  + kx = 0;
  uxy  + vy^2 + wyz  + ky = 0; 
  uxz  + vyz  + wz^2 + kz = 0.

The linear-algebra solution for k,u,v,w are given by ratios of
4x4 matrix determinants, whose elements are sums of the
data points & their products. 
 
The needed sums-over-data are these:
  Sum(1) = npts; 
  Sum(x),   Sum(y),   Sum(z); 
  Sum(x^2), Sum(y^2), Sum(z^2);
  Sum(xy),  Sum(xz),  Sum(yz). 


31 March 2008   A61 Auto: Zernikes
I implemented a special feature for getDelta()
that gives Zernike coefficients a delta value of
0.01*UserDelta, because they are generally very
small and a bit more accuracy might be achieved this way.
^^NEEDS TESTING


24 March 2008  A61 Auto  "DIGITS" files
Note that Aspher has 12 digits, plenty. 
Reveals lack of stopping if Curve digits are too few.
6, 7, 8: no stopping.  9 or more, stops OK. 
No oscillation; RMS=5.287E-6 is correct asymptote. 
What is happening to the SOS?  How can it fail to exit?

Even with just one adjustable -- C1 say --- fails to exit. 
Starting C1 = -0.20574493. 

Installed a diagnostic into LM() reporting sos, sosprev, rise:
  With 8 digits, sos and sosprev ~ 1E-8, rise ~-3E-12 steady!
  With 9 digits, sos and sosprev ~ 1E-8, rise ~-3E-15, exits. 
How can Ndigits influence rise?!

Hmmm...diagnostic reports the following pre & post nudge....
  -0.2057449300000000  pre, table value: deriv
  -0.2057440069230769  post, + delta:    deriv
  -0.2057440069230769  pre,  + delta:    deriv
  -0.2057458530769231  post, -2 delta:   deriv
  -0.2057458530769231  pre, -2 delta:    deriv
  -0.2057449300000000  post,  0 delta:   deriv

  -0.2057449300000000  pre vector step
  -0.2057449268985250  post vector step.

Yet the very next iteration starts at the **table value** again.
As if the table overwrites the progress, forcing a restart. 
If it is the table, that would completely explain why the
number of digits influences the convergence. 

Diagnosing OEJIF.parse()...
Wow! OEJIF.parse() is called six times each iteration!
Who, where, why??  It should not be called.  Calling parse()
would replace the existing RT13.surfs[][] with the table values
thereby interrupting the smooth convergence of Levenberg. 

Auto & LM have no direct calls to parse().
How about Auto.vUpdateOpticsTable()? 
Which calls DeskMenuFrame.bringEJIFtoFront()?
Commenting out DeskMenuFrame.bringEJIFtoFront()...
^^YAY this eliminates the unwanted calls to parse()!
^^and eliminates the eternal loop. 
^^Adopted this change  24 March 2008, A61. 


---------------Analysis of this bug------------ 
How did bringEJIFtoFront() cause parse()?

Q: Can DeskMenuFrame trigger parse()?   
A: Yes, but only indirectly...

    public static boolean bringEJIFtoFront(EJIF e)
    {
        if (e == null)
          return false; 
        e.setVisible(true); 
        e.toFront();
        try {e.setSelected(true); }   // Lights Up
        catch (java.beans.PropertyVetoException pve) {}
        e.focusPanel(); 
        return true; 
    }

..and then in EJIF there is an InternalFrameListener...

        addInternalFrameListener(new InternalFrameAdapter()  
        {
            public void internalFrameActivated(InternalFrameEvent ife) 
            {
                DeskMenuFrame.vMasterParse(true);  
            }
        }

which triggers a vMasterParse() when a JInternalFrame comes forward.
This action is obviously beneficial to allow correct menu graying.
Whenever any editing is done, and editors swap front/back, it is
crucial that the menu graying be kept up to date. 

However DeskMenuFrame.vMasterParse() has an important consequence.
One of its tasks is...

    public static void vMasterParse(boolean bActive)
    {
        ....
        if (oejif == null)
          giFlags[OPRESENT] = 0; 
        else
          oejif.parse();
        ....
    }

...which is the offending parse() overwriting RT13.surfs[][] with
the table data, thereby frustrating Auto's efforts to migrate the
optical specification towards a lower SOS solution. 

  Q: why does oejif.parse() refresh from the text table when there
  have been no user inputs to that table?  

  A: oejif.parse() is stupid.  It does not have a labor saver flag
  allowing it to skip its parsing when no user keystrokes have arrived
  since the previous parse.  If it had such a flag, the call from
  vMasterParse() would have had no effect on RT13.surfs[][].
  Someday I will put that labor saver into place. 




23 March 2008  A61 Auto "TROUBLE" files
  StepSize=1e-6;  MaxIter=100;  Tolerance=1E-12.
With fixed ugoal in TROUBLE.RAY, 43 iters=DONE; monotonic.
With floating ugoal TROUBLE2.RAY, slow; 64 iters=DONE; monotonic. 
With RT:OffAx2.OPT and OffAx2.RAY, monotonic but goes 100 iters.
  RMS remains at 2.297E-6 as it runs. 
  Tolerance=1E-8: stops 1 iter.
  tolerance=1E-9: stops 1 iter.
  tolerance=1E-10: run 100 iters.
Now trying lots more digits in Curvature, 12 digits:
  tolerance=1E-10:  stops at 4 iters.
  tolerance=1E-12:  stops at 5 iters.
  tolerance=1E-14:  stops at 5 iters.
CONCLUSION: NEED SUFFICIENT DISPLAYED DIGITS.  (why?)
  





23 March 2008  A61 bug:  Auto has become nondecreasing! and doesn't stop!
Prior to this week, Auto was always monotonic decreasing blur, and would
stop when no further improvement is seen.  But now, differs.  Why??

On a TMA, with six curv/asph parms adjusted, it is monotonic but keeps
iterating.  

On a TMA with six + Xfinal adjusted, it actually oscillates
blur up and down in the vicinity of the optimum, and keeps iterating. 

On a TMA with just one optical parm adjustable, it converges immediately
but keeps iterating with constant blur.  

As if a bug has been introduced into its damping & exit test strategy. 

**IT's NOT THE .OPT FILE --- A60 autoadjust works as it should. 
**IT's NOT THE .OPT FILE --- A61old works too, even with the fancy Auto display.

Yet I cannot find any significant difference between the Auto.java code
or the LM routines in the Auto.java file.  The exit criteria appear to
be identical.  What differs is the treatment of seven strings (A61old)
writing to six JLabels, and in A61 there are only six strings, with
the somewhat cleaner code in vUpdateDialog()  in A61...

        if (autongoals > 1)
        {
             if (bWFE)
               jL[2].setText("Caution: WFE + other goals"); 
             else if (autongoals==2)
               jL[2].setText("RMS Radius = "+U.fwe(ROOT2*rms)); 
        }

...compared to the code in A61old.  Not suspicious!

My plan: create A62 using all the A61 classes, except drop the Auto.java
file from A61old into place in A62.  Verify that it works OK.  Then,
as time permits, migrate it from 7 to 6 string elements, and continue
close observation of its performance.  

FAILED.  When I create A62, but use the A61old version of Auto.java,
the AutoAdjust function does not terminate.  So the problem is not
in the Auto.java file.  It must lie outside of that since A61old 
does terminate properly.  

WAIT there is something fishy about this "problem"  --- the
test file CASS has totally floating ray intercept goals, and
the optimization can go a very long way without resolution. 
Let's standardize the problem, make CASS have fixed ray goals,
and retest.  

CASS.RAY now has ugoal = -0.16
CASS.OPT now has Cpri, Csec, Apri, Asec adjustable. 

A62 terminates in six iterations!  RMS=7.293E-5, 91 rays, 182 terms.
A61 terminates in six iterations!  RMS=7.293E-5, 91 rays, 182 terms.

So... problem was in CASS not in the code.  A61 is Okay.
Deleting A62, unnecessary. 

^^PROBLEM IS NOT SOLVED. HOW CAN AUTO BE NONDECREASING?
Problem is revealed only is a special kind of situation,
namely the original CASS where...
CASS.RAY had ugoal floating;
CASS.OPT had Zpri, Zsec, Cpri, Csec adjustable. 

Define two new files TROUBLE.OPT and TROUBLE.RAY
that has these circumstances, and install diagnostics into A61
that reveal the decisions taken for each SOS.  





20 March 2008  A61: bug: after Auto, .RAY refuses to come forward.

There is some ambiguity with "selected" (lit up) and "fronted".
Auto makes .OPT come forward (do we want this? rays auto also!)
but when complete, clicking .RAY selects it but fails toFront.
Other problems?  For InOut, does .RAY come forward to display 
results? and stick in front?

InOut is a good citizen. It selects & fronts its .RAY table.
Then the user can then select & front the other window.

Auto is a bad citizen.  Auto fronts .OPT but does not select it!
.RAY remains highlighted even though falls to background.  

Plan: identify each window control route;
      identify the failure mode;
      remove the offending code from Auto. 

InOut:  
  1. DeskMenuFrame calls constructor InOut();
  2. InOut() sets & verifies rayEditor = DeskMenuFrame.rejif;  
  3. InOut() calls DeskMenuFrame.bringEJIFtoFront(rayEditor);
  4. Only then does it call vUpdateRayTable(). 
  
Auto: 
  1. DeskMenuFrame calls constructor Auto();
  2. Auto() instantiates LMhost;
  3. LMhost() sets & verifies optEditor, rayEditor; 
  4. LMhost() does not ever bringToFront();
  5. LMhost() calls vUpdateOpticsTable();
  6. LMhost() initializes its timer;
  7. Timer action performs three updates:
         vUpdateDialog();
         vUpdateOpticsTable();
         vUpdateRayTable(). 

Perhaps it is the raggle taggle updating that causes the
disconnect between Front and Selected?  If writing to a table
selects it but does not front it, that could cause the 
apparent confusion.

Perhaps try fronting each table as the first step in Update.
Nope: what happens is there is visible alternating postings
on the opt and ray tables (nice!) but regardless of the initial
select & front, opt gets in front and ray gets selected (lit up).

Perhaps my BringToFront() lacks a try...setSelected(true) request?
Nope, it contains that clause:
        try {e.setSelected(true); }
        catch (java.beans.PropertyVetoException pve) {}

Perhaps there are some unwanted select/front effects from elsewhere?
A test lab environment with JIFs might demonstrate, or fail, to
produce timed select & front. 

Perhaps it is the presence of the dialog that causes the request
try {e.setSelected()} to fail?  Let's drop in a diagnostic...
Nope, no "catch" failures.  Yet opt does not light up.

Perhaps an initial BringToFront(ray), analogous to InOut, would get
things properly synchronized?  
Nope, ray gets selected but not fronted. 

Perhaps a cleanup after dialog, when "done" dismisses the Auto, 
dialog=null, bringEJIFtoFront(ray) thereby selecting it?
Aha this works.  Ray fronts and selects OK, with the dialog absent.
Or, better,  bringEJIFtoFront(opt) also works & syncs. 
I conclude that the presence of the dialog messes up the usual
connection between front & selected, but when the dialog ends,
bringEJIFtoFront() properly reestablishes this synchronization. 
^^DONE 22March 2008 A61. 



18 March 2008  A61:  "RMS" versus "RMS Radius"
In a detailed comparison of Zemax vs B4 blur estimates,
Sholl found yesterday that Zemax lists "RMS Radius"
which is the Pythagorean sum of the x and y deviations,
while B4 outputs the "RMS" average of all deviations.
In 2 dimensions these have a ratio of root2.  

Ref: J.W.Foreman Jr., "Computation of RMS Spot Radii by Ray Tracing"
Appl. Opt. v.13 #11  pp.2585-2588,  Nov1974. 

To address this let's install an output fields in InOut and Auto
that when Ngoals=2 displays both "RMS" and "RMS radius" so
that there will be both numbers on display, reminding the User
that there is a definition to be careful of.  

And will want a thorough explanation in the Manual. 
^^Done 20 March A61. 




15 March 2008 A61:  installed ProGuard compressor/obfuscator.
Local required files in \Java\A61 are...

 ---- d.bat    ---- builds BEAM4RAW.jar, 
                    runs ProGuard compressing it to BEAM4.jar,
                    finally deletes BEAM4RAW.jar.
del BEAM4RAW.jar
del BEAM4.jar
jar cmf MyMan.mf BEAM4RAW.jar com\stellarsoftware\BEAM4\*.class
java -jar "C:\Users\Mike\Java\Proguard\proguard.jar" @options.pro
del BEAM4RAW.jar

#  options.pro   ---- arguments for ProGuard
#
#  local files:  BEAM4RAW.jar   << input
#                BEAM4.jar      << output
#                options.pro    << arguments
#
#  remote files: C:\Program Files\Java\jre1.6.0_03\lib\rt.jar
#                C:\Users\Mike\Java\Proguard\proguard.jar
#
#  java -jar C:\Users\Mike\Java\Proguard\proguard.jar @options.pro
#
-injars BEAM4RAW.jar
-libraryjars "C:\Program Files\Java\jre1.6.0_03\lib\rt.jar"
-outjars BEAM4.jar
-keep public class com.stellarsoftware.BEAM4.M7 {
public static void main(java.lang.String[]);
}





ProGuard reduces BEAM4.jar 219kB to B4PRO.jar 149kB. 
It eliminates comments and mangles names of classes, fields, methods
except for the name of the "main" entry point and its class. 
Further development notes are in javanotes.txt for the compressor
and for decompilers that explore the resulting .jar files. 
Further testing was in Obfus61 where this schema was developed. 

Yes I remembered to thank Proguard's developer Eric Lafortune 
Eric@graphics.cornell.edu.  Very helpful about avoiding trouble
with the spaces in absolute paths.  Quotation marks.  

---------------------

Q: does the use of jrt1.6.0_03's rt.jar mean that every user of
B4PRO must upgrade to Java 1.6?  or will it run OK under Java 1.4?

A: to find out I moved a copy of B4PRO.jar onto the other computers
in the shop --- that HP8665C with Win98, and MacBook with OS 10.4.
^^works great on the HP8665C, java version 1.4.1_02.
^^works great on the MacBook, java version 1.5.0_07.

I think I'm OK on this issue. 



----------production file details---------------

The batch file d.bat noincludes the initial .jar creation 
and the ProGuard compression and obfuscation,
and outputs a clean file BEAM4.JAR for distribution:

del BEAM4RAW.jar
del BEAM4.jar
jar cmf MyMan.mf BEAM4RAW.jar com\stellarsoftware\BEAM4\*.class
java -jar C:\Proguard\proguard.jar @options.pro
del BEAM4RAW.jar

The options.pro file supplies arguments to ProGuard:

#  options.pro
#
#  local files:  BEAM4RAW.jar   << input
#                BEAM4.jar      << output
#                options.pro    << arguments
#
#  remote files: C:\Java\jre1.6.0_03\lib\rt.jar
#                C:\Proguard\proguard.jar
#
#  java -jar C:\Proguard\proguard.jar @options.pro
#
-injars BEAM4RAW.jar
-libraryjars C:\Java\jre1.6.0_03\lib\rt.jar
-outjars BEAM4.jar
-keep public class com.stellarsoftware.BEAM4.M7 {
public static void main(java.lang.String[]);
}


--------------works!----------------------------



1 March 2008  A61: cleaning up AutoAdjust's anti-ganging.
Although documentation is feeble, seems to me that OEJIF and
REJIF have parser components that identify every adjustable
and for each search for all slaves (positive record "k")
and for all antislaves (negative record "k").   So, if the
autoadjust deviator (Auto.java line 463) runs properly,
then antislaves should perform properly. 
^^ works great: see figures Auto1....Auto7

B4Manual needs an exhaustive rewrite of Chapter 19 AutoAdj:
explain about starting with only the major adjustables;
get near final tunng then turn on the minor adjustables;
explain about hyperspace minima;
explain about turning OFF all Diams & diams;
explain about need to explore manually first, get some good rays;
explain about sanity checking of any final optimization;
explain about skepticism;
explain about starting from various starting points;
contrast L-M nonlinear LSQ with annealing. 

Explain all differences between this B4 and previous products.
  *  the auto adjust tagging & ganging is different;
  *  ray starts are now adjustable and gangable; 
  *  asphericity is now available (but don't mix with shape);
  *  3D viewing is new;
  *  negative refractive index is new;
  *  Multi Platform is of course totally new. 
  *  e-distribution is new.




24 Feb 2008  A60:  David Carver's example shows that there is a bug
in InOut reporting: with RMS reporting = ON, if no good rays, there
should be a report "No good rays" [OK].
^^FIXED. works. 

Also: the world doesn't ask "Abandon...?" but rather asks
"Do you want to save changes to...?" and B4JE should comply. 
Changed EJIF line 390 to offer new alternatives
   "Warning: Unsaved work in .RAY
     [Don't Close]  [Abandon work]"
^^New bug: global master mainframe exit button is now broken;
cannot exit unless every editor is closed separately.  
^^FIXED stupid inverted logic.  Now checks out OK.



17 Feb 2008  A60: revised MTF fmax yet again:

        nplotfreqs = 16;  // was 32; 
        histospan = myH1DPanel.getHistoSpan();
        deltaf = 1.0 / histospan; 
        freqspan = deltaf * nplotfreqs;


17 Feb 2008  A60: improved MultiPlot
** would be improved with random
** would be improved with separate Hspan, Vspan
** layout & wording of Options::MultiPlot could be nicer
^^ Separated Hspan, Vspan, rearranged Options. 



16 Feb 2008  A60: spider failure

Discovered the spider Layout method is broken.
Cause is the erroneous value of the spider hole number
interpreted within putSpiderHole(): base 50 is wrong,
changed to base zero, now works properly.  Also installed
a polar-coordinate locator for each spider hole to be used
within getSpiderHole() sorted z values. 
^^works. 



16 Feb 2008 A60: dirty bit continued

Discovered that there are two distinct exit permission dialogs.
Both are in EJIF.  One displays .XXX file extension, the other
does not.  Strange to have two.  

First is the EJIF vetoableChangeListener at line 145.  Why do
we need this one? would it not be simpler to use an internalFrameListener
set to act on the "closing" status at line 178?   But then of course
we would require a "DO_NOTHING_ON_CLOSE" for the internalFrame. 
Might not be legal; might require this vetoableChangeListener. 

Second dialog is at line 387, as part of the bExitOK() method. 

Step 1: have the vetoableChangeListener call bExitOK(). 
^^Works. 

Step 2: eliminate the vetoableChangeListener, use internalFrameListener
instead and check its status message for "closing" --

    public void internalFrameClosing(InternalFrameEvent ife)
    {
        try { setClosed(bExitOK()); }
        catch (java.beans.PropertyVetoException pve) { }
    }

^^FAILS: compiles but produces a blizzard of error messages when a different
non-dirty editor is asked to close.  Perhaps I am not properly handling
the exception.  
^^RESOLUTION: retaining the vetoableChangeListener at line 145. 
  

12 Feb 2008  A60:    dirty bit and exit permission

Discovered that EJIF and EPanel each had its own dirty bit!
Eliminated EPanel's in favor of EJIF.

Discovered that M7.java contained the line of code...

    dmf.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

that completely overpowered any efforts within DeskMenuFrame
to establish its own exit policy.   Deleted that. 

Discovered that there has been a logical error within EJIF
that keeps the dirty bit from objecting.  FIXED. 
^^WORKS. 



9 Feb 200   A60 -- remedying some accumulated bugs---

"How to insert lines" is now added to Help and to Options::Editors.   
^^Manual needs this paragraph as well.

Eliminated the option box Editor::enable Insert delete. 
It has become unused. 

Fixed the problem with mixing numerical & named glass refractions.
The trouble was not in RT13's isNaN(surfs) -- that is proper.
The trouble was in DMF's vMasterParse() which was wrongly
checking the length of glass names OEJIF.oglasses[] when
it should have been checking for isNaN(surfs).  

Testing shows this fix works, but extended testing 10 Feb reveals
a subtler error: if .OPT specifies a glass name, then .RAY *must*
declare every @wavelength.  So then if .RAY has a blank @wave entry, 
or if .RAY lacks an @wavelength column, then we must detect & show
a .RAY fault that needs an error number and a fault message. 
Today I created GRLACKWAVE and "Ray table lacks @wavelength".
To support this I need another giFlag[] RALLWAVESPRESENT.
Installed this, and support code within REJIF.parse() to set the
giFlag to 0=false if @wave column is absent or if any wavel
entry is absent.  Then I put supporting code into DeskMenuFrame
vMasterParse() to sense the condition of .OPT requiring .MED
yet .RAY lacking wavelengths.   
^^WORKS; solves Carver #2 bug. 

Diameters issue: OODIAM and OODIAX; no OODIAY.
Yet to the user, and the parser, there are all 3 possibilities. 
Also there are spelling variants: DiamX, DX, Dx: which??
Do we need a comprehensive rewrite to include all three?
and have decoder logic within OEJIF.parse() to properly
set these three values?  

GUIDING PRINCIPLE:   I prefer to do the parse job within
the parser, so that the client tracer & graphics has only to
go to the needed fields OODIAX and OODIAY, never analyzing. 
What if the user puts in 3 columns? Entirely legal!
The proper parse response is to distribute her 3 columns into 3 fields
OODIAM, OODIAX, OODIAY.  Then, after table parsing is complete,
as part of the post-parse fixup, for each surface impose the distributor
logic sequence as follows (eight existence cases; neg or zero = absent).
The overall flow would then look like this....
   0.  Set OODIAM=-0.0, OODIAX=-0.0, OODIAY=-0.0; 
   1.  Write OODIAM, OODIAX, OODIAY only when each exists; 
   2.  After parsing, set bM=(OM>0), bX=(OX>0), bY=(OY>0); 
   3.  If (!bX)
         if (bM) OX=OM;
         else if (bY) OX=OY; 
   4.  if (!bY)
         if (bM) OY=OM;
         else if (bY) OY=OX;


This way, each client need use only OODIAX and OODIAY without any
further use of the OODIAM field. 

Files that make use of OODIAM will need revision:
  OEJIF            <<rewritten.
  H1DPanel         <<rewritten.
  H2DPanel         <<rewritten.
  LayoutPanel      <<rewritten.
  RT13             <<rewritten.
  Z                <<rewritten.

Testing will need to be comprehensive!
^^WOW works great, Dia Diax Diay can all be present at once;
Diax and Diay dominate X and y but if either is missing then
the Diam fills in, or the other if Diam is also missing. 
^^Testing with Hartmann (where OODIAX is more complex):
Works! 
Solves Carver #1 bug.

Installed Layout:Option for "Opaque refractor sides".
Installed code into LayoutPanel guiding bShad[i].
Works!
Solves Carver #3 bug. 

11 Feb 2008: addressed the Layout Black Screen of Death.
Heretofore, when Layout is already on screen and a table
fault is introduced, Layout turns black when brought forward.
Reason is Layout did not check overall system status before
trying to regenerate.  It turned black. 
Fix is a preliminary check within LayoutPanel.doTechList():

        int istatus = DeskMenuFrame.giFlags[STATUS];
        boolean bOK = (GPARSEOK==istatus) || (GLAYOUTONLY==istatus); 
        if (!bOK)
        {
            doBlank(); 
            return; 
        }

and a new routine doBlank() that blanks the artwork, setting the
display area to the same color as the requested background. 
^^Works.  



-----

Manual needs a paragraph on the importance of overfilling the
pupil to get correct spot diagrams. 


-----

3 Feb 2008  A59  Notes from David Carver  dcarver52@yahoo.com
He has been testing A59 and notices some bugs & issues.

1. If DX=something and DY=blank, DY displays as zero in Layout
even though it traces as DX.

2. Numerical refractive index data in mixed method file
Sil_Prism_03.OPT are regarded as glass names! and cause the
error message "Optics glass not found" yet if *all* the 
refractive indices are numerical, then OK.  Also the name
of the glass not found ought to be presented to the user
for correction. 

3. Sometimes the Layout goes black, e.g. "Optics glass not found"
What should happen is the previous layout should remain on screen.

4. Closing without saving tables has no warning!  Needs a
warning.  Use dirty bit. 

5. Wants semitransparent prism sides so that rays peep through,
or some way to switch off the opacity.

-----------------------

3 Feb 2008

Thank you David,

Yes I encounter the same thing now.  If all the glasses are called by
name, e.g. "air" then ok -- or if all are numerical then OK -- but
if mixed mode then "Optics glass not found" -- it is searching for a
glass whose name is 1.0 --- I'll fix that pronto.  Mixed mode ought to have
been completely OK.  And, the error message at the top of screen should
include the offending glass name.  Otherwise not helpful enough.

Yes I understand -- refractive objects have opaque gray sides, cannot
see rays through sides, of course can twirl to peep along axis and see
rays.  I'll make the side transparency switchable in Options:Layout.

Aha -- broken warning about exitting with unsaved tables.  I will fix that.

Window going black: bad karma! and I will fix that.  What should happen
is go to background when a table becomes incomprehensible,  guiding
user interest to the error message.

Another bug:  you sometimes declare an optic's "DX" diameter in x direction
and leave "DY" blank, so that DY will default to DX  -- which works OK
in the ray trace but fails to work in the Layout where DY=0.  Bizarre, I will
fix that.


--------------------------------




23 Jan 2008     A59  Completed Diam & Manual for H1D, H2D

Until now, Histo1D and Histo2D have had only Auto scaling.
I have written Diameter and Manual scaling features into
the sizing routines.  They seem to work OK.  

Usage: H1D and H2D do not automatically rescale spans
when they pop forward.  The spans are set and histo zeroed only 
when the graphic is first created or when UO=OK.

Also: eliminated Layout Options "Sticky Zoom" what was that.
Also: eliminated Layout Options "Scale" is automatic only. 
Also: tidied up the RadioButtonBox in Options.java.



21 Jan 2008    A59   Eliminating "Nudge" everywhere

The success in splitting up the Layout parser into components that
allow the automatic reevaluation of the .OPT .RAY .MED data in each
redraw (check this) even when not UO-driven --- can & should be 
extended to the other graphics.  Test plan:
  1. create a graphic
  2. change .OPT
  3. pop the graphic forward
  4. see if change is evident in the plotted data.
  5. verify the scaling (zoom center pan twirl) remains fixed.

Layout: change is evident; no rescale.     PASS
Plot2D: change is evident; no rescale.     PASS
MultiPlot: change is evident; no rescale.  PASS
Plot3D: change is evident; no rescale.     PASS
Histo1D: change is evident; no rescale.    PASS
MTF:  change is evident; no rescale.       PASS
Histo2D: change is evident; no rescale.    PASS


======CHANGES RECOMMENDED FROM THESE TESTS==============

In MTF, block the live XY cursor position display.
      ^^DONE
In MTF, adopt e-notation on horizontal axis
      ^^DONE
In MTF, reduce freqspan by another x2. 
      ^^DONE. HOWEVER....
The MTF display problem is that most of the power lies
in the bottom few bins.  If H1Dbins=256 or 1024, always
want to see the bottom few bins in MTF.  COnsequently we
should not have nplotfreqs = ncomplexpairs/8 since that can 
become large if ncomplexpairs becomes large.  Instead prefer
to have nplotfreqs=32 independent of ncomplexpairs. 
^^LOOKS MUCH BETTER.

Another annoyance: why require user Hmin & Hmax on the
UO dialogs for H1D, H2D?  Span would be simpler, always
use the centroid?  
^^ DONE.
^^ Manual & diameter spans need to be implemented. 
^^ Done for H1D.
^^ Yikes, changing back to separate Hmin, Hmax etc: the guiding
principle here is to simulate a kind of multi channel counter with
predefined pixel locations.  Ought not move around with the centroid.



H2D Aspen diagram looks ghastly.   Drop Aspen.
^^DROPPED. 

Implement H2D White/Black/Stereo. Because this works only in
orchard format, have the stereo flag commandeer the orchard.
Otherwise the Manhattan panels would all be magenta. 
^^DONE. Works. 



Need careful explanation in each chapter of when/where
the display scale factors are computed and applied, and
say how to recover from the situation of vanishing rays:
(1) run UO and click OK;  or (2) make new graphic. 

Need careful explanation in manual of how/when to overfill
each pupil.  Vital for getting spot diagrams that mean anything!




18-19 Jan 2008   A58: implementing new stereo bitwise OR plan

A58 beta to David Carver <dcarver52@yahoo.com> on 20 Jan 2008

What if the stereo writing business were to always OR two bitmaps
with the original bitmap, allowing fully additive colors at every
stage of the drawing... ...see \java\bitmapbuffer\Bitbuf.java:

  for (int i=0; i<width; i++)
    for (int j=0; j<height; j++)
      biTech.setRGB(i, j, biTech.getRGB(i,j) | biR.getRGB(i,j) | biB.getRGB(i,j));

This would symmetrically OR both the new R and B artworks onto an existing
artwork without clobbering. 
^^WORKS nicely; extreme density goes to solid magenta as it must. 
^^Also now deleted the dependence of linewidth on dStereo. 
Now, thin=1.0f, and fat=2.0f, independent of stereo.  
Thanks to the triple OR, there is no need to doFinish() in stereo. 



FIXED the unwanted cursor coordinates appearing on non-front
graphics windows:  GPanel line 1028 mouseMoved() now tests
for frontGJIF == myGJIF before calling client doCursor().


Layout continues to not recognize new Diameters added to the .OPT
table even though it does properly recognize new curvatures, X, Y, Z,...
Why?  I think the Diameter parser must be lost in the UO_parse routine,
since the Diameters are properly parsed when UO "OK" is executed. 
^^Problem here is that we presently have just one parser.  Too simple!
^^FIX is to split LayoutPanel::doParse() into three portions:
doArrays() and doParseUO() and setScaleFactors().  Must always
doArrays() to gather updates to drawings, but must only setScaleFactors()
when doing doParseUO() so as to avoid overwriting zoom:

        doArrays(); 
        if (bPleaseParseUO)
        {
            doParseUO(); 
            setScaleFactors();
        } 

^^WORKS; now table changes influence artwork without destroying view. 
^^Also eliminates need to nudge Layout: popping forward renews graphic.



16 Jan 2008  A57  Review, stereo feature
A roomful of fellow scientists donned red/blue spectacles and
all agree: red is way too bright, blue is way too dim.
What can be done to make the red fainter??
How to keep superposed rays from having the underlying
blue image get obliterated by multiple reds?




14 Jan 2008
Received Steve Berezin's shipment, sent 8 Jan 2008, Invoice JOH14757,
Quantity five  542B Proview with blue lens not cyan,
  Aviator frame, $6.95ea + tax & SH credited (no charge!)
Red side rejects blue: perfect
Blue side rejects red: pretty good, almost as good as the 543 clip ons. 

Thanked 15 Jan.  Please put the following into the Manual:
  recommend Berezin 542B spectacles or 543 clip-ons. 



11 Jan 2008  A57  Layout Redraw Bug
Changing the rays, Layout fails to recompute
new Diameters when brought forward.  (It succeeds
if Regenerated.)  As if, the Diameter calc is
part of the UO parser, not part of the re-trace.

Also it is a bit odd to have a background window
responding to cursor coordinates.  Block that please. 




10 Jan 2008  RedBlue spectacles

Testing software "Additive Color Mixing Guide" downloadable from
http://www.cs.brown.edu/exploratories/freeSoftware/repository/edu/brown/cs
   /exploratories/applets/colorMixing/additive_color_mixing_guide.html

Test target:  Draw a vertical bar in full intensity red, and
draw a blue horizontal bar in full intensity blue.  The two
bars should separate into left eye (red) view with no interference
from the blue image, and ditto the other way. 

Received a shipment of RedBlue spectacles from Mark Margolis,
Rainbow Symphony Inc  6860 Canby Ave #120
Reseda CA 91335   818-708-8400

This shipment contained:
  
1 black-frame RedCyan
1 clip-ons, RedCyan
1 cardboard RedGreen
1 cardboard RedCyan
1 cardboard RedBlue

Judging, on Lenovo X61s LCD display and Sony MultiScan 
type 100ES CRT display:
On all units, "red" lens has total rejection of blue.
But Blue/Green/Cyan has trouble rejecting red:

			Lenovo	Sony CRT
black frame RedCyan	poor	poor red rejection
clip-ons  RedCyan	poor	poor red rejection
cardboard RedGreen	good	poor red rejection
cardboard RedCyan	good	poor red rejection
cardboard RedBlue	good	poor red rejection

Maybe the Sony CRT  has feeble blue!

Compare with Berezin judging results from last year....

black frame RedCyan	poor	poor red rejection
clip-ons RedBlue	good	fair red rejection
cardboard RedBlue	good	good red rejection 
cardboard RedCyan	poor	poor red rejection

...so the only universally good choices for our clients are 
the Berezin clip-ons and the Berezin cardboard RedBlue.
How can the Berezin RedBlue cardboard beat the Rainbow
RedBlue?  Answer: the Berezin is a dark blue, very
severely colored, as if it were a relatively high
optical density.  In contrast the Rainbow is more pale
blue, less strongly colored, admits some red. 



9 Jan 2008  A57: added displayable RMS to MultiPlot.  Works. 

8 Jan 2008 Telecon Steve Berezin, www.berezin.co/3d  949-215-1554:
  Steve agreed to build some true blue (not cyan) spectacles,
  New part number "542B" and ship em to me, Q=5 @$6.95 each + UPS=$8.95.
  takes a couple of days.  These are 3D spectacles with ear arms.
  We will see.  I have already complained that his usual 542's 
  leak too much red light through his cyan lens. 


6 Jan 2008   A57 Graphics title: Nominal, HorVert, or Regenerating

The usual GJIF cursor action sequence drives the title this way:  
  GPanel has a MouseMotionHandler;
    it calls daughter's doCursor(i,j) handler.
  Most daughters do nothing with this call.
  Layout & Plot2D's doCursor() however calls either
       myGJIF.postMyName()
  or   myGJIF.setTitle("Hor...");

So, let's have GJIF's blink paintComponent() fetch & test the current title;
if its first 3 chars are "Hor" then it is showing a cursor position
and should be left alone, otherwise post "Regenerating" or "Layout"...

    public void paintComponent(Graphics g)
    // Repaints its own temporary/permanent title each caret blink.
    // Avoid interfering with mouse cursor "Hor..." display. 
    {
        String s = getTitle(); 
        int i = s.indexOf("Hor"); 
        if (i != 0)
          postGJIFtitle(); 
    }
^^WORKS; adopted 6 Jan 2008. 


3-4 Jan 2008  A57  Temporary GJIF titles
Owing to the "Regenerate..." temporary title, there now is a motive
to make the GJIF temporary titles similar to the EJIF titles "Saved!".
Similar functions => similar code.  How does EJIF "Saved" work?

BJIF's blinker task calls for a repaint() for each caret on/off. 
  -- this repaints both EJIF title and EPanel contents.
EJIF derives from BJIF;
EJIF offers public void paintComponent(); 
  which calls a private EJIF method postEJIFtitle();
  which uses iCountdown; >0 setTitle("Saved") else setTitle(usual).
EJIF's saveFile() sets iCountdown=5 to post "Saved".

To make a parallel construction, I created three methods in GJIF...

    public void paintComponent(Graphics g)  << calls postGJIFtitle().
    public void setCountdown(int i)         << let GPanel show temp title.
    private void postGJIFtitle()            << chooses & posts title. 

and within GPanel, when starting Regen, call myGJIF.setCountdown(3). 

^^DONE. works. 




2 Jan 2008   Java Additive Color Mixing
http://www.cs.brown.edu/exploratories/freeSoftware/repository/edu/brown/cs/
exploratories/applets/colorMixing/additive_color_mixing_guide.html
http://www.cs.brown.edu/exploratories/freeSoftware/catalogs/repositoryApplets.html
This demo appears to really add color brightnesses, not just replace them or "mix": 
max red + max green + max blue = max white.
Passes the red/blue spectacles test: colors don't interfere. 
So how does this work? 
Authors = Anne Morgan Spalter, Jean R. Laleuf, Jesse Kocher
Wrote an inquiry to ...   ams@cs.brown.edu

http://www-106.ibm.com/developerworks/java/library/j-mer0918/

Primary Subtractive Colors: correct, white background, all three -> black
http://micro.magnet.fsu.edu/primer/java/scienceopticsu/light/subtractive.html
 -- but: davidson@magnet.fsu.edu  <<no such account
Telephone: 850-644-0542 / 850-644-3348
Fax: 850-644-8920
E-mail: davidson@magnet.fsu.edu
Primary Additive colors:  incorrect: white background, all three -> white. 
http://www.olympusmicro.com/primer/java/primarycolors/additiveprimaries/index.html
 -- Matthew Parry-Hill and Michael W. Davidson, NHMFL, FSU, Tallahassee FL

Primary additive Colors
http://mc2.cchem.berkeley.edu/Java/emission/Java%20Classes/emission.html
...but with sliders; perhaps total redraw with 3 masks, rather than a
paint atop another bitmap (i.e. a total repaint with full information)?




2 Jan 2008   Testing & documenting A57:  "Regenerating"
This "nudge" business is not obvious how to use.  Better would be
to have rules of regeneration, and a posted title message "Regenerating..."
while a graphic is being updated, and have this automatic (no nudge) when
.OPT or .RAY or .MED are parsed & retraced, for the top graphic.  And
make it clear somehow that background graphics are not updated
until they come forward.   Concept: background = static, foreground = dynamic.

A new Option::Graphics  "Total regen when selected?" [ ]
could replace the old (unused!) "Keep previous graphic on screen?"
When checked, selecting a graphic triggers a total regeneration;
or if not checked, selecting the graphic only updates ray trace
graphic, retaining current user pan/zoom/twirl; a partial regen.  
Name this UO_GRAPH_TOTAL replacing UO_GRAPH_PREV. 

    public void internalFrameActivated(InternalFrameEvent ife)
    {
        if (gPanel != null)
        {
            if ("T".equals(DeskMenuFrame.reg.getss(UO_GRAPH_TOTAL)))
              gPanel.doParseUOAndPlot(); // total regenerate  
            else
              gPanel.doPlot();       // plot with current view. 
        }
    }
^^WORKS.  Only thing missing is the "Regen..." title bar.
That's so quick, that inserting a setTitle("Regen...") and
then restoring the title below the work here, goes by too fast
to notice.  Would have to implement something based on the
blinker countdown; although EJIFs have their titles redone
for each clock tick, GJIFs don't (why??).




I am not happy with automatically doing a total view+table regen.  
Sometimes I want to keep my zoom/pan/twirl but do a table regen. 
But I do like the idea of posting "Regenerating..." while in process.
GPanel has a method setTitle() that passes to surrounding GJIF. 
It gets called by doCursor() for posting coordinates, else name. 
BUT notice how Layout doesn't call its implicit GPanel.setTitle() 
but rather Layout calls myGJIF.setTitle("Layout").

Oddly there are two places where "Layout" is posted as the GJIF title:
 * when fresh layout is created, get "Layout" (from GJIF line 78 "myname")
 * when cursor exits the active, get "TESTING" (LayoutPanel line 172).
It is important that both postings use the same source for myname.
Improper to have "Layout" raw coded within LayoutPanel at line 172.
Proper to replace it with myGJIF.myname so therefore I created a new
method within GJIF for use with the two graphics clients (Layout, Plot2D)
that actually have to modify their titles:

    public void postMyName()
    {
        setTitle(myname); 
    }

OK where does the initial graphics title "Demo" etc originate?  
  Not in DeskMenuFrame; that explicitly manages only the main title.
  Not in GPanel; that has no setTitle() methods
  Not in DemoPanel; that has no setTitle() or postXX() methods. 
  Not in GJIF; I commented out its usual setTitle() methods, 
    and I have corrupted its new postMyTitle() method. 
  Yet, "Demo" etc, and initial "Layout" remain properly titled. ??
Where does the string "Demo" occur? 
  DMF line 95 defining an element of runItemStr[];
  DMF line 331 using runItemStr[] to build a run menu; 
  DMF line 804 where if(cmd == runItemStr[i])....
  DMF line 826 where... gjif[index] = new GJIF(index, cmd, item); 
    so that cmd gets passed to GJIF() as second argument; 
  GJIF line 40: super(gname) is called with DMF's second arg "cmd".
Aha; it is this runItemStr[] that is the fundamental source of names.
^^PROVEN by corrupting this runItemStr[] item. 
^^NOW DOCUMENTED within GJIF constructor at line 40. 



There are really three tasks involved in a total regen:
  * parse the optics, rays, media;
  * perform a ray trace
  * parse the graphic options




31 Dec 2007   Testing A57: problem not re-tracing for new data.
(The layout optics features are reanalyzed but the rays are not run.)
InOut properly conducts a fresh ray trace using fresh parse data
from .OPT  .RAY  .MED as it should.  But Layout, while properly
picking up fresh .OPT data, does not conduct its own ray trace:
it shows the trace results from the previous InOut run. 
This makes Layout's optics artwork inconsistent with its ray artwork.
Need to have Layout do a fresh trace whenever .OPT .RAY .MED is
changed. 
^^FIXED: the call to RT13.iBuildRays() had been inadvertently
dropped from Layout::doTechList() as part of its prep for new art.
Instead that call had moved into doParse(). 
Calling RT13.iBuildRays() is mandatory in each output function; it need
not appear within doParse() since doParse() is optional. 
However there is one exception: MultiPlot will conduct many calls
to RT13.iBuildRays(), and perform scaling on each ngood, so that
it need not prepare in this manner.  Still, having it there is
a low cost commonality with other doTechList() methods. 


30 Dec 2007   Testing A57: problem in ruler()
During testing of H2D I found that some data sets give an oddly
offset distribution, mis centered from where it belongs.  Example
is TMA73: xfinal yfinal are properly centered but x4 y4 are not.
Found wrong index to the vticks[] array....
        d = vticks[nhticks-1]; << should be nvticks-1 not nhticks-1.
^^FIXED; now works properly. 



30 Dec 2007   A57: IMPLEMENTATION OF UO TESTING/WARNING
and (at long last) the *unification* of parsing and sizing.

1.  In Options, validate the UO fields, then alert the graphic.
Here the client method getUOwarning() is *totally isolated*
from the client fields; it works in a local vacuum since it
must be fully static (client fields are dynamic so as to permit
multiple distinct displays based on differing UO field sets). 

            // validate these new fields....
            String warn = Plot2Panel.getUOwarning(); 
            if (warn.length() > 0)
            {
                JOptionPane.showMessageDialog(null, warn, 
                  "Invalid Entry", JOptionPane.WARNING_MESSAGE); 
                return;
            }
            // If OK, alert top graphic if it is this type...
            if (RM_PLOT2 == DeskMenuFrame.getFrontGJIFType())
            {
                GJIF g = DeskMenuFrame.getFrontGJIF();
                g.doParseAndPlot(); // GPanel method
            }

2.  In GPanel, arrange for a general purpose doParseAndPlot().
Here, the protected field bParsed holds current status of the
UO fields, and if false allows client to parse again.  Otherwise
the parsing and sizing is locked out so that pan/zoom/twirl
can have its effect on the graphic. 

    public void doParseAndPlot()  // Called when Options change
    {
        bPleaseParseUO = true;    // allows client doParse().
        getNewArtwork(true);      // implemented locally.
    }

3.  In client, eliminate UO analysis or sizing from the constructor.
Instead, build two similar UO field accessors:

    public static String getUOwarning()
    // Analyzes UO fields, totally static, no local fields.
    // Called by Options; called again within client. 

    private void doParse()
    // Analyzes UO fields, dynamic, writes results into local fields.
    // Also performs sizing for proper display of new data. 
    // It will see only prevalidated UO fields; needs no error msgs. 
    // Must set GPanel flag bParsed = true. 

4.  In each client, sensitize doTechList to the prospect of having
a potential parse opportunity, governed by the bParse flag of GPanel.
If there is a problem that the user did not fix during Options, now
is the time to backstop that trouble with a second line of defense
and show the warning message again.  GPanel has a utility warning
message builder for myTechList: doHostWarning() that can be used. 

    protected void doTechList(boolean bFullArt) // replaces abstract method
    // Called by GPanel when fresh artwork is needed.
    {
        String w = getUOwarning(); // local, static.
        if (w.length() > 0)
        {
            doHostWarning(w);      // in GPanel.
            return; 
        }
        nsurfs = DeskMenuFrame.giFlags[ONSURFS];       // always needed.
        nrays = DeskMenuFrame.giFlags[RNRAYS];         // always needed.
        ngood = RT13.iBuildRays(true, nrays, nsurfs);  // always needed.
        if (bPleaseParseUO)        // in GPanel.
          doParse();               // local, dynamic parse & sizing.
        doArt();                   // local, dynamic. 
    }


NOTICE THAT WITH THIS PARADIGM, RT13.iBuildRays() is computed prior to
every doParse() and that therefore it is unnecessary for doParse() to
include this task.  










28 Dec 2007    A57: Installing getUOwarning() everywhere.
Design  at least two ways to go:

1.  Let a window gain new params from options whenever the
options change.  Allows the use of a single window on screen
to view many possible views.  Here, if there is a single
bSized flag, Options would have to set this to false when
some change is made to options: clearParsedFlag() or some
such method.   No real need for static, since Options
always knows its GJIF and hence its GPanel.  No need to do
this in the constructor; can try it every time in the
doTechList routine since the flag keeps from reparsing for
every pan/zoom/twirl. 
^^ADAPTABLE WINDOWS PREFERRED

2.  Let a window parse its options exactly once: have an
internal boolean flag bParsed that gets set
when a clean UOwarning first happens, but then thereafter
is locked out from viewing any further changes.  Problem
is that gets stale fast: what were those old parameters?
^^LOCKED OUT WINDOW NOT PREFERRED

I like the idea of getUOwarning() being entirely isolated
from the vars of the client.  With its own private vars,
there is no danger of polluting the parm set of a trial
UO with the dynamic parms of a continuing display.  The
reason to have getUOwarning() be static, is to allow its
being called from Options when there may be no client in
existence anywhere.  Nice to have UO setups available in
advance of their need!

I like the idea of eliminating all parse & size decisions
from the constructor.  The only need for parse & size is
at the time of doTechList, and then it is mandatory to have
control of valid parse yet keep sizing under control. 
Single point of management for parse & size.  







28 Dec 2007    A56: two more leeeetle things about MPlot

1.  The philosophy of having MPlot diagnose its UserOptions
is poor human factors.  The diagnostic should be run at the
instant the user OK's the new options! not later when the 
computational engine gets it.  That may be much later, after
the user has forgotten what is changed, or it might be a
totally different User.  

//////////////////////////////////////////////////////////////
//
//  FAULTY INPUTS SHOULD BE SENSED & WARNED AT INPUT NOT LATER
//
//////////////////////////////////////////////////////////////

To implement the improved philosophy, each UO client should
offer a public method 

    public static String getUOwarning()

that is part of the client computational engine, e.g. MPlot,
but is to be called by Options when "OK" is clicked.  The
idea is that getUOwarning() runs a rehearsal of getting all its
values stashed properly, and emits the single most dire warning
in the UO's that it can identify.  If all is OK, it emits the null
string "".  This warning can be tested for length and used to
control a popup warning from within the options processor.

Every graphic with UO's should offer such a pre-vetting tester,
so that this userCentric treatment can be applied across the board.

If getUOwarning() needs to stash any results locally, that stash should
be static so that Options need not instantiate anything.  But mostly
this is a bad idea since it would forbid multiple options & outputs
to coexist.  Best would be a stash-free version, internal flags only.

However! Not so bad using static fields!  this way getUOwarning() does 
all the work and the only thing left for doParseOptions() is....

    protected void doParseOptions()      // replaces abstract "do" method
    // Call this at startup and whenever UserOptions change. 
    {
        String s = getUOwarning(); 
        if (s.length() > 0)
          myGJIF.setTitle(s); // visible explanation
    }

Feeling is very nice to have Options be able to preverify each set of
data entries prior to running ray traces.  THIS CONCEPT OUGHT TO BE
EXTENDED TO THE OTHER OUTPUT ROUTINES. 

One corollary to this: when there is a warning, don't let the
engine put up its usual window; instead put up a JOptionPane with
the warning.  Interrupt the usual doArt() process. 
^^DONE, for MPlot; works great.  Place doHostWarning() into GPanel
so all graphics can use it when needed. 

Is there any continuing need for doParseOptions() now that
the newer method getUOwarning() has been installed? Nope; the
warning is generated implicitly, at top of doTechList() where
it is explicitly tested for without any prodding from GPanel.

Eliminate doParseOptions() everywhere, and install getUOwarning()
as the implicit part of doTechList() triggered via doParseAndPlot().

   Options line 406  Layout
   Options line 489  Plot2D
   Options line 545  MultiPlot
   Options line 620  Plot3D
   Options line 665  Histo1D
   Options line 726  Histo2D



2.  There is a tiny rewrite needed to handle the case of one
dimensional stepping.  If only one stepvar, then it should be legal
to have empty strings in the nonstepped variable.  At present, this
leads to an error message.  
^^DONE; instead of always parsing the step parms, there is now
a test for nx>1 and for ny>1 in series with the parsers.  Works.




27 Dec 2007   A56: debugging MPlot continued.

Possible cause of trouble JOptionPane.showMessageDialog()
could be **two** calls to the parser in rapid succession?

I yanked the constructor's call to doParseOptions().  Now
there is but one call to doParseOptions() when I run MPlot,
as it should be: that is the call at the start of doArt.

But if I put garbage into Options::MPlot, no MPlot showing,
then later run MPlot, I get the illegible translucent warning
dialog not the clear dialog.  ??

Maybe I am doing something improper with my dialog.  A quick
fix might be to post the message within the title bar of MPlot?
One short phrase should do the job?  

^^titleBar message works fine.
Abandoning the JOptionPane.showMessageDialog;
retaining the titleBar message. 

/////////////// graphics construction sequence /////////////

1.  User requests a new graphic product at the Run menu.
2.  The RunMenuListener (DMF line 822) constructs a new GJIF
  and passes to it the index of the RunMenuItem to be built.
3.  GJIF constructor creates the appropriate specialized gPanel
  and sets it visible, alerting the OS.  
4.  The specific gPanel creates its arrays, calls doParseOptions().
  It does not doTechList, nor doArt, yet. 
  Because it extends GPanel, it offers paintComponent(Graphics g).
5. The OS calls the XPanel's paintComponent() which is GPanel's.
6. GPanel's paintComponent() calls GPanel's drawPage().
7. drawPage() clears its Lists and calls client's doTechList().
8. Finally! client does its math work and calls its private doArt(); 
  client doArt() loads up host's myTechList with items to be drawn.
9. GPanel renders myTechList onto biTech, and blits toat to screen.

////////////////////////////////////////////////////////////


27 Dec 2007 Bug: Options::Graphics fails to update all graphics,
even though Options::XXX succeeds in updating its own graphic. 

In contrast, Options::Editors succeeds in updating all editors at once.



27 Dec 2007 Bug: MPlot does not reject faulty StepVar entries.

EXAMPLE:  Var Stepped along Y = "calgrid"
  triggers "ArrayIndexOutOfBoundsException: -1" at MPlot line 232:
           iatty = REJIF.getCombinedRayFieldOp(sy) % 100; 
           for (int k=1; k<=nrays; k++)
             RT13.raystarts[k][iatty] += dy;
  owing to faulty "-1" value for iatty. 
  "Calgrid" is not a known ray attribute. 
  U.suckInt() yields 0 on absentee integers;
  0 is parsed as a raystart;
  REJIF.getCombinedRayFieldOp() therefore gives -1. 

Need a foolproof airtight parser of strings that can apply a thorough
testing of jsurf and Attrib and output two things:
  jsurf:   0 for raystarts only; 1....nsurfs for optics;  -1 for error.
  Attrib:  RX...RSWAVEL or valid output RayAttrib or valid OptAttrib.

These output attribs should be pretested so as to not cause array
index out-of-bounds faults later.  Particularly tricky with Attribs!
Even trickier, allowing for user accidentally typing lower case x0
meaning X0 since x0 is invalid ray start while X0 is valid ray start.
May I simply move everything toUpperCase()?  All valid StepVars are
upper case:  Raystarts are upper case, optics parms are upper case.
Only use for lower case is in ray output data, not steppable: do we
want a warning for this??  No.  Simply move everything toUpperCase(). 

This new parser "parseStepVars()" should not only verify that the
initial letter is within the range of StepVar possibilities, but *also*
run it past OEJIF.getOptFieldAttrib(s) or REJIF.getCombinedRayFieldOp()
so that the correctly computed attribute number is generated.  And
it should verify that this attribute number is OK before proceeding. 

Should wavelengths be included in set of allowable StepVars?
Yes, if numerical; no, if literal. << LATER




26 Dec 2007   A56: debugging MPlot.
Fixed the failure to automatically update Options.
Installed new span fraction feature.  Works.
Enlarged the max number of grid positions to 9 via MAXMP=9. Works. 

The failed Vert stepper issue:
  Probing the parser shows the var analysis to be correct:
  Horiz= (U, 0) and vert= (X, 7) as it should.  Yet X7 does not step. 
Hmmmm....
  At line 225, where I modify the vertical optic step, I found a wrong
  array index "opx" rather than the needed "opy" ---
  also line 295 where I subtract the modification, ditto. 
^^DONE: fixes the Vert stepper problem. 

Bug #1: changed radii to diameters for span and for display.
Verified user spans now correspond to diameters;
verified that Plot2D spot diagram sizes agree with MPlot sizes.

Crash bug if lower case ray parm "u0" is passed as an argument to
HVAR etc:  needs implicit conversion to upper case to access the
RayStart array as a valid index.  ^^FIXED 26 Dec, see line 225, 226
of MPlotPanel.java now using .toUpperCase() modifier.  works. 

Exploring how to introduce a JOptionDialog that explains the failure
of one or more MPLOT parameters for H,V,X,Y;  easy to create boolean
flags sensing trouble, easy to make the dialog, but there is a hangup
exitting the JOptionDialog: the dialog frame does not disappear cleanly 
from the screen but instead gets partially written over by other frames
and the caret arrow.   ^^NOT SOLVED YET.

Tried replacing JOptionPane.showMessageDialog(null, ....) 
with the more appropriate  JOptionPane.showInternalMessageDialog(myGJIF,...)
without any improvement; still hangs and fails to exit the dialog when
I dismiss it.  

Tried JOptionPane.showInternalMessageDialog(null, ....,)
and it crashes:  "parent Component does not have a valid parent"

Tried
   import java.awt.*;  // container
   ...
   Container cp = myGJIF.getContentPane(); 
   JOptionPane.showInternalMessageDialog(cp, s, 
     "MultiPlot Options Error", JOptionPane.WARNING_MESSAGE); 
but now instead of getting an alert, BEAM FOUR just hangs, no evidence
of any problem. 

Tried
   JOptionPane.showInternalMessageDialog(myGJIF, s, 
     "MultiPlot Options Error", JOptionPane.WARNING_MESSAGE)
and it crashes:  "parent Component does not have a valid parent"
which is strange since myGJIF is a known good JInternalFrame. 

Tried
   JOptionPane.showMessageDialog(myGJIF, s, 
     "MultiPlot Options Error", JOptionPane.WARNING_MESSAGE); 
gives no crash, recovers OK, but requires *two* clicks to dismiss the
warning message box; first one clears primary warning dialog, but
it is replaced by a more ghostly dialog requiring a second click. 

Maybe I should put the text warning into my MultiPlot screen! 
Instead of trying for a JOptionPane?  That way there'd be no need
to dismiss anything; the next Option::MPlot would correct the artwork. 









25 Dec 2006   A56: MultiPlot testing
Looks great.  Test plan includes:
  1. Calibrate spot sizes against Plot2D spot sizes
  2. Verify delta coordinates are correct; polarity?
  3. Verify that ray, optics params are not spoiled by MPlot
  4. Verify recovery from garbage inputs.

Test article TMA73.OPT and TMA73.RAY first 33 rays, fill pupil, U0=0.006.

1. Evident spot height = 19um, width = 10um;
MPlot says "Box size = 1.293E-05" yet fits comfortably.
==> indicates box size is radius; change to diameter.
User specified box size agrees with displayed box size,
so that needs to be changed to diameter as well.

2. Deviation size is evidently correct, comparing with manually
installed deviations of Z2 (secondary mirror piston); rightward
is positive deviation in parameter, upward is positive deviation.

3. By alternating MPlot and Plot2D, verified that there is no
apparent coordinate spoilage. 

4. Garbage coordinate inputs: screen turns black.  FIX THIS.
We need a pop up dialog saying what is wrong.

Odd bug: need to click & nudge the graphic to make it recompute
after each Option change, as if the re-parse command from Options
were failing to be communicated.  AHA setting the Plot2D BlkBkg
flag causes MPlot BlkBkg! so the options are crosswired.  Probly
explains the bug.
^^FIXED 26 Dec. 

Bug:  Stepping Z2(w) vs Z2(h) makes a nice diagonal spot map as it should.
      Stepping Z2(w) vs Z0(h) makes a nice vertical spot map as it should
but   Stepping Z0(w) vs Z2(h) makes a uniform spot map: no changes anywhere!
..it should make a horizontal trough.  somehow there is a failure to parse, 
or overwrite, in the Z0 thing.

Future feature: the 80% ratio of span/gridcell should be user
selectable, for those who might want to show one small pixel in a larger
field, or some such. 
^^DONE 26 Dec; works. 



22 Dec 2007  A56: installing MultiPlot
Idea is to introduce a grid of Plot2D diagrams, with parameters
being incremented to show through-focus or across-field variations. 
Also! could show internal variations in optics positions etc. 
But! no ganging or solid-body motions, yet. 

Be *very* careful that after an optics/ray table datum is perturbed,
it gets put back to its nominal value, lest this "feature" create
a hard-to-find bug of inconsistency. Subscript 0 means raystart;
subscript > 0 means optics table. 

13 New UO values:  
  MPLOT_HVAR, MPLOT_HSPAN; MPLOT_VVAR, MPLOT_VSPAN; 
  MPLOT_NX, MPLOT_XVAR, MPLOT_XDELTA;
  MPLOT_NY, MPLOT_YVAR, MPLOT_YDELTA;
  MPLOT_BOXSIZE;
  MPLOT_BLKBKG;
  MPLOT_SPARE;



15 Dec 2007   A55, fixing occasionally flat mirrors----
Testing with CASS.OPT modified so its surf3 is "irisA"

Plan of attack: since both Layout and InOut agree that the
stricken member surfaces are all plano, their common code must
be to blame.  This is highly restricted! and lies in RT13.java and 
in Z.java -- with Z.java being responsible for all the surface
profiles.  Suggestive, what? 

Yet! Z.java functions handle only one surf[] per call.  
No Z method has access to the entire array surfs[][], and so none
of them could be individually responsible for corrupting all the
curvatures, or communicating a faulty IrisArray behavior to the
entire surfs[][] array.  

RT13.dIntercept (line 630) has a special diversion calling
dPlaneSolve() for the case of OTIRISARRAY; looks harmless. 

Could there be some corruption, then re-parsing() fixing the
corruption just prior to my rediagnosis? so it looks OK at
diagnostic time, yet is bad during InOut or during Layout??
I'll install some visibility into Layout... at line 826....
^^RESULT IS... surfs[][] is not corrupted.  

Maybe the OTYPE is getting corrupted? to be IrisArray?
hence calling OPLANO without any reference to surfs[]?
^^RESULT IS.... nope, type=mirror, surfs[][] is not corrupted. 

[Unrelated oddity: why is final surface in CASS "distort"?
Oh! the word there is "done" hence "D" hence distort. OK]

Could it be a corrupted solver list?  from OEJIF? 
Yes could be: there is a disconnect between the surface profiles 
list OSXXXX which goes only through 13=OSZERNTOR, and does not
go further to OSIRISARRAY=14, OSMIRARRAY=15, OSLENSARRAY=16.
If some routine tests only for OSOLVER field, ignores the newer
OTYPE field, it could be confused. 
^^YES solvers 1,2,3,4 are Plano when Type3 = irisArray.
Now what writes into the solver fields? 

  OEJIF line 357,  verified at line 390;

RT13 has a lot of special processing for the case IrisArray
for example iIrisArray(), but nothing suspicious.

Here's a sneaky way to discover everything that uses OSOLVER:
rename it to something else, say OPROFILE; the compiler will force
new consideration of each user, one of which is modifying the
contents to OPLANO illegally. 

OK: exactly seven error messages are produced by renaming.
1. OEJIF line 357 initial calc & setting of OPROFILE. OK
2. OEJIF line 389, debugger output.  OK
3. RT13 line 144, debugger output.  OK
4. RT13 line 634, dIntercept() *after* bailout from OTIRISARRAY.  OK.
5. RT13 line 699, dQuadSolve().  OK
6. Z line 37, dGetZSurf() only using to guide switch.  OK. 
7. Z line 66, getZnorm() only using to guide switch.  OK.

All these uses are legal, darn it.  Could the fault be lurking
within the initial setup OEJIF line 357?  Installing reporting...

^^HA. FOUND IT: in OEJIF line 272 and 280, parse's testing array
optics (the new code from September).. instead of "continue" there
are "return" statements!  These abandon the parse() when encountered,
thereby (a) not performing the DEBUG output, but also not installing
the correct iProfile numbers at line 357. 


RULE: NEVER USE 'RETURN' WITHIN A PARSE() METHOD. 
  EVERY PARSER MUST COMPLETE ALL ITS STEPS BEFORE EXIT. 




14 Dec 2007  A54: Seemingly flat mirrors??
TMA79.OPT has some powered mirrors, computed just
fine yesterday, but today all mirrors trace as flat!
Same trouble with A51 and A53.  
Nothing is obviously wrong with the file....


 12 surfs TMA79.OPT   7 bands swath=14 46.2mm det EFL=22m.
   X          Y       Z     pitch  roll  Curvature   aspher   f   Diam    diam   Mirror?
---.-------:-------:--.----:-----:------:--.-------:---.-----:--:-------:-------:---------:--
   0       :  0    :  0    :     :      :-0.2049044: -0.98288:  : 2.0   : 0.6   :mir pri  :
   0       :  0    :-2.00  :     :      :-0.9496194: -1.78524:  :       :       :mir sec  :
   0       :  0    : 0.6   :     :      :          :         :  :       :       :iris FS  :
   0       :  0    : 1.000 : 45  :      :          :         :  :       :       :mir fold :
 -0.800    :  0    : 1.000 :-90  :      :-0.7545789: -0.61353:  :       :       :mir tert :
   0       :  0    : 1.000 : 45  :      :          :         :  :       :       :iris fold:
  0.830    : 0.0   : 0.6407: 90  : 45   :          :         :Ss:       : 0.1386:irisPM   :
  0.830    :-0.2734: 1.000 : 90  : 45   :          :         :Ss:       : 0.2148:iris     :
  0.830    :+0.2734: 1.000 : 90  : 45   :          :         :Ss:       : 0.2148:iris     :
  0.830    :  0    : 1.2734: 90  : 45   :          :         :Ss:       : 0.2148:irisAft  :
  0.830    :  0    : 0.9673: 90  : 45   :          :         :Ss:       : 0.3234:irisVign :
  0.830    :  0    : 1.000 : 90  : 45   :          :         :Ss: 0.6468: 0.2772:irisFP   :

...when I delete rows 6-11, and have only 6 surfaces, it is OK.
When I leave all 12 surfs, and specify use of first 6 surfaces, OK.
Or 7, 8, 9 or even 10 surfs, OK
But 11 surfs: fail, all mirrors become flat. (!)
Spacing the final five surfaces apart does not help. 
Changing the Type of the final six surfs to blank: OK.
changing the header from Mirror to Type: no change.
Changing "irisAft" to "iris"  fixes the problem!
  ^^ Bizarre!
irisa  <<bad
irisA  <<bad
irisb  <<ok
irisc  <<ok
iris1  <<ok

Similarly, in CASS.OPT putting an "irisA" into its list
obliterates all the surface curvatures.  

Hmmm: the Layout under this fault condition is not drawing irises
everywhere, it is drawing lenses and mirrors, but flat ones.  And a
diagnostic in RT13.iBuildRays shows the SurfType = mirror as it should.
Indeed, rays reflect there! but from a flat surface not curved. 
The curvature displayed using DebugLevel>3 shows oCurve=-0.04, not zero,
correct = -0.04 as per CASS.OPT so how can this be happening. Looks like
it is not a parser problem because RT13 is getting the right data. 

Ha: in OEJIF line 112 is the surface type parser, containing....

                 case 'i': // iris
                 case 'I': RT13.surfs[jsurf][OTYPE] 
                             = (c4=='A') ? OTIRISARRAY : OTIRIS; break; 

which explicitly tests the fifth character for being "a" to split out
irisArray from being a plain iris.  So now how can this sneak into
other surfaces and corrupt them???  Iris arrays are flat; somewhere there
is some snippet of code that flattens iris arrays; perhaps it is flattening
everything?  

This snippet cannot be within OEJIF because RT13:iBuildRays (line 124)display 
diagnostic shows healthy surfaces as we start the trace.  

Hmmm.  Running InOut or Layout does not appear to corrupt surfs[][]
since the diagnostic RT13.iBuildSurfs (line 124) continues to show the
proper curvatures & shapes in CASS.OPT -- yet these output functions
agree all curvatures act as zero.  Where are they getting their curves??






-------------------------------------

Testing on the 640x480 VGA computer: some of the Options dialogs are
too tall to allow clicking the OK button.  Trouble seen with...
  Layout
    --perhaps make check boxes horiz rather than vert?
    Hruler  Vruler  Xaxis  Yaxis  Zaxis
      [ ]    [ ]     [ ]    [ ]    [ ]
  ^^DONE -- MUCH BETTER

  Plot3D
    --perhaps make radio buttons horiz rather than vert?
  ^^DONE  -- MUCH BETTER

  RayGenerators: 2D Circular Pattern
    --maybe two columns of radio buttons?
  ^^EVEN BETTER: USE A JSPINNER CONTROL 1...17 CIRCLES.  
  ^^DONE. WORKS. SLICK.


-------------------------------------------------



28 Nov 2007  A54: two tiny fixes.  Both work. 

1. In InOut, instead of just showing Nterms, I now also show Nrays.
 The new code in InOut.java is...

        String srms = "RMS = "+U.fwe(rms) + '\n'
                     +"using Nrays = "+U.fwi(ngood,9).trim() + '\n'  
                     +"and  Nterms = "+U.fwi(npts,9).trim(); 

2. In EPanel, CopyFieldDown used to overrun by one line at the
  bottom of the page.  Changed the limit test from...

        if ((jCaret>RULER) && (jCaret<nlines))
  to...
        if ((jCaret>RULER) && (jCaret<nlines-1))




27 Nov 2007  A54: Fatter lines in Stereo?  GPanel::renderList()...

               case LIGHTLINE:
                  float fLight = (dStereo == 0.0) ? 1.0f : 2.0f; 
                  gX.setStroke(new BasicStroke(fLight, 
                    BasicStroke.CAP_ROUND, BasicStroke.JOIN_ROUND));   
                  break; 

               case HEAVYLINE:
                  float fHeavy = (dStereo == 0.0) ? 1.5f : 2.0f; 
                  gX.setStroke(new BasicStroke(fHeavy, 
                    BasicStroke.CAP_ROUND, BasicStroke.JOIN_ROUND));   
                  break; 

Seems to work! better apparent brightness. 

26 Nov 2007  A54: better stereo blue?

In stereo, one problem has been that the blue side is too faint.
This might be due to two problems:  1. Blue is inherently fainter;
2. Blue is rendered at 50% transparency.   If so, better would be
to lay down the blue image first at 100% opaque hence brighter,
then lay down the red image at 50%.   Worth a shot.  Would avoid
having to add in some green making cyan.   

Or, with cyan, could allow 25% transparency, reducing red shadows. 
BUT allowing any green would make crosstalk leakage very dependent
on the user's choice of goggles.  To have low crosstalk for every
user, want pure red and pure blue. 

In Constants:  final double STEREO = -0.001; 
In Constants:  final Color TRED = (255, 0, 0, 128); 

In GPanel:  keeping gX.setPaintMode() for all drawing; 
and instead of 
                      if (dStereo > 0.0)
                        colorcode = RED;
                      if (dStereo < 0.0)
                        colorcode = 10; 
trying...
                      if (dStereo > 0.0)
                        colorcode = BLUE; // solid blue;
                      if (dStereo < 0.0)
                        colorcode = 10;   // TRED = translucent red. 

and of course set the constant STEREO to -0.001 (rather than +0.001)
so that the solid blue goes first but stays left=foreground. 

------------------


25 Nov 2007   A53: Bringing in (Hor,Vert) position indicator from A52
Following the steps from A52, retaining the stereoscopic A51 feature. 
Works!  Now Layout, Plot2D, and MTF have digital cursor readouts. 

-------------------

21 Nov 2007   A52: digital cursor readouts for Layout, Plot2D, MTF.

Sholl wants to see the (x,y) coords of the crosshair to measure
things on screen.  Great idea!

1.  In GPanel, under MouseAdapter add the exit signal...

        public void mouseExited(MouseEvent event)
        {
            doCursor(-1, -1); 
        }

and under MouseMotionListener, add the coordinate communicator:

        public void mouseMoved(MouseEvent event)
        {
            doCursor(event.getX(), event.getY());
        }

2.  Arrange for GPanel to also supply the user coord functions....

    double getuxPixel(int ipix)
    // converts raw window pixel number into user ux
    {
        return uxcenter + (ipix-imid)*uxspan/dUOpixels; 
    }

    double getuyPixel(int jpix)
    // converts raw window pixel number into user uy
    {
        return uycenter - (jpix-jmid)*uyspan/dUOpixels;
    }

3.  Arrange that every interested client XPanel will receive the mouse
integer coords, to ignore or to utilize according to its nature.  Note
that clients, as well as GPanel, can access myGJIF.setTitle(), to post
the name of the panel, or the time of day, or a complaint about setup,
or (yes) even show the cursor position in the user frame: 

    abstract void doCursor(int ix, int iy); 

4.  Install a concrete method into all seven XPanels:

    protected void doCursor(int ix, int iy) // replaces abstract "do" method
    {
        return; 
    }

5.  For Layout, Plot2D and MTF (which are plotted in real user units rather
than being plotted in sterile unit cube coords) show the user coordinates: 

    protected void doCursor(int ix, int iy)  // replaces abstract "do" method
    {
        if (ix<0)
          myGJIF.setTitle("Layout"); 
        else
        {
            String sHor = U.fwd(getuxPixel(ix), 12, 6).trim(); 
            String sVer = U.fwd(getuyPixel(iy), 12, 6).trim(); 
            myGJIF.setTitle("Hor=" + sHor + "    Vert=" + sVer); 
        }
    }

--------------------------------




24 Nov 2007   A51: Stereoscopic 3D for Layout & Plot3D

Here's how GPanel::renderList() puts down a solid color base layer and 
then layers a second rendering on top with the base color able to
show through (essential for stereo), so that every pixel with both
red and blue turned on appears as magenta and lights up both eyes:

        if ((dStereo == 0.0) || bClear)    // mono, or first stereo layer
          gX.setPaintMode();
        else
          gX.setXORMode(Color.BLACK);      // stereo second layer. 

* Bug:  although Layout looked ok as FullArt, its stereo skeleton was
double red instead of red/blue.  Problem was traced to the lack 
of a SETCOLOR statement starting Layout::doSkeleton() and was
discovered by trying doFurniture() ahead of doOptics().  Turned out that
doFurniture() included the initial SETCOLOR while doOptics() lacked
that initializer.   The SETCOLOR initializer is crucial in stereo since
that is where the red/blue flag gets inserted.   <<FIXED.

*  BUG:  doFinish artwork looks imperfect in stereo yet is OK in mono.
I am guessing that the bClear=true (red) art is getting setPaint() OK
but that the subsequent doFinish bClear=false (blue) art sits directly
on top of the initial blue artwork. When XOR gets applied a second time, 
atop the preliminary blue Layout artwork, it reverses the otherwise good
appearance.  Perhaps need to preBlacken the Finish items? so that 
the subsequent red + blue finish art is properly rendered???  Perhaps
something like this in GPanel::doFinish() .....

    doFinishArt(); 
    if (dStereo == 0.0)
      renderList(myTechList, g2Tech, dStereo, setPaint); 
    else
    {
        renderList(myTechList, g2Tech, dStereo, setPaint, black); 
        renderList(myTechList, g2Tech, -dStereo, setPaint, black); 
        renderList(myTechList, g2Tech, dStereo, setPaint, red); 
        renderList(myTechList, g2Tech, -dStereo, setXOR, blue); 
    }

Why this complexity?  It would not be sufficient to simply turn on
setPaint for the final blue layer since that would wipe out the needed 
underlying red.   Yet where there is no red, demand a true black
background lest the XOR fail.  Best would be a paint mode that simply
**adds blue** to each pixel, regardless of its previous contents.  
Is there such a mode??? Cannot find such a feature. 

LACKING ADDITIVE COLOR there is a transparent "alpha" parameter for
every AWT color:  TBLUE = new Color(0, 0, 255, 128); with the final
parameter being alpha, 0=invisible, 255=opaque.  Eliminates the need
for the XORMode().  But now, cannot get good left right balance 
since red is unit power and blue = half power.   Possible fix:
perform red/cyan stereo, with TCYAN = (0, 255, 255, 128) being twice
the pure power but half transparent so that some red shows through.
(Would be nicer still to have *all* the red show through: no shadows.)
Maybe can tilt this somewhat to favor the red: TCYAN=(0, 255, 255, 88).
Needs some experimenting, and some red/cyan goggles.  
^^NOT too overwhelming. 

BEST 3D arrangement found as of 25 Nov 2007 is:
  1. Abandon the XOR for the second layer...

        if ((dStereo == 0.0) || bClear)    // mono, or first stereo layer
          gX.setPaintMode();
        else
          gX.setXORMode(Color.BLACK);      // stereo second layer. 

    and instead revert to the plain setPaintMode().  
    Yes it blocks some red but overall looks better.  

  2. Use static final Color TBLUE = new Color(0, 255, 255, 128);
     Sorry to block so much red; leaves unpleasant shadows. 
     This is reasonably bright if used in a darkened office. 
     Lesser choices have too little blue darn it. 

  3. Use red/blue goggles; the red/cyan fails to block the red. 

  4. For Layout, use coef=0.5%;  for Plot3D use coef=1%


* BUG: Plot3D is gorgeous in mono but the ray dots vanish in stereo.
Also the rulers look very ratty and are double red.  Perhaps Plot3D 
lacks explicit SETCOLOR statements at the beginning of each component?
Yes: rulers now appear red+blue since I added the initiator...

        addXYZO(SETCOLOR + (whitebkg ? BLACK : WHITE)); 

Still no stereo ray dots however. Black on black?  Absent dots??
^^ FIXED; in GPanel, I had stuck in a modification of colorcode...

                      if (dStereo > 0.0)
                        colorcode = RED;
                      if (dStereo < 0.0)
                        colorcode = BLUE; 

but later used colorcode to get the dotcode as if it were unmodified.
Fix is to correctly evaluate dotcode independent of colorcode mods.

Also broken: cannot get white background to function; always black. 
^^ FIXED; Plot3D was testing UO_LAY_STEREO not UO_PLOT3_STEREO. 




17 Nov 2007   A51: STEREO 3D?

Cardboard anaglyph 3D glasses:  Beresin Stereo Products, 
  21686 Abedul, Mission Viejo CA 92691 949-215-1554
  www.berezin.com/3d  or 3d@berezin.com
  Bought 10x glasses #545 (red/blue)  $4.50/ten  << good
  and    10x glasses #545C (red/cyan) $4.50/ten  << not good
  14 Nov 2007 invoice MIC14175 prepaid MasterCard
  Received 18 Nov 2007 -- look good.  Do they print? Nope ink rubs off. 
  For a trade show want to emblazon STELLARSOFTWARE.COM
  onto every pair, to attract customers.
  Asked about printing "Stellar Software"  <<nope, min=5000.
  Asked about better ones #542  << steve;  

  27 Nov ordered five 542 and two 543 clip ons. 
  ^^ Yikes the 542's aren't blue they are Cyan; leaks some red. 
  6 Jan 2008: emailed inquiry about 542's but red/blue not red/cyan
  ^^ However the 543 clip-ons are blue not cyan & work great.


See also...
  http://www.rainbowsymphonystore.com/scienanded1.html
  Red/blue in cardboard, plastic, clip-ons
  Item # 03401, $6.95, Anaglyph ProView Professional
  6 Jan 2008, queried... rainbowsymphony@rainbowsymphony.com
  6 Jan 2008, Mark S Margolis responded...will send a sample. 
  Mark, Rainbow Symphony, Inc.
  http://www.rainbowsymphony.com
  Ph# 818-708-8400  Fax# 818-708-8470


Experimenting with 3D in the file group \Java\Stereo
  1. timer driven tetrahedron roller  StereoTimer.java
  2. mouse driven tetrahedron roller  StereoMouse.java
Experimenting with the depth coefficient parameter STEREO=0.04
seems to work OK; STEREO=0.02 seems a bit flat.  Want to grab
the audience by its eyeballs. Using SunSoft red/blue spectacles,
red=left eye, blue=right eye.   Seems to work OK. 

Major elements are taken from BEAM4::GPanel in particular the
routine drawPage gets  **two** calls to renderList, both
rendering the very same artwork from one call to doTechList():

        doTechList();                     
        renderList(myTechList, g2Tech, dim, dStereo, true);  
        renderList(myTechList, g2Tech, dim, -dStereo, false); 

Issue: myTechList will already carry an initial SETBLACKBKG instruction
as per the user request, and this must be denied on the second call,
and even modified on the first call to guarantee a black stereo background.

Later in renderList(), overwrite client color selection:

                      int colorcode = opcode % 10; 
                      if (dStereo>0.0)
                        colorcode = RED;
                      if (dStereo<0.0)
                        colorcode = BLUE; 

In renderList(), for best merged colors, use appropriate mode....

        if (iOffset==0)
          gX.setPaintMode();
        else
          gX.setXORMode(Color.BLACK); 

For stereo I setXORMode(Color.BLACK) so that successive writes to
pixels can build white (magenta, actually) where there is to be
both red and blue.  
^^FAILS: the setXOR() makes ratty looking lines and arcs, as if
each pixel gets written several times in writing an arc, thereby
finding it in an undermined color when the final write occurs. 
Nice solid looking arcs and curves need the PaintMode.  And while
beautiful in monoscopic vision, cannot use PaintMode in stereo
because red will be totally overwritten by blue (black in red eye)
eating great holes into the presentation. 

Phooey. 

Here's a way to get nice blue, nice red, and nice magenta where they
overlap:   Use setPaintMode() for the first layer (red, say); then
for the second layer, use setXORMode() which will properly respond
to the fully paved first layer colors.  

Issue however is the "finishing touch" where we repaint the foreground:
this artwork sees underlying art same color and cancels itself out by
XOR process, so that the bold foreground becomes a ratty disappearing
foreground.  Should revert to solid setPaint() for the first color,
and then another setXORMode() for the second color of finish. 

Other little things not fixed:  Rulers are always blue since their
red was overwritten (rulers have z=0) and we have no way to merge
two colors into Magenta.   Also: Skeleton is red and double; should
be red/blue not red/red.   Caret is OK. 


===========================================================

To add to rev30.DOC:
  * new installation instructions
  * new autoadjust instructions
  * new description of LAYOUT functions

=======RISK===============
If the user installs an unzipper, and it is .JAR capable,
it might associate itself with the .JAR suffix, thereby
blocking Java's requisite .JAR response.  

========RISK MANAGEMENT========
1. Recommend only those unzippers that are non-JAR.
2. Recommend that the user perform a JAR test:
   arrange a free downloadable BEAMDEMO.JAR article that
   runs properly iff the .JAR association is OK.
  
========BETTER STILL: DISTRIBUTE ZIP=========
1. Provide a downloadable BEAMDEMO.ZIP that has a .PDF page
and a .JAR application.  Urge prospective buyers to download,
unzip, check out the .JAR app demonstrator.  Also provide a
version sniffer JAVATEST.JAR right there on the website.  



*************** User Instructions **********************

1.  Verify your computer's Java Runtime Environment (JRE):
  First, go to http://www.javatester.org/version.html
  then read the message that appears in the pink rectangle.       
  BEAM FOUR requires version 1.4.0 or higher.
  If yours is older, or absent, go to www.sun.com then select
  Downloads::Java SE, then download and install the JRE that is
  appropriate for your computer.

2.  Create a Ray Tracing directory on your desktop or somewhere
  that's easy to find.

3.  From BEAM4.ZIP, extract the .PDF, .OPT, .RAY files to that directory.
  (Ignore the  "com" directory and .class files in the package.)

  *  On MAC OS-X: With BEAM4.ZIP on your desktop, double click it
     and the OS will create a temporary desktop folder BEAM4 that
     contains all the necessary files. You may haul these to your
     Ray Tracing folder, or use them in place.

  *  On older Macs and on PCs: you will need to use an unzipper.             
     If you don't have one, some free downloadable ones are...
         jZip, QuickZip;
     Some downloadable ones with free trial periods are....
         Stuffit, WinZip, PicoZip, TurboZip.
     Unzippers usually work by double clicking a .ZIP file.
     Or, use the File::Open menu item and navigate to your .ZIP file.
     Unzip your BEAM4.ZIP and haul the needed files to your Ray
     Tracing folder.

4.  Haul BEAM4.ZIP to your Ray Tracing folder too.  
  ^^^Why not have a BEAM4.JAR inside the .ZIP???
  ^^^Thereby avoiding step 5 below???

5.  Change its suffix from .ZIP to .JAR and say OK to the usual
    OS complaint about changing the suffix of a file name.

6.  Test the software  -- double click the .JAR file:
     BEAM4 should run, showing its empty workspace.
     Drag and drop LENS.OPT and LENS.RAY into the workspace.
     The files should open.
     Run Layout.
     Click and drag the layout artwork, zoom with mouse wheel, etc.

7.  Check out the manual -- double click the xxx.PDF file:
     The BEAM FOUR owners manual should open.






12 Nov 2007   A50  Deploying Applications

On MS-Windows Vista, .ZIP file contents are automatically made visible by 
double clicking, and the content files can be dragged to wherever they are
wanted.  

On the Mac OS-X, when you double click a file XXX.ZIP, two things happen:
1. a folder XXX is created next to the .ZIP file;
2. each ingredient file is extracted into the XXX folder.
So, if we distribute BEAM4.zip, the end user can put onto his desktop,
and double click it, and *presto* there on his desktop will appear a new
folder "BEAM4" containing the MANUAL.PDF, the demo files, and BEAM4.JAR
ready to run.    [If there is already a BEAM4 folder on the desktop, then
Mac OS will not touch that, but instead create "BEAM4 2" on the desktop.]

http://www.macosxhints.com/article.php?story=20050916045108565
  "All seems a bit of a hassle to me. I've just set BOMArchiveHelper 
  (which is the Finder .zip helper application in /System/Library/
  CoreServices) to be the helper app for .jar, .ear and .war files. 
  To do this, Get Info on a file of each type and change the helper 
  app in the Open With section. Don't forget to click the Change All.. 
  button to apply this to all files of the same type."

Is the jar command part of the JRT or the JDK?  JDK, I betcha. 

http://www.stuffit.com/win/expander/index.html
  "Expander" is the free decompressor from Stuffit. 
  "free" means you have to sign up, receive nagging "Upgrade" emails...
  The free expander expands only .sitx and .zip files nothing else.

FileStream TurboZIP  $49.95  Handles ZIP, JAR, many others
  http://www.filestream.com/turbozip/

Acubix PicoZip    www.picozip.com  $24.95
  Win 95, 98, NT, 2000, ME, XP; maybe Vista.
  Compresses (20 formats including .jar)
  Decompresses (55 formats including .jar)
  Makes self-extracting files

WinZip (original) at Tucows Software Library for Windows
  http://www.archive.org/details/tucows_194294_WinZip

Quick Zip   Free; 4.60; Win 95...through Win Vista.
  http://www.download.com
  http://www.quickzip.org/softwares-quickzip
  Publisher: Joseph Leung, http://help.quickzip.org
  Installed onto Lenovo  12 Nov 2007
  Reads and writes 30 formats **including .jar***
  Oddity: perhaps dead now; entire website ceased updates in
  Sept 2006.  A few bizarre bugs in the user interface: for example
  both "New" and "Open" take user to "open" so no obvious way to create
  a new .ZIP file. User site is now 404 Not Available. 

jZip  Free for Win XP and Win Vista only. 
  http://www.jzip.com
  Reads ZIP, RAR, GZIP, TAR; not JAR.
  Writes ZIP.
  Downloaded to Lenovo; works.  To make a ZIP do this:
  1. run jZip,
  2. drag all files into its left hand workspace, 
  3. the "Add" dialog pops up showing the number of files
  and asks what to name the new zipfile;
  4. Enter the desired location and filename, and click [Add].
  5. A "Compressing" dialog pops up, shows progress. 
  6. Test everything!



================================================

Jar builder file p.bat:
  del BEAM4.jar
  jar cmf MyMan.mf BEAM4.jar rev30.pdf TMA72.OPT TMA72.RAY com\stellarsoftware\BEAM4\*.class

..produces a BEAM4.jar whose size is 1382 kBytes... Actual size 1414532 bytes. 
Obviously contains the manual.  

Moving to \java\test\ this BEAM4.jar extracts OK with...   jar xf BEAM4.jar
Delivering five items:
   directory com
   directory META-INF
   rev30.PDF
   TMA72.OPT
   TMA72.RAY

Also works on the MacBook.


12 Nov 2007   A50  Deploying Applications

http://www.topshareware.com/Zipeg-download-48531.htm; 
www.zipeg.com
  ZIPEG is free zip/unzip jar/unjar utility; Win; Mac. Free. 

http://www.jzip.com/
  Free, MS-Windows only (Mac & Unix are coming in 2008) no .JAR
  ..but copy BEAM4.jar ==> BEAM4.zip then unzip. 

http://camtech2000.net/Pages/UnZipMe.htm
  Free, but .ZIP only no .JAR

http://www.world-of-newave.com/zipwave/en/index.htm
  ZipWave  $18.00 shareware; TAR JAR ACE GZ GZIP ZIP LHA...

http://www.menonsoft.com
  ShellZip 3.0 free, Windows only, ZIP, SQX, LHA, TAR, GZ, GZA; no JAR

http://www.duckware.com/jobfuscate/index.html
  Duckware's commercial Java obfuscator. 
"Installing Jobfuscate should automatically add the jobfuscate.exe installation 
folder into the PATH environment variable on Windows Vista/XP/2003/2000/NT.

  Windows Vista/XP/2003/2000/NT: Right click on My Computer and select Properties; 
  Select Advanced tab; Click on the Environment Variables button; 
  Select the PATH variable; 
  Click on the Edit button.

Windows ME: Go to Start / Run / 'msconfig'; 
  Select the 'Environment' tab; 
  Select the PATH variable; 
  Click on the Edit button.

Windows 98: Find "c:\autoexec.bat" within Windows Explorer; 
  Right click on the file; 
  Select 'Edit'; 
  Modify the "SET PATH=paths line that you see; 
  Then reboot your computer. 


http://java.sun.com/developer/technicalArticles/JavaLP/JavaToMac3/
 ... Mac OS-X deployment issues. 

http://java.sun.com/developer/TechTips/index.html
...a general window into developer issues.


http://www.netbeans.org/kb/articles/javase-deploy.html

"Troubleshooting JAR File Associations:

On most systems, you can execute an executable JAR file by simply 
double-clicking the JAR file. If nothing happens when you double-click 
the JAR file, it might be because of either of the following two reasons:

    * The JAR file type is probably not associated with a Java Runtime 
    Environment (JRE) on that system.  (If the JAR file type is associated 
    with a JRE, the icon that represents that file is a Java logo.)

    * The JAR file type is associated with the JRE, but the -jar 
    option is not included in the command that is passed to the JRE 
    when you double-click the icon.

Note: Sometimes JAR file associations are switched by software that you 
install, such as software to handle zip files.

To add the JAR file association on Microsoft Windows systems:

   1. Make sure that there is a version of the JRE installed on your system. 
   You should use version 1.4.2, version 5.0, or compatible. (If you have 
   the JDK installed, you also get the JRE. However, if you are distributing 
   the program to a non-programmer, that person does not necessarily have 
   either the JRE or the JDK.)

   On Windows XP, you can check for installed versions of the JRE by choosing 
      Start > Control Panel > Add or Remove Software.

   If there is not a JRE on the system, you can get one from the Java SE download 
     site at www.sun.com

   If you have a JRE installed on your system but the file association is not working, 
     continue with the steps below.

   2. Choose Start > Control Panel.
   3. Double-click Folder Options.
   4. Select the File Types tab.
   5. In the Registered File Types list, select JAR File.
   6. In the Details section of the dialog box, click Change.
   7. In the Open With dialog box, select Java Platform SE Binary.
   8. Click OK to exit the Open With dialog box.
   9. Click Close to exit the Folder Options dialog box.

If JAR files are associated with the Java Platform SE Binary on your system but 
double-clicking still does not execute the file JAR file, you might need to specify 
the -jar option in the file association.

To specify the -jar option in the file association:
   1. Choose Start > Control Panel.
   2. Double-click Folder Options.
   3. Select the File Types tab.
   4. In the Registered File Types list, select JAR File.
   5. In the Details section of the dialog box, click Advanced.
   6. In the Edit File Type dialog box, click Edit.
   7. In the Application Used to Perform Action text field, add the following at 
      the end of the path to the JRE:

             -jar "%1" %*

      Afterwards, the field should contain text similar to the following:

            "C:\Program Files\Java\jre1.5.0_06\bin\javaw.exe" -jar "%1" %*

   8. Click OK to exit the Editing Action for Type dialog box.
   9. Click OK to exit the Edit File Type dialog box.
  10. Click Close to exit the Folder Options dialog box.

For UNIX and Linux systems, the procedure for changing file associations depends 
on which desktop environment (such as GNOME or KDE) that you are using. Look in 
your desktop environment's preference settings or consult the documentation for 
the desktop environment."


10-11 Nov 2007  A50  Continuing the autoadjust rewrite:

For easiest user comprehension, adopt a uniform treatment
of the "?" tag and the letter (group) tags.  Explain about
the individual adjustables, and separately about groups. 
 * Question mark tags should work ray & opt, nonganged;
 * Letter tags should work ray & opt, ganged. 
Implementation: 
  1. Adopt a worksaving bDone[][] flags array organized like
     the obsolete cTags[][] array.
  2. Run thru table getTag() chars to set up Adjustments: 
      if (attribute authority != OK)
        continue;
      if "A"..."Z","a"..."z" set up slaves & master Adjustment;
        Multiplier is +1 for same case, -1 for opposite case.
      if "?" set up master without slaves. 


    private int iParseAdjustables(int nrays)
    // fills in private ArrayList of adjustables, with slaves.
    // Returns how many groups were found based on rayStart tags.
    {
        boolean bLookedAt[] = new boolean[nrays+1]; 
        adjustables.clear(); 
        for (int field=0; field<nfields; field++)
        {
            int op = rF2I[field]; 
            if ((op<RX) || (op>RW))  // or other validity test
              continue; 

            for (int record=1; record<=nrays; record++)
              bLookedAt[record] = false; 

            for (int record=1; record<=nrays; record++)
            {
                char tag0 = getTag(field, record+2);
                boolean bAdj = isAdjustableTag(tag0); 
                if (!bAdj || bLookedAt[record])
                { 
                    bLookedAt[record] = true; 
                    continue;
                } 

                //---Adjustable parameter found------------
                bLookedAt[record] = true; 
                ArrayList slaves = new ArrayList(); 
                if (Character.isLetter(tag0))  // might have slaves...
                {
                    boolean bUpper0 = Character.isUpperCase(tag0); 
                    char tag0up = Character.toUpperCase(tag0); 
                    for (int k=record+1; k<=nrays; k++)
                    {
                        if (!bLookedAt[k])
                        {
                            char tagk = getTag(field, k+2); 
                            boolean bUpperk = Character.isUpperCase(tagk); 
                            char tagkup = Character.toUpperCase(tagk); 
                            boolean bSameGroup = (tag0up == tagkup); 
                            if (bSameGroup)
                            {
                                int iSlave = (bUpper0 == bUpperk) ? k : -k; 
                                slaves.add(new Integer(iSlave)); 
                                bLookedAt[k] = true;  
                            }
                        }
                    }
                }
                adjustables.add(new Adjustment(op, record, field, slaves)); 
            } // done with all groups in this field
        }// done with all fields
        return adjustables.size(); 
    }

    private boolean isAdjustableTag(char c)
    {
        return (c=='?') || Character.isLetter(c);
    }


5 Nov 2007   A49

To do:  finish ray autoadjust.
^^Partly DONE 7 Nov; works nicely on GRAZE, needs further testing. 
But: slaves don't work on rays;
^^ FIXED. 
When rays only are adjustable, .RAY should pop forward not .OPT table. 
^^ FIXED.
Also! need a way to have master anywhere in table, hundreds of rays, named
groups that covary.  Perhaps use common-letter grouping as in WFE? and as
in ganged goals? << trying this....
...Works. 
Needs to be documented.  Should .OPT work the same way: no "?" but
rather just groups?  However! group members cannot share a common
value! they need separation.  So the dNudge should delta them
separately, not delta them all in a single kafoozle. 



To do: fix Layout's auto Diameter error.

To do: nonsequential surface groups. 

To do: randomize continuous spatial vs user selected spatial 
  and  randomize continuous angle vs user selected angle
  and  randomize continuous wavel vs user selected wavel.
Maybe three radio button pairs?



4 Nov 2007   A48: Recovering from A47 .jar failure
A47 contained a new user option debug level feature
but although A47 runs OK at the command line, its .jar
fails to launch, both on the PC and on the Mac.

Nothing obviously wrong in the manifest or sources or classes.

Rebuilding A48 from A46, whose .jar runs on both platforms.
OK, have eliminated Constants::DEBUG & AUTODEBUG
in favor of Options::DEBUG and renamed the calls. 
Seems to work OK and run both from command line & .jar file.
So far no user interface: Options::DEBUG = 0.

Fails however just when I install a new menu item dialog to manage
the value of Options.DEBUG and the UserOption string #195.
More precisely: still compiles OK, no warnings; runs OK at the
command line; fails to run by double clicking the .jar file.

If I comment out the options menu item creation, .jar resumes working:

/***********************************
        JMenuItem debugItem = new JMenuItem("Debug Level"); 
        debugItem.addActionListener(new
          ActionListener()
          {
             public void actionPerformed(ActionEvent ae)
             {
                doDebugDialog(owner); 
             }
          });
        this.add(debugItem); 
***********************************/

Odd.  Cannot explain this problem.  Might it be that there is a 
bug in Menu itemization if a plain menu item follows a compound one?
I'll try moving this block earlier in the menu item list to 
immediately follow graphics dialog....
....No joy.  Still runs OK from command line, and the various settings
of the debug level work properly.  But with this code block present
the .JAR file won't run.  Maybe it hinges on having System.Out avail.



COULD THE A47 JAR FAILURE BE DUE TO USING AN EXPLICIT CLASSES.LIST
and adding a new (anonymous) class to the Options.java file?
So that there are now more classes in the compilation than are
to be admitted into the .JAR?  and some class counter comes up short?
So the application just sits there, waiting for the missing class 
to appear out of somewhere?

Unlike the asterisk method, which is evidently unavailable in Mac,
the explicit classes.list file has to be kept updated.  Putting a
new menu item into a menu, with its anonymous ActionListener,
might enlarge the number of classes.  Options$18.class is the max
found of the Options category with the new DEBUG option absent;
Options$19.class is with the new DEBUG menu item present. 

YES this is the problem.  Using the asterisk method j.bat

  del com\stellarsoftware\BEAM4\*.class
  javac com\stellarsoftware\BEAM4\*.java

then d.bat

  del BEAM4.jar
  jar cmf MyMan.mf BEAM4.jar com\stellarsoftware\BEAM4\*.class

I find fully functioning application, either command line or by
double clicking the .JAR file.

BUT trying the explicit source & class method, where classes.list goes only
as far as Options$18.class, the compiler file is...  jlist.bat

  del com\stellarsoftware\BEAM4\*.class
  javac @sources.list

followed by dlist.bat that invokes the deficient classes.list....

  del BEAM4.jar
  jar cmf MyMan.mf BEAM4.jar @classes.list

I find a non functional .JAR application is produced. 


MORAL:  always use the asterisk method
Or, when you must compile on the Mac, be sure to
built the correct sources.list and classes.list



3 Nov 2007  A46: Smart dDelta() Generation
Adjustment objects contain a field iattribute, from which
a formula could be created to deliver a DELTA value for the
adjustment.  Optics attributes and ray attributes will need
separate LUTs.
  X, Y...    L*DELTA
  Curv, Cx:  L^-1*DELTA
  A1:        L^0*DELTA
  A2:        L^-1*DELTA
  A3:        L^-2*DELTA etc
  Angles:    60*DELTA

IMPLEMENTATION: Into OEJIF parse() I placed an optics size feeler...

        private double dOsize = 0.0; 
        for (int j=1; j<=nsurfs; j++)
        {
           dOsize += Math.abs(RT13.surfs[j][OX]); 
           dOsize += Math.abs(RT13.surfs[j][OY]); 
           dOsize += Math.abs(RT13.surfs[j][OZ]); 
           dOsize += Math.abs(RT13.surfs[j][OODIAM]); 
           dOsize += Math.abs(RT13.surfs[j][OODIAX]); 
        }
        dOsize /= nsurfs; 
        if (dOsize < TOL)
          dOsize = 1.0; 

and a public method getOsize() for Auto to use. 
Then in Auto.java:

    private double getDelta(int iadj)
    {
        double dOsize = optEditor.getOsize(); 
        if (iadj >= onadj)
          return dUserStep * dOsize; 
        int iatt = optEditor.getAdjAttrib(iadj); 
        switch (iatt)
        {
           case OX:
           case OY:
           case OZ:    return dUserStep * dOsize;
           case OTILT:
           case OPITCH:
           case OROLL:  return 100*dUserStep;
           case OCURVE:
           case OCURVX:  return dUserStep / dOsize; 
           // polynomial coefficients here??
           default: return dUserStep;
        }
    }

^^DONE. Works. Needs more testing but on TMA72 runs great. 
^^This implements FIX 3 below. 


1 November 2007   A46   STALLED AUTOADJUST

Presently, AutoAdjust works well on variables that are all about
the same order of sensitivity.  But when one set of variables are
in meters, and DP=1E-6 for significant changes in SOS, while some
others are in degrees, where DP=0.01 for significant SOS sensitivity,
then there is an annoying lack of action when Auto starts up.  Usually
it remains anchored at its starting point since the sensitive vars are
already optimized while, with large damping, the insensitive vars are
not yet engaged.

FIX 1:  do nothing; advise the user to choose DELTA wisely.  User gripes!

FIX 2:  introduce preplanned DELTAP constants: for linear deviations,
for angular deviations, for power law coefs, for Zernikes.

FIX 3:  preplanned DELTAP constants but adjusted using the overall
scale size of optic. 

FIX 4:  create a feeler function that explores what DELTAP is
appropriate for each param, and apply that.   

Obviously, since I am mathematically inclined, I prefer FIX4. 
But it likely to be an effort to get it to perform properly.
Obvious problem: runaway if a variable doesn't matter.
Obvious problem: how to choose magnitude of change in SoS?
Would re-explore DELTAP settings at each iteration,
because early=huge SoS while late=tiny SoS, and the proper
DELTAP values will evolve as the fit migrates.  

Perhaps use a well conditioned problem (Rosenbrock?) with a
huge dynamic range badfit-> goodfit, and monitor its deltaSOS?

From Press et al the best step size to use on two sided derivs is

eps^1/3 * (f/f")^1/2

where eps = machine precision, f= func value, f" = func curvature,
and (f/f")^1/2 is the scale length for significant change in slope.

But this cannot be right.  What if f=1e6+x^2? the presence of
a huge constant height has no effect on the scale width, yet
Press' formula would lead to a large scale width ~K^1/2
and could drive the Jacobian bonkers.  The scale (f/f")^1/2
is the scale sufficient to change f(x) by its own size,
which is likely inappropriate for a multi-element (vector)
optimizer.  

29 October 2007  A45 Zero Groove Density
In exploring GRISM1.OPT there is a bug:
when Gx=0 and order=1, I get an Order failure.
Should get undisturbed transmission. 
^^Ha, at RT13.java line 1313 there is an error:
if the vector groove density G is zero, then the routine
declares RRORD a faulty order.  But really, it should declare
RROK and no deviation in ray direction.  
^^Fixed.  Works in transmission NEEDS TESTING IN REFLECTION.
^^Yikes, fails in reflection "mis 2" see GRATINGTEST files.
^^Fixed this also, uses mirror if no order or wavel or G.
^^Works.  see GRATINGTEST files. 

29 October 2007  A45 more ghosts?
Even though my Lenovo JAVA_HOME = C:\Program Files\Java\jdk1.5.0_06
when I try to run "java BEAM4.jar" I get the complaint
"Error: could not open C:\Program Files\Java\jre1.6.0_03\lib\i386\jvm.cfg"
 ** why is the "java" command looking for this location?
 ** where is the JRE_HOME path stashed if not in PATH?

>>THE FAULTY CODE is A44's BEAM4.jar 206kB 10/28/07 11:27AM
>>Copies exist a.k.a.        A44.jar 206kB 10/28/07 11:27AM
>>The fault message is (see Win98 installation)
   "Java Virtual Machine Launcher:
    Could not find the main class. Program will exit!  [OK]"
which suggests some fault within my manifest MyMan.mf but looks OK:
    Main-Class: com/stellarsoftware/BEAM4/M7
    Author: Lampton 
My CLASS.LIST is a bit odd, containing two M7 entries (why two?)
    com\stellarsoftware\BEAM4\M7$1.class
    com\stellarsoftware\BEAM4\M7.class
Of course many classes are multiple in this sense. Why?

Lenovo javac -version confirms 1.5.0_06
  * this version complains about X.show(), prefers X.setVisible(true); 
  * this version complains about using generic ArrayLists. 
  ? does this version create fully acceptable BEAM4.jar's?
Dell javac -version "invalid flag -version"
Dell PATH="....C:\j2sdk1.4.0\bin;"
 ...and sure enough there is that directory there. 
Dell javac does not complain about X.show() nor generic ArrayLists.
Dell javac produces fully acceptable BEAM4.jar's




28 October 2007  A45  Warnings on Lenovo: GHOSTS
I have removed the Java jdk1.6 compiler from the Lenovo.
I have installed the Java jdk1.5.0_06 compiler, copied from the Dell
I have modified the PATH to C:\Program Files\Java\jdk1.5.0_06 using
Start::Computer::SystemProperties::AdvancedSystemProperties::
EnvironmentVariables::SystemVariables::JAVA_HOME
compiler runs OK with this path; 
...but when I compile A45 I get the message
  Note: some input files use unchecked or unsafe operations.
  Note: Recompile with -Xlint:unchecked for details
How can this be? when on the Dell I get no such complaint?
It is as if the ghost of 1.6 continues to dwell in the Lenovo.
But it runs OK on the MacBook. 
Full disclosure: There are **three** files in C:\Program Files\Java
  jdk1.5.0_06  (contains 118 MB: bin + lib + oodles more)
  jre1.6.0_03  (contains 78 MB: bin + lib + license)
  jre1.6.0     (contains 78 MB: bin + lib + license)

could these jre's be the problem??
PATH command shows C:\Program Files\Java\jdk1.5.0_06\bin;
I will move Lenovo's "jre" folders out of 
  C:\Program Files\Java
into
  C:\Unused Program Files
and reboot and see. 
Rebooted; verified that only the one jdk1.5.0_06 remains.
Verified that PATH is C:\Program Files\Java\jdk1.5.0_06
The java compiler continues with its two warnings about
unchecked or unsafe operations and suggests -Xlint:unchecked
When I run javac -Xlint:all @sources.list what I get is...
22 warnings, all about ArrayList. 

I conclude there are *two* problems:
  * jdk1.5.0_06 emits faulty warnings
  * jdk1.6.0 emits faulty code when no warnings.







28 October 2007  A45  "Moving Backwards!"
Eliminating the "Clean-as-a-whistle" compilation with
its new ArrayList<xxx> construction, to make it compatible
with older compiler jdk1.4.0 even though deprecated in newer jdk1.6.0.

Instead of ArrayList<xxx> I am reverting to generic ArrayList.
Done; works OK, compiles OK with generics.
**Notice: TWO CHANGES FROM A44: COMPILER change & CODE change***
A45 BEAM4.jar 195 kBytes 10/28/2007 1:33PM
..runs OK on Dell
..runs OK on MacBook
..runs OK on Lenovo
..runs OK on old HP Win98. 
is this compatibility due to the compiler, or the code?
Trying to compile the A45 code using the Lenovo & 1.6.0...
"Prebeta release 0.45 Oct 2007"
  ---Note: some input files use unchecked or unsafe operations.
  ---Note: Recompile with -Xlint:unchecked for details. 
>>BEAM4.java 10/28/2007 3:23PM, 206kB... why so much bigger? must be this compiler.
  runs OK on Lenovo, WinVista
  runs OK on Dell  WinXP
  fails to run on HP Win98 "Could not find the main class. Program will exit!"
  fails to run on the MacBook.

Suggests that the Java compiler 1.6 is totally fucked.
Grabbing 1.5.0_06 directory from Dell:C\:ProgramFiles\Java
yikes it is huge, maybe will overflow my Memorex 128MB stick?
"The disk in the destination drive is full...."


>>therefore it is not a code issue, it is a compiler fault. 



28 October 2007 A44  "Thrillingly Clean on the Lenovo"
compiled under 1.6.0 with all warnings eliminated. 
But Yikes, although A43 BEAM4.jar runs great on my Mac,
and A43 and A44 (209kB, 10/28/2007 11:57AM) run fine on my PC, 
A44 BEAM4.jar on Mac delivers an error message: "JAR Launcher:
the jar file BEAM4.jar could not be launched.  Check the
console for possible error messages." Where is this console?
and what is going wrong?  Maybe my use of a newly downloaded
compiler 1.6 (Lenovo) is driving my Mac java installation nuts?
Maybe I need a policy of using only older compilers???
>>Perhaps there were Mac compiler error messages, similar to
the older PC compiler messages on the Dell, about the construction
ArrayList<xxx> being unsupported (i.e. too new)?

Hmmm, on the Dell, the JDK is evidently jdk1.5.0_06
^^No No Path points to C:\j2sdk1.4.0\bin^^
and I get 66 complaints about my use of ArrayList<xxx>
when I try to recompile A44 on this machine, as if the
ArrayList(xx> is new.  So perhaps it was an error
to adopt this construction driven by the 1.6.0 warnings.
Maybe best to allow some warnings! since the deprecations
might be cutting edge changes with bugs.  

On the Dell, javac -Xlint:all @sources.list  <<fails!
-Xlint is not an available option.  
It does offer -nowarn  and also -verbose
Maybe verbose is good enough?  

My PATH on the Dell is ....C:\j2sdk1.4.0\bin;
so C:\Program Files\Java\jdk1.5.0_06 is actually not used.
My lack of Dell warnings is thanks to this 1.4.0.
I find that "javac -version" is unsupported. 
However Dell "java -version" says...
   "Java(TM) SE Runtime Environment (build 1.6.0_02-b06)"
   "Java HotSpot(TM) Client VM (Build 1.6.0_02-b06, mixed mode, sharing)"

Compare MacBook "java -version"
   "Java(TM) 2 Runtime Environment Standard Edition (build 1.5.0_07-164)"

..and I find that A44 BEAM4.jar is Dell=OK, Lenovo=OK, MacBook=NG
as if the 1.5.0 is bad news for my current build. 

BadQ: is there a newer "1.6 compatible" Java R.E. for the Mac?
A: I want max customer compatibility, fewer problems. 
So...maybe stick with the jdk1.4.0 like the Dell has. 


27 October 2007 A44

Aha, changing...   ArrayList myList = new ArrayList()
into...            ArrayList<XYZO> myList = new ArrayList<XYZO>()
worked but has introduced new warnings when I compile with -Xlint:all
to show all warnings.  The new warnings are "redundant cast" since
there is no longer any reason to cast the result of a get(i) fetch.
^^REMOVED the redundant casts.
24 warnings "serializable class has no definition of serialVersionUID"
^^Fixed these messages by installing a declaration 23 places. 
    public static final long serialVersionUID = 42L;


One warning about Epanel line 616 selectively falling through.
That switch case has an if(blah) break; (else fall through);
not a logical problem! works great but to eliminate the warning
I will need evasive logic:

               case LF: 
                  if (cprev==CR) break; 
                  i=0; jCaret++; break; // avoids fallthrough warning.
               case CR:
                  i=0; jCaret++; break;  

^^DONE -- now have zero warnings from javac -Xlint:all @sources.list



26 October 2007 A43 -- Berkeley

To finish: make ray starts autoadjustable.  Already written is
the mechanism to merge onadj + rnadj = nadj in the parm identifier;
but task remains unfinished. 

To add: an Undo feature to recover from crazy Autoadjust runs,
or from any screwup.  Sholl says control+Z is the Microsoft way
to get an undo. 

To finish: the foreground Layout elements after random.  Already
works nicely at completion of **table rays** but not random rays. 
TRICKY because of the complex layering of graphic elements 
in myTechList and because the drawing tools in GPanel are all 
focussed on myTechList, which is drawn before random rays.
I could have a special myFinishList<XYZO> drawn up during FullArt,
and then have GPanel always include a final cleanup call to render
myFinishList onto g2Tech.  But....how to use a common artwork group
(putShading, putRadialArc, ....) that can apply to myTechList when
needed for general artwork but later apply to myFinishList??? 
Aha, perhaps use myTechList twice:
   * initial artwork writes to myTechList
   * ray bunches write to 
   * at end of randomrays we do this:
        1. myTechList.clear(); 
        2. final artwork writes to myTechList
        3. render myTechList again.
The question is: can myTechList be reused this way??
Trying this plan in GPanel.java doFinish() at line 170.
^^Ha it partly works.  When the random rays stop by themselves
there is no cleanup.  But when I click "DONE" to dismiss the
random ray dialog box, then the cleanup happens. 
Trying Random.java line 158:  targetPanel.doFinish(); 
^^DONE -- this works, tidy cleanup. 



To add:  a way to have a reasonable value of DELTAP for each
autoadjustment parameter.  Right now, mixing meters and degrees,
each with DELTAP = 1E-6, the linears come out OK but the micro
degree adjustments are too many orders of magnitude smaller and
often stall.  Expect the same problem with polynomials. 
Work begins at Auto.java line 475 converting userstep to DELTAP.
Rather, need a selective function of VarType.
See line 404 of Auto::nudgeOpt() sets bAngle from optEditor.getAdjAttrib().
But really, should get set up the entire array of bAngle[nadj] as
part of Auto::startup, and then make this available to bBuildJacobian().
^^DONE; uses gbAngle[] as a list of which iadj parms are angles. 
^^NEEDS TESTING how about that TMA with a tilted detector? 
^^STILL NEEDS higher derivatives accommodated. 



How to address the messages from Java 1.6 compiler....
  "Note: some input files use or override a deprecated API.
  "Note: Recompile with -Xlint:deprecation for details."
Deprecated API is...    jd.hide(); 
"...As of JDK version 1.5, replaced by Component.setVisible(boolean)."
FIXED^^ works ok.    But now I am getting....
"Note: some input files use unchecked or unsafe operations.
"Note: Recompile with -Xlint:unchecked for details."
Unchecked operation is in OEJIF, REJIF, GPanel:
  "warning: unchecked call to add(E) as a member 
   of the raw type java.util.ArrayList"
So..how does one check a call to add()? Is there a return status?
Some examples of how to get ArrayList to service a single object type:

http://forum.java.sun.com/thread.jspa?threadID=584311&tstart=90

Evidently there is a new J2SE feature "Generics"
These permit, or deny, multiple types occupying an ArrayList. 
Trick is to include the type of object into the definition of the ArrayList
...instead of:   ArrayList myList = new ArrayList();
....do this:     ArrayList<Otype> myList = new ArrayList<Otype>();


13 October 2007  A43-- Paris
Here's a way to crudely re-establish an effective continuation of
the Layout z-sort after each ray paint block:
As part of the initial Zsort yielding zView values, also set
a boolean flag bFrontOfCenter[i] for every arc & shade segment.

   bFrontOfCenter[i] = z[i] - zCenter[i]

where zCenter is the zView location of the vertex of surface i(j).
I use here the idea that rays run mostly down the center line
whose location is known during the zSort() process even though
the ray loci are unknown during the zSort() process.

So... with this list of flags, after each block of 100 rays is
rendered, run once through the arc/shade paint list, rendering
just those whose flags are true. 

^^TRIED using flag bbb[] with a second selective print following
the table rays in FullArt and it appears to work OK on the table rays.
For random rays however it is more difficult to write.  There are
two technicalities: Random() calls GPAnel.redo(), and there are two
lists to manage: GPanel.myBatchList and GPanel.myRandList.  
Somehow, LayoutPanel will have to get its foreground elements onto
the combined lists after the random rays are put there.  Two chefs:
Layout and GPanel. 






7 Oct 2007  A42:  Histogram Writing Trouble

1. It was a design error to put the HistogramOutput function
into the Options::Histogram dialogs.  No one would look there.
To save something as a file, folks will go to the File menu.  
So that's where the WriteHisto function should reside.

2. When Histo1D is showing, Options::Histo1D fails to appear.
When Histo1D is in the background, then Options::Histo1D can be
summoned.  ???

It will take a communications channel to enable/grayout the
File menu item WriteHisto.  Perhaps something like getFrontGJIF()
and test for histogram nature?



5 Oct 2007  A42: Bizarre WFE result?
On TMA73, the first 165 rays have the expected wfe
variations and deliver good RMS WFE numbers.  But the
subsequent 66 rays all have negative U0 and have much
larger mm not nm WFE terms. ???  see TMA73wfe.RAY
^^BAD FILE PROBLEM: two ray groups shared the same tag letter.
Fixed this; now all WFE calc results are OK.  


1 Oct 2007  A42: Incorrect shading in Layout
If a refractor has a square front and a round back,
the side shadings are drawn round-to-round, as if the
quadrant array at j-1 is wrongly accessed at j. 

Aha: both the cosines cc() and sines ss() are computed once
for the current surface=j only, not for the previous surface.
^^FIXED; runs OK. 

Also there are four suspicious unused variables in Layout:
  drxj, dryj, drxm, drym
defined to show radii at j and at j-1, but never used?
Maybe there is an absentee hunk of code in putXXX()?
^^DELETED.





30 Sept 2007 A42: Implementing OTIRISARRAY: Design Rules
Concept is a flat infinite opaque screen with holes.
The holes can be square, rect, circular, elliptical.

>>  dIntercept() should simply use OPPLANO type to solve.
       No multiple-element test is needed.
>>  vPropagate() always succeeds. 
>>  iDiams() does the iris array work.
       Return RRDIA if ray intercept is beyond outer extent
       Return RRdia if ray intercept is OK but misses hole.
       Return RROK if ray intercept lies within sawtooth() hole. 
       This will reintroduce sawtooth() into RT13.
>>  iRedirect() does nothing because irises never bend. 

Be sure that rays that are clobbered by the IrisArray are
drawn fully all the way to the iris, as with a single iris. 
^^DONE.

Also: Layout needs a hook to allow it to put multiple holes
into its multiple iris cartoon. 
^^PARTLY DONE: at least the single central hole is no longer
shown when there is an IrisArray. WHAT REMAINS is a special
routine that draws the grid of NX x NY holes, checking each
to make sure that it lies entirely within OODIAM, whether
square or round.   ALSO NEEDS to impose a nonintersecting rule:
max size of hole = spacing so holes don't touch. THIS FEATURE
will likely require a reorganization of the doSkeleton() & doArt(),
splitting out a special case to doIrisArrayArt().
To keep things Zsorted() need to treat this just like nSpiderHoles,
namely have each irisHole able to be drawn in a sorted order.
CAUTION one MultiIris is drawn very differently than one Iris!
In particular, OInner is a pass zone; no whiskers; etc. 


   if (nIrisArray[j]>0)...
   getZirisHole();
   putIrisHole(); 

^^DONE October 2. Works.  

Also the lenslet/mirrlet/irislet array surrounding rectangle
should always be shown as a rectangle if form="S" and should
disappear if "S" is absent, never show as circular, since under
no circumstances is the surround circular.  
^^ DONE 5 Oct:  in OEJIF, "..all arrays rectangular.." is now
built into the arrays parser setting the same display code as "S"
namely an exterior rectangular display shape. 


30 Sept 2007  A42: Bizarre Lenslet Array behavior
  If I select 1x1, or 3x3, or 5x5 lenslets,
  I then get 1x1, or 3x3, or 5x5 spots in Plot2D, and layout looks good.
  But if I choose 2x2, or 4x4 lenslets,
  I get 3x3, or 5x5 spots in Plot2D!
  The Layout surface looks OK: 2x2 or 4x4 as it should.
  The rays bend at the right places. 
  But the rays refract *away* from the normal,
  as if the interceptor is OK and the normal is wrong. 

Aha.  The sequence of calls in RT13 is double sawtooth!
  RT13.iSnellArray() applies sawtooth();
  then it calls iSnell().
  iSnell() calls vGetPerp(). 
  vGetPerp() calls Z.vGetZnorm(). 
  Z.vGetZnorm() applies sawtooth(). Again!
  gives screwy perp[] when double sawtooth. 
^^FIXED, as follows:

The **intercept** determines the array optic element.
In RT13.runray(),  dIntercept() gets its intercept by identifying
OTLENSARRAY or OTMIRRARRAY and sending these array cases to
dArrayQuadSolve().  That is where the multiple lenslet test
sequence is run.  With various stepped offsets, each lenslet 
is individually tested using dQuadSolve(offsets).

Once the best choice "d" vector is obtained, there is no further 
ambiguity within the array element and sawtooth() can be run to 
discard all false lenslets immediately without any further testing. 

Now...
Z.dGetZsurf() always applies sawtooth(), propagates xyz OK.
Z.vGetZnorm() always applies sawtooth(), finds norm. 

Eliminates all sawtooth() calls from RT13.
^^WORKS. 1x1, 2x2, 1x2, 2x1, 2x5, 3x4 all OK.
MirrArray works: 1x1, 2x3.
Cylinder mirror arrays work.

>>>Be careful that the target window is "selected" if you want
a change in UserOptions to be applied to the front window.  
Background windows are **not** updated automatically by Options.







29 Sept 2007 A42:
Noticed that while a mouse gesture pan/zoom/twirl will
recompute Layout, it won't recompute Plot2D.  The Plot 
data remain old.  Have to dismiss the Plot and run a new
plot to see changed data.   

The reason to have a plot refresh when gestured is quicker
visibility of little PSF adjustments. 

Heart of the issue is that Plot2D.setup() and Plot3D.setup()
perform too many tasks.  There is one group of tasks that is
needed every time a UserOptionsDialog closes with an OK; clearly
want those inputs to be promptly registered on the artwork. 
Also there are other things that should NOT be modified just
because new artwork is requested by a mouse drag, e.g. the
modified view angles should not be reset to their User values. 

  Constructor---UserConsts---------vvv
  MouseGesture---------------------doTechList=iBuildRays()+doArt()
  UODialog------UserConsts---------^^^

A model for this action should be LayoutPanel, which properly
manages both the FreshArt task and the UO task without any
interference with pan/zoom/twirl. 

This issue may be the consequence of inadequate nomenclature.
Surely "setup()" is so vague as to be useless.  Seems to me that
to be useful there should be a doParseOptions() for user options
and a direct path to doArt(), and the constructor should always call
doParseOptions() so that there is a record of user settings from the
get go, and that every UO "ok" should call doParseOptions() imposing the
new options, but that at no other time should doParseOptions() be called.

Layout does it this way:
  Constructor calls doParseOptions();
  doTechList() calls iBuildRays(), setLocalArrays(), doArt()
  doParseOptions() calls iBuildRays(), sets spans etc.

Now, Plot2D does it this way:
  Constructor calls doParseOptions();
  doTechList() calls iBuildRays(), doArt();
  doParseOptions() calls iBuildRays(), sets spans etc. 
^^ Works.

Now, Plot3D does it this way also:
  Constructor calls doParseOptions();
  doTechList() calls iBuildRays(), doArt();
  doParseOptions() calls iBuildRays(), sets spans etc. 
^^Works.



NONSERIALIZIBILITY of B4 Java source code: on the Mac I
ran javac -Xlint @sources.list and received about fifty 
warning items.  Most of them relate to serializibility:

**warning: serializable class com/stellarsoftware/BEAM4/xxx
has no definition of SerialVersionUID**

What the devil is this.  My classes are not serializable,
why would I want this. Horstmann & Cornell v.2 p.203 say that
classes are serialized in order to transmit them.  Then on p.355
they discuss Remote Method Invocation (RMI) where objects are
shipped back and forth.  



29 Sept 2007  A41
  LensArray tested;  
  MirrArray not tested;
  IrisArray not written.

26-29 Sept 2007  A41   LensArray, MirrArray, IrisArray

To implement arrays I have introduced surf[] macros....
    static final int ONARRAYX    = 98;
    static final int ONARRAYY    = 99; 
and some macros indexing OTYPES....
    static final int OTLENSARRAY = 5; 
    static final int OTMIRRARRAY = 6; 
    static final int OTIRISARRAY = 7; 

and I have put appropriate parsing into OEJIF,
see lines 110-120. 

An implementation of RT13.dIntercept() is....

  * Loop through all NX x NY fully flanged elements, 
     evaluating Distance for each.
  * Choose that element whose Distance is least. 
^^^^ OK for approaching convex side. 
^^^^ WRONG approaching concave side. 
^^^^ RT13.dArrayQuadSolve() needs to verify root(x,y) within cell.
^^^^ DONE. Works. 

PROCEDURE to develop this: "divide and conquer"
  * First get LayoutPanel running.  Does not need any
    critical ray decisions nor any intercepts, merely
    tests steering within OEJIF and Z.getZsurf(). 
  * Second get RT13.dIntercept() running.
  * Third get RT13.iRedirect() running. 

There is a poor choice in the implementation of Z.vGetZsurf().
It passes a three-vector right through into the working routines
while praying that nothing bad happens that could change the
xyz[0] or xyz[1] components, which would ruin the artwork
or the trace.  BETTER would be to isolate that triplet so that
what happens in Vegas, stays in Vegas. 

One masterful cleanup would be to write the surface function

    Z.dGetZsurf(double x, double y, double surf[])

which guarantees one way transmission of x and y, and have it
return a double.  This requires every caller to change from...

        xyz[0] = 0.25*(rox[j-1]+rox[j])*c4[t%4] + xoff; 
        xyz[1] = 0.25*(roy[j-1]+roy[j])*s4[t%4] + yoff; 
        Z.vGetZsurf(xyz, RT13.surfs[j]); 
to
        xyz[0] = 0.25*(rox[j-1]+rox[j])*c4[t%4] + xoff; 
        xyz[1] = 0.25*(roy[j-1]+roy[j])*s4[t%4] + yoff; 
        xyz[2] = Z.dGetZsurf(xyz[0], xyz[1], RT13.surfs[j]); 

This is a nice privacy move! makes it clearer what happens
within class Z.   There are 28 such calls within LayoutPanel
that will need such surgery.
^^^DONE.  

The gradient finders Z.vGradXXX() should also be similarly changed
so as to safeguard the triplet xyz[].
^^^DONE.  



27 Sept 2007  Annoying bug in Layout: not centered
For some reason, when LayoutPanel starts, it does not show the
entire optic.  It shows an initial scene centered on the origin
and lots of action lies offscreen to the right.  Why?  Supposed to 
feel out all the surfaces and perhaps all the rays, and scale
things to make them (a) centered and (b) on-screen. 
^^ SEEMS TO HAVE VANISHED.  KEEP WATCH.


26 Sept 2007 Proper usage of static classes:
What might be making B4Java nonserializable is the fact that
I sometimes use a fully static class (e.g. RT13) that has static
private fields that make sense only if its methods are called in
a very specific order.  Its user must have the inherent discipline
to first call the setup() method, and then subsequent methods will
work OK, else not.  This policy works only if a single process uses 
the class.  If there are two or more threads using this class, then
the private static fields will be mangled (mingled?) by crosstalk. Or 
if there is just one user process, but it is sliced by communications
delays, then there is no guarantee that the private fields will be
properly sequenced. 

Seems to me tidier never to let this happen.  Instead of a static
class, make it dynamic, and force all fields to be dynamic, and 
oblige each user to instantiate its own object complete with its
dynamic fields, even if there is only one user expected.

Static classes are OK if they are interfaces (no storage) or if
they are all static final fields (example: Constants.java) or if
they are all static methods with no storage (e.g. Utilities.java).

Seems to me this change is not so huge. Within RT13, there will
need to be a constructor that accomplishes the setup, and all
fields & methods will have to change from static to dynamic.
Within each user, an object will have to be instantiated:

    RT13 myRT = new RT13(setup data...); 
and
    myRT.getRay();






25 Sept 2007 A40: Error in Layout
  During testing it was found that the radial refractive panels are absent.
  Analysis of QUAD.TXT files showed clearly that each panel was degenerate.
  Reason was that in LayoutPanel, the RadialShading routine had all four
  vertices located at i, rather than i, i, i+1, i+1.   Fixed that.  
  A further question is about the shadecode modifier segment, line 256:

        // modify the shadecodes to skip buried shade panels; refresh OK
        if (bShad[7] && bShad[4])
          bShad[0] = false; 
        if (bShad[4] && bShad[5])
          bShad[1] = false; 
        if (bShad[5] && bShad[6])
          bShad[2] = false; 
        if (bShad[6] && bShad[7])
          bShad[3] = false; 


  What does this do?? It turns off radial webs when there are peripheral panels.
  I don't think I like to turn them off automatically.
  I'd rather leave them in the hands of the user.
  I'm eliminating this segment of code. 
  Wait! Spare that code! The rationale is that the shaded zones represent
  real shaded surfaces, ground edges of a lens.  When 4 & 7 are on, there
  is actually no ground surface at 0.  So, its shading should turn off,
  even though the radial arcs are turned on. 



24 Sept 2007 A40: Diameter Layout bug:
  Explicit zero diameter forbids layout without rays.
  Should be: blank diameter forbids layout without rays.
  Explicit any diameter including zero allows layout without rays.
  Here's the code within OEJIF:

        boolean bAllDiamsPresent = true; 
        for (int j=1; j<=nsurfs; j++)
          if (RT13.surfs[j][OODIAM] < TOL)
            bAllDiamsPresent = false;   
        DeskMenuFrame.giFlags[OALLDIAMSPRESENT] = bAllDiamsPresent ? TRUE : FALSE; 

  Perhaps a better way to conduct this test is...

        boolean bAllDiamsPresent = true; 
        for (int j=1; j<=nsurfs; j++)
          if (U.isNegZero(RT13.surfs[j][OODIAM]))
            bAllDiamsPresent = false;   
        DeskMenuFrame.giFlags[OALLDIAMSPRESENT] = bAllDiamsPresent ? TRUE : FALSE;

  ...provided that there is no fixup eliminating negative zeros. 

23 Sept 2007 A40:  Mac Bug--------Drag & Drop fails. 
  Possible problem: In DeskMenuFrame line 1245 and 1257, I used
  a quickie shortcut, testing only the first flavor in a flavor
  array for acceptability.   REALLY proper way is to test every
  member of the array and identify any good flavor, then accept
  that specific flavor.  

  ^^YES that solves the problem.  New code is...

    private boolean bAnalyzeDropFlavor(DropTargetDropEvent event)
    {
        Transferable transferable = event.getTransferable();
        DataFlavor[] flavors = transferable.getTransferDataFlavors();
        for (int i=0; i<flavors.length; i++)
          if (flavors[i].equals(DataFlavor.javaFileListFlavor))
            return true;
        return false;
    } 

  Testing shows that single & multiple file DnDs now work as they should.




23 Sept 2007  Bug: SKIP.OPT multiple hits in a bowl
  ...one ray fails to reflect,  Nine others OK.
  ...Cause could be allowing zero root???
  ...Now that PLANO is detected within OEJIF it is no longer
  necessary that QuadSolve handle plano cases and allow zero root.
  Perhaps simply replace iGetNonnegRoots() with iGetPosRoots()? 
  ^^YES the proper solver is iGetPosRoots() and with this the
  bug vanishes:  one million rays into SKIP has no failures. 

23 Sept 2007  New feature: to the Options::Histo1D dialog,
add a button near the bottom  "[SaveNow] as H1D.TXT"
ditto for H2D; way to create a simple comma delimited file
with the ray hit counts per bin. 
^^Could be implemented by having each GJIF offer a method
doWriteDataFile() that could be invoked by Options.
NonEmpty for H1D and H2D.
^^DONE.  Works great.  


Except: New Mac Trouble with this feature
  ..In 0.39 and earlier, each Options dialogs was available
      with or without its target graphic on screen.
  ..But now, if Histo1D is in front, Options:H1D fails to open.
  ..And now, if Histo2D is in front, Options:H2D fails to open.
  ..Putting the target GJIF into background, enables the Options.




[NOTE: The H1D and H2D boxes are oddly boxed: makes clear that
they are radio buttons but not clear that the subsequent
data fields attach only to the bottom button. ]



Demo: OFFNER.OPT could illustrate two identical reflectors
having different offsets, same parent equation.  




21 Sept 2007 A40: ZERO PATH ISSUE
To make zero path ray segments acceptable I noticed that in
RT13.bRunray() the test is...

      d = dIntercept();
      if (d < 0.0)
        ....handle ray failure....

For a fix, within dIntercept, after the computation of the
intercept, I have installed a arithmetic noise eliminator:

      if (Math.abs(d) < TOL)
        d = 0.0; 

and find...nope, in WF3 still cannot stack surfaces at same
location; get "mis 10" or "mis 8" ray notes. 
Hmmm, dIntercept is returning -1.0 = RPFAIL, from dPlaneSolve(),
and the only such return situation is caused by 

        if (Math.abs(ray[RTWL]) < TOL)
          return RPFAIL; 

yet we ought to have ray[RTWL] = reasonable not zero.
Hmmm, there are only 3 calls to dPlaneSolve() and all three have
reasonable near-normal ray[RTWL] values.  

Ha! the stacked plano surface are internally wrongly classified
as "conic" even though they are flat!  And yes owing to the
double root, cannot accept zero path solution for conics.  So
the conic solver correctly rejects the ray.  BUT WHY is the 
surface wrongly classified?  Ah, in OEJIF surfaces with blank
curvatures can be plano, but surfaces with "0" curvatures are
forced to be conic.  ERROR HERE. Need new ternary logic...

              C=blank,   zero,  nonzero
             ---------  ------  -------
  CX=blank:    PLANO     PLANO   CONIC
   CX=zero:    PLANO     PLANO   CYCYL
CX=nonzero:    CXCYL     CXCYL   TORIC

..augmented by adjustability.  Here's the code:

            double  ce = RT13.surfs[j][OCURVE];
            double  cx = RT13.surfs[j][OCURVX]; 
            boolean bCEactive = (ce!=0.0) || isAdjustable(j, OCURVE);
            boolean bCXactive = (cx!=0.0) || isAdjustable(j, OCURVX); 
            int tce = bCEactive ? 2 : U.isNegZero(ce) ? 0 : 1; 
            int tcx = bCXactive ? 2 : U.isNegZero(cx) ? 0 : 1; 
            int tg[] = {OPPLANO, OPPLANO, OPCONIC,
                        OPPLANO, OPPLANO, OPYCYL,
                        OPXCYL,  OPXCYL,  OPTORIC}; 
            int iSolver = tg[tce + 3*tcx]; 

..and then the modifiers for bPoly and bZern come into the scene.
Seems to work: allows stacking of flat irises. 




19 Sept: Created an MDI Desktop JIF retitler with a one-second
blink "Saved!" that works.
I moved this class into EJIF environment and it fails to retitle.
I think something else in EJIF is countermanding the blink
since my println()'s show proper triggering and titling. 

20 Sept: Reason is:  every caret blink repaints the ePanel and the
eTitle, so as to keep fresh the caret position.  Caret blinks
leave little or no time for the "Saved!" message to appear.

Fix: a private int iCountdown is introduced into EJIF, initially zero.
EJIF.postJIFtitle() uses iCountdown to determine its posted message:

   if (iCountdown > 0)
   {
     doSavedMessage;
     iCountdown--;
   }
   else
     doUsualMessage.  

To get five caret blinks all reading "Saved!" EJIF.pleaseSave()
has only set iCountdown=5.  This way, EJIF manages everything
messagewise,  even though ePanel is responsible for the caret and 
its blinking, and the blink calling of EJIF.postJIFtitle(). 



RELEASE REMINDER -- VERIFY HELP::ABOUT VERSION NUMBER & DATE

19 Sept 2007  A39 Layout is poorly auto-sized.
Usually when Layout opens its drawing is larger than its frame.
Would like sizing to assure the initial view shows the entire figure.
^^FIXED: in sizing diameters, there once was r=0.25*Math.max(...)
and now I have changed it to use r=Math.max(...); looks better. 



17 Sept 2007 A39 yikes, my 3-legged spider is messed up around its
central hole.  What gives?  ^^ FIXED 18 Sept: somehow a typo
got stuck into the spider-inner-periphery loop---
   xyz[0] = Math.cos(a);
   xyz[0] = Math.sin(a);  << should be xyz[1].



16-17 Sept 2007  A39
Rewrite of the Plot3D options-parser path and its logic.
In today's development I made these changes:

1. Have Options request new artwork if its client exists:

    if (RM_PLOT3 == DeskMenuFrame.getFrontGJIFnumber())
    {
       GJIF g = DeskMenuFrame.getFrontGJIF();
       if (g != null)
         g.doParseAndPlot(); 
    }

2. Have GJIF implement a doParseAndPlot() method which
it passes onto its captive gPanel:

    public void doParseAndPlot()
    {
        gPanel.doParseAndPlot(); 
    }


3. Have GPanel pass to client via abstract method:

    abstract void doParseOptions(); 

    public void doParseAndPlot()  // Called when Options change
    {
        doParseOptions();         // implemented by every client
        forceNewArtwork(true);    // implemented locally.
    }


4. Finally, each GPanel does something like this:

    protected void doParseOptions()
    {
        setup(); // get relevant table data, ray data, option data.
    }



16 Sept 2007 Testing LENSWFE reveals problems

1.  Changing the Plot3 OptionsDisplayRange has no effect until the
**next** Plot3D is created.  Cannot change on the fly.  Need to change
on the fly, to tune up the display for best presentation. 
Reason for this problem: to avoid killing the user pan/zoom/twirl,
some parse & settings data are processed first "do once" and never
again until the next instance is created.   Better would be to
process every time, but have a flag if the most recent input is
mouse or is OptionTable.  Whichever dominates should govern the 
settings.  That way, could play back & forth using alternately
the Table and the mouse.  Wouldn't it be cool if the mouse were
to visibly change the display factors in the table zoom/twirl?
That way the mouse becomes a shorthand way to alter the table.

Oops but that would sacrifice the "zero=automatic" aspect of the
table.  Perhaps replace with (.) Auto  ( ) Manual [xxx] radio buttons?

Come to think of it, want to change plotvars on the fly as well, so
put all the setup stuff into the artwork generator not into the
prework generator.  

2.  My fix "Installed x2 demagnification" fails.  3D figure is still
way too tall, as if no change had been made.  Unit cube concept?  




12 Sept 2007  A39

The Plot3D always seems to have too much vertical magnification.
Probably because the x and y directions are defined by a pupil
and therefore have no need to grow, but the z direction span is
set by feeling the initial (sparse) data range and therefore
needs a big initial compression factor, presently lacking. 
TEST CASE: WFE
^^ INSTALLED x2 demagnification for "C" axis  16 Sept 2007

11 Sept 2007  A39
Find out why planes cannot coincide.  Why do I need to
separate them, and have a positive definite path?
Zero path ought to be allowed, for planes at least.


Create a way to have the automatic ray generator
extend its ray table as much as is needed for up to
919 entries, automatically.  Stupid to have that
manual when computers are soooo much faster. 
^^ DONE 16 Sept 2007 A38.   Works. Guide number also updated. 

-----------clickable Jar files (M.Lampton)--------------------

If you have a jar file, say "BEAM4.jar" and it doesn't run
when double clicked, make sure you have installed the Java
run time library (see test above) and then do this:
  1. right click its icon
  2. choose "Properties"
  3. choose "General" tab
  4. at "Opens with...." click [Change] button
  5. scroll to find "Java(TM) Platform XX binary" and select that
  6. click OK
  7. click OK. 

--------------Making jar files Clickable in Windows-------------------
http://neptune.netcomp.monash.edu.au/JavaHelp/howto/jar.htm
"Running An Executable JAR From Explorer (Windows)

"Within Windows, it is also possible to set up Windows Explorer so that 
you can double click on the JAR file icon to execute the file (handy 
for GUI applications). The first thing you must do is set up the correct 
association with the 'javaw.exe' application that JDK for Windows has."
^^YIKES only code authors have the JDK; users have the JRE.

"Open Windows Explorer and select Tools | Folder Options | File Types.

If there is no JAR file type, create it. Give it a description like

   jar - Executable Jar File

to ensure it sorts under 'jar'. Create or edit the action called "open" 
and associate it with the following action:

   "C:\Java\jdk1.4.0\bin\javaw.exe" -jar "%1"

Of course, you will replace "C:\Java\jdk1.4.0\bin\javaw.exe" with whatever 
path is correct on your machine.
IMPORTANT: include the double quotes to take care of names with spaces."

------------------------------------------------------------------------

5 Sept 2007 A39

Added feature: specify outer periphery to be rect or ellip, 
and allow inner periphery to be rect or ellip separately.
Implementation:  In the "form" field, "S" makes outer = rectangular;
"s" makes inner rectangular;  "Ss" or "sS" makes both rectangular.
   *Put appropriate definitions into Constants.java
   *Put appropriate code into RT13 and tested it  (CassOffset.OPT)
   *Put appropriate code into Layout and tested it (CassOffset.OPT). 
Installed. Works. 


2 Sept 2007 A38

Reviewing definitions of Diams and Iris in preparation to implement
the "eccentric pupil" request from Sholl, namely a way to deviate
the ray from the centered local coord system before applying the
Diam test in RT13, and also to bias the x,y coords generated in
layout by the same amount.  

Boundary concept should be a class expandable to a variety of
boundary shapes, built-in + user-supplied (heptagons?). 
At present boundaries are simple built in functions with
a switch between oval/rectangular, controlled by the same 
pair of parameters, OODIAM and OODIAX (no OODIAY needed).

There are four offsets: OFFIX, OFFIY, OFFOX, OFFOY.
Permits separately offset inner and outer edges. 
However round and square apply to both outer and inner!
Maybe want even more specificity??  PLEIADES primary mirror
is round and centered but its hole is rectangular and offset. 
Would require that OFORM be split into OFORMI and OFORMO. 

These changes will have a minor impact on RT13, but require a
more general implementation of the Layout evaluator of arcs. 
Where, for instance, does a radial arc start and end, if the
hole is elliptical and eccentric?  Perhaps simply run a sequence
and test each point for being in/out.

* Wrote an OFFIX...OFFOY iDiam() for RT13 to classify irises.
A few simple tests show it works. 

* Reviewed the existing parser in OEJIF for OffIX..OffOY fields.
Tested it: CASSoffset.OPT has a centered entrance iris but an
offset PM and yes it responds to OffOX, OffOY as it should, as
revealed by spot diagrams taken at the PM. 

* The hard bit: new artwork that can draw an offset shape.
For each arc:  generate x,y in the (simple) offset frame; 
subtract offsets to put into vertex frame xvertex yvertex; 
then get zvx = Z(xvertex, yvertex), then plot the feature. 
^^Done.  Works! Layout now has a pre-artwork generator of the
(x,y) positions of all radial arcs, radox.....radiy; and the
radial arc & shading generators use these precomputed start
points.  Tested with CASSoffset, both mirror and lenses,
round and square.    Nice feature.  


29 August 2007  A37...

For the manual, here are some needed additions & improvements:

* Printing. New dialog, new instructions; works for both graphics and
for text files. 

* HOEs and Gratings; needs writeup.

* Autoadjust, and groups of rays for WFE.

* Everything else: needs a total cleanup, including stuff like
how to *do* things like optimize an optic.  Perhaps a step by
step list of advice, with corollary questions like what is really
to be adjusted?


25 August 2007  A37...
Abandoned the asterisk compiler & jar commands since they don't
work on Mac OS X under bash, and adopted the list-of-files method
that is supported universally in the Java world.  Caution however
the list of files is the same except for the slashes, but the
list of classes is rather different, and has to be constructed
by compiling, then using a directory service to glean & edit the
class names.  With these changes, compiling & jarring works on
both Mac OS X and WinXP.  In both cases, all work is done within
the "base folder" that contains the com directory.  

------------j.bat---Win edition-------
javac @sources.list

------------e.bat---Win edition-----
del BEAM4.jar
jar cmf MyMan.mf BEAM4.jar @classes.list

------------sources.list---------
com\stellarsoftware\BEAM4\Adjustment.java
com\stellarsoftware\BEAM4\Auto.java
com\stellarsoftware\BEAM4\BJIF.java
com\stellarsoftware\BEAM4\CAD.java
com\stellarsoftware\BEAM4\Clipper.java
com\stellarsoftware\BEAM4\Comparo.java
com\stellarsoftware\BEAM4\Constants.java
com\stellarsoftware\BEAM4\DeskMenuFrame.java
com\stellarsoftware\BEAM4\EJIF.java
com\stellarsoftware\BEAM4\EPanel.java
com\stellarsoftware\BEAM4\GJIF.java
com\stellarsoftware\BEAM4\GPanel.java
com\stellarsoftware\BEAM4\H1DPanel.java
com\stellarsoftware\BEAM4\H2DPanel.java
com\stellarsoftware\BEAM4\InOut.java
com\stellarsoftware\BEAM4\LayoutPanel.java
com\stellarsoftware\BEAM4\M7.java
com\stellarsoftware\BEAM4\MEJIF.java
com\stellarsoftware\BEAM4\MTFPanel.java
com\stellarsoftware\BEAM4\OEJIF.java
com\stellarsoftware\BEAM4\Options.java
com\stellarsoftware\BEAM4\Plot2Panel.java
com\stellarsoftware\BEAM4\Plot3Panel.java
com\stellarsoftware\BEAM4\PNGfilter.java
com\stellarsoftware\BEAM4\Random.java
com\stellarsoftware\BEAM4\Registry.java
com\stellarsoftware\BEAM4\REJIF.java
com\stellarsoftware\BEAM4\RT13.java
com\stellarsoftware\BEAM4\TestPanel.java
com\stellarsoftware\BEAM4\U.java
com\stellarsoftware\BEAM4\Z.java

---------classes.list--------------
com\stellarsoftware\BEAM4\Adjustment.class
com\stellarsoftware\BEAM4\Auto.class
com\stellarsoftware\BEAM4\BitBox.class
com\stellarsoftware\BEAM4\BJIF$1.class
com\stellarsoftware\BEAM4\BJIF$2.class
com\stellarsoftware\BEAM4\BJIF$BlinkTask.class
com\stellarsoftware\BEAM4\BJIF.class
com\stellarsoftware\BEAM4\BorderedCheckBoxRow.class
com\stellarsoftware\BEAM4\BorHorizRadioBox.class
com\stellarsoftware\BEAM4\BorVertRadioBox.class
com\stellarsoftware\BEAM4\CAD.class
com\stellarsoftware\BEAM4\Clipper.class
com\stellarsoftware\BEAM4\Comparo.class
com\stellarsoftware\BEAM4\Constants.class
com\stellarsoftware\BEAM4\DataBox.class
com\stellarsoftware\BEAM4\DeskMenuFrame$1.class
com\stellarsoftware\BEAM4\DeskMenuFrame$10.class
com\stellarsoftware\BEAM4\DeskMenuFrame$2.class
com\stellarsoftware\BEAM4\DeskMenuFrame$3.class
com\stellarsoftware\BEAM4\DeskMenuFrame$4.class
com\stellarsoftware\BEAM4\DeskMenuFrame$5.class
com\stellarsoftware\BEAM4\DeskMenuFrame$6.class
com\stellarsoftware\BEAM4\DeskMenuFrame$7.class
com\stellarsoftware\BEAM4\DeskMenuFrame$8.class
com\stellarsoftware\BEAM4\DeskMenuFrame$9.class
com\stellarsoftware\BEAM4\DeskMenuFrame$EMIListener.class
com\stellarsoftware\BEAM4\DeskMenuFrame$FMIlistener.class
com\stellarsoftware\BEAM4\DeskMenuFrame$RMIlistener.class
com\stellarsoftware\BEAM4\DeskMenuFrame.class
com\stellarsoftware\BEAM4\DMFDropTargetListener.class
com\stellarsoftware\BEAM4\EJIF$1.class
com\stellarsoftware\BEAM4\EJIF$2.class
com\stellarsoftware\BEAM4\EJIF$3.class
com\stellarsoftware\BEAM4\EJIF$ExtFilter.class
com\stellarsoftware\BEAM4\EJIF.class
com\stellarsoftware\BEAM4\EPanel$1.class
com\stellarsoftware\BEAM4\EPanel$MyKeyHandler.class
com\stellarsoftware\BEAM4\EPanel$MyMouseHandler.class
com\stellarsoftware\BEAM4\EPanel$MyMouseMotionHandler.class
com\stellarsoftware\BEAM4\EPanel.class
com\stellarsoftware\BEAM4\GJIF$1.class
com\stellarsoftware\BEAM4\GJIF.class
com\stellarsoftware\BEAM4\GPanel$1.class
com\stellarsoftware\BEAM4\GPanel$Incrementor.class
com\stellarsoftware\BEAM4\GPanel$MyKeyHandler.class
com\stellarsoftware\BEAM4\GPanel$MyMouseHandler.class
com\stellarsoftware\BEAM4\GPanel$MyMouseMotionHandler.class
com\stellarsoftware\BEAM4\GPanel$MyMouseZoomer.class
com\stellarsoftware\BEAM4\GPanel.class
com\stellarsoftware\BEAM4\H1DPanel.class
com\stellarsoftware\BEAM4\H2DPanel.class
com\stellarsoftware\BEAM4\InOut.class
com\stellarsoftware\BEAM4\LabelBox.class
com\stellarsoftware\BEAM4\LayoutPanel.class
com\stellarsoftware\BEAM4\LM.class
com\stellarsoftware\BEAM4\LMhost$1.class
com\stellarsoftware\BEAM4\LMhost$2.class
com\stellarsoftware\BEAM4\LMhost$3.class
com\stellarsoftware\BEAM4\LMhost.class
com\stellarsoftware\BEAM4\M7$1.class
com\stellarsoftware\BEAM4\M7.class
com\stellarsoftware\BEAM4\MEJIF.class
com\stellarsoftware\BEAM4\MTFPanel.class
com\stellarsoftware\BEAM4\OEJIF.class
com\stellarsoftware\BEAM4\Options$1.class
com\stellarsoftware\BEAM4\Options$10.class
com\stellarsoftware\BEAM4\Options$11.class
com\stellarsoftware\BEAM4\Options$12.class
com\stellarsoftware\BEAM4\Options$13.class
com\stellarsoftware\BEAM4\Options$14.class
com\stellarsoftware\BEAM4\Options$15.class
com\stellarsoftware\BEAM4\Options$16.class
com\stellarsoftware\BEAM4\Options$17.class
com\stellarsoftware\BEAM4\Options$18.class
com\stellarsoftware\BEAM4\Options$2.class
com\stellarsoftware\BEAM4\Options$3.class
com\stellarsoftware\BEAM4\Options$4.class
com\stellarsoftware\BEAM4\Options$5.class
com\stellarsoftware\BEAM4\Options$6.class
com\stellarsoftware\BEAM4\Options$7.class
com\stellarsoftware\BEAM4\Options$8.class
com\stellarsoftware\BEAM4\Options$9.class
com\stellarsoftware\BEAM4\Options.class
com\stellarsoftware\BEAM4\Plot2Panel.class
com\stellarsoftware\BEAM4\Plot3Panel.class
com\stellarsoftware\BEAM4\PNGfilter.class
com\stellarsoftware\BEAM4\PrintText.class
com\stellarsoftware\BEAM4\Random$1.class
com\stellarsoftware\BEAM4\Random$2.class
com\stellarsoftware\BEAM4\Random$3.class
com\stellarsoftware\BEAM4\Random.class
com\stellarsoftware\BEAM4\Registry.class
com\stellarsoftware\BEAM4\REJIF.class
com\stellarsoftware\BEAM4\RT13.class
com\stellarsoftware\BEAM4\TestPanel.class
com\stellarsoftware\BEAM4\U.class
com\stellarsoftware\BEAM4\XYZO.class
com\stellarsoftware\BEAM4\Z.class



25 August 2007  A37... added graphics printing.  Found the print
plan in Horstmann & Cornell Vol 2 pp.668-672 to fail, owing to the
PrintRequestAssributeSet attributes being uninitialized or void.  
So instead I used a slightly simpler plan that is demonstrated at
http://www.javacommerce.com/displaypage.jsp?name=printcode.sql&id=18252
Here there is no explicit communication from job.PrintDialog() to
the actual print process job.print(); I suppose it must be implicit.

Since the portrait vs landscape switch is built into the printer 
setup dialog, I've removed the two print format alternatives from 
the print button menu.  There is now just one print menu item.  


22 August 2007  A37 ...would be nice to add printing functions.
  Presently, File::Print is restricted to text pages, which is
  strange since any Java screen service can be made a print service.
  Also, in the Mac world, printing comes with free PDF ability
  which is a big plus!

22 August 2007: compiling with javac on Mac reveals a deprecated 
construction: I use show() to both setVisible(true) and toFront()
but javac complains this is deprecated.  Sure enough, Java websites
agree.  I should convert all show() to setVisible(true); toFront().



18 August 2007  A37 ...replacing AltEquals by AltDown
  Hoping this will make the Mac work,
  Hoping this will simplify/unify the keystroke.
  Ha. Works, PC and Mac: 
       Control Left: narrows the table
       Control Right: widens the table
       Alt Right: widens using colons
       Alt Down:  copies field down. 
  The simplification is that no keyChar is needed to
  control the table maintenance, so there need be no
  table controls within the keyChar service function.
  This way, all the table controls are in one place,
  namely the keystroke processor. 
  I modified & simplified the help screens in Help and
  in Options::Editors. 


18 August 2007  A36  Mac notes  (Option = alt: same key)

Editing:  Control Left, Right: narrow or widen a table (like PC)
          OptionAlt Left: also narrows a table
          OptionAlt Right: inserts a divider
          command left, right is same as left, right. 
Copy field down: nothing works....
  Ctrl = does nothing, optionAlt = does nothing, Command = gives =. 

There is an oddity in using Alt Equals to copy a field downward: 
unlike the other keys it is actually a printable character!
Better would be to commandeer OptionAlt Down.  

A few option boxes have insufficient room:
  In OptionsEditors, change "Tabs spreadsheet output" to "Tabs for spreadsheets"
  Layout options axis box needs to be taller
  AutoAdj is OK
  Plot2D is ok
  Plot3d is ok
  Histos are ok
  Random is OK
  CAD is OK
  startup is OK
  factory is OK
  Graphics is OK
  default rays: positions box needs to be taller
  Ray Generator: coord boxes need to be taller. 
  Look and feel options are: Metal, CDE/Motif, Mac OS X.  Good!



ShowTable Error would be nice to position at faulty char not just field
  



14 August 2007 A36
1.  Bought a macBook computer, runs BEAM FOUR nicely.  Fast!
However -- some of the text in options dialog boxes runs
into the RH end of the box and is truncated.  Wider boxes?

2.  Found running grisms that if gx=0, but order=1, there
is a fault in the diffraction surface.  Huh? Should give
zero diffraction angle, not "ORDER nn" complaint. 


----------Adding an interface feature-------------

1. Revise Constants.java User Option Macros to include
an appropriately named macro, UO_XXX_XXXX. You will have
to discard one or more XX_SPARE index values.  

2. Revise the list of strings uoNames to include the
text to associate with the new feature in its dialog.
Again, will need to discard a SPARE string. 

3. Revise the list of factory default strings to include
the appropriate default value. Again, eliminate a SPARE. 

4. Insert the feature into Options.java within the popup
method, to deliver the user interface for this new option. 

5. Put a test for the UO registry value into the code that
is to be controlled.  A simple binary "T" or "F" choice might
be implemented like this: 

   if ("T".equals(DeskMenuFrame.reg.getss(UO_EDIT_CONFIRM)))
     JOptionPane.showMessageDialog(null, "Saved"); 

6. Test everything, make sure the added feature works.
This is also evidence that the numbering has not messed up
some other UserOption features. 

--------------------------enjoy------------------------


13 Aug 2007  A36
Made that darn file save confirmation dialog optional, using
a checkbox in Options::Edit, so I can turn it off. Default is on.

11 Aug 2007  A36
Added more informative Help::MouseActions that remind user of
the retrace + replot activity not just the replot activity.
Added a file save confirmation dialog. 


5 August 2007 A36: Let's do drag-n-drop. Some simple experiments
appear in C:\DragDrop based on Horstmann & Cornell.   I learned that
I cannot access contents of a drop item until drop has been accepted.
So my UI will have to either accept the drop item and open an editor,
or reject the drop item and pop up a failure notice.  Can't have just
nothing happen. 

^^Installed; DnD works OK, Multiple files at once, OK; 
  Local or distant directories, OK.
^^ But...Sometimes it fails to load; no obvious correlation with 
single/double files nor with local or distant directories.  Why?
Aha: I used file.getName() to communicate the file name.
This method omits the path.  So a local file is always chosen
and if there is no correspondingly named local file, load fails.
FIXED by changing file.getName() to file.getPath() which returns
the file's path, name, and extension.  
^^ Works. 



13 July 2007  A35  Plot2, Plot3 GoodRays vs AllRays
This feature is interfaced but not implemented.
Plots presently show only GoodRays, needs to have the alternative
possibility of showing AllRays that reach the requested surfaces.
^^Implemented; works.  Put into Plot2 and Plot3.

A35 need to install autoadjustables into RayEditor.  
Including an instance of adjustables, and some parse logic that will
augment the ArrayList each time a '?' tag is found in Ray.parse().

Also wrote a splitter in AutoAdjust "dNudge(dParms)" that when called
splits out its argument into .OPT effects or .RAY effects, either way
being a means of communicating the LM nudges into the .RAY and the
.OPT table.  This splitter is the foundation of the two table capability
of the AutoAdjust function: it uses the individual table parsers to
create their separate ArrayLists of adjustables, and when AutoAdjust
starts, it steers each nudge into the correct place for the next trace.

Potential problem with two way communication:  why would each Adjustment
contain the value of the thing being adjusted?  Senseless -- there should
be only one value in the program, which is the value stored in RT13.surfs[]
or in RT13.raystarts[], and the Adjustment should convey pointers
to that value. Never carry a fixed copy of that value since it would cause
an ambiguity as to what the "true" value currently is.  

  * Major improvement 14 July 2007 version A35: eliminate all doubles,
  *   carry no internal value, instead carry only pointers into 
  *   RT13.surfs[jsurf][iattr] and into RT13.raystarts[kray][iattr].
  * The four fields of Adjustment are {iattr, item, field, slaveList}. 
  *   where item = kray or jsurf depending on owner's usage.
  * Remember when going to/from table, row=item+2. 

^^Done.  Works.  Nice to have autoadjustable ray starts. 








10 July 2007  A34:  Superpose two Plot2D surfaces

Added a new UserOption field Plot2D_Other.
This will be an integer.  Default = zero = no action;
if nonzero, and if both plot dimensions refer to
the same surface, and if the ray is good at both
surfaces, then a second dot is plotted at the ray
coords of the second surface.  Same coords as the
first dot.  Color of this second dot is black.

Works great! see TMA72flood. 

One annoyance: flat irises cannot be stacked at the
same Z value.  They need space between them to work.
As if only positive (not nonnegative) path is mandatory.
I thought we now had nonnegative paths OK??




1 July 2007  A34

To do:

1.  Would be nice to have LAYOUT update with each iteration.

2.  Would be nice to have cut/paste CTRL-X CTRL-C work!
     Editing from EDIT::choice is always OK, but shortcuts often fail.

3.  AutoAdjust sometimes allows rays to die? evidence is that
  in optimizing CASS13 with 915 rays, I have seen lower RMS
  coming out of optimization than subsequent InOut.
  But it is also possible that the start of Auto had fewer rays.
  Needs some investigation. 

4.  Would really like to have RayStarts accessible to AutoAdjust.
  Sholl needs this to determine starting angles for given field positions.
  Far easier & better than a reverse ray trace. 

5.  The "manual" scale factors are not yet implemented but need to be. 
  No pressing need for any fundamental scale factor definition;
  probably OK to have something as simple as pixels/window or
  pixels/UserUnit. 

6. Want to superpose two surface plots, for example the first and
  second passes at the folding flat mirror, using differing symbols.

7. I fear that Plot2D shows only good rays, not all rays
  for which howfar >= max(hsurf, vsurf).  Will need an easy
  access to RT13.howfar for each ray, to perform the test.
  Probably same absence in Plot3D as well. 



18 June 2007  A34
Installed a common setup architecture for Layout, Plot2D, Plot3D,
   with bNeedOnce() for single-pass code. 
Created a GIF output CAD format.
Ran some tests, looks OK so far. 
Rationalized the numbering of the UOoptions and UOstrings.

However Plot2D and Plot3D still need their ManualRange features
implemented.  



17 June 2007  A34: balky layouts.
The newly modified static ray table is not being updated at every 
Layout although InOut does a complete update.  The symptom is that a 
Layout shows an obsolete ray trace until a new InOut gets run.   
Hmmm: InOut properly calls RT13.iBuildRays() prior to listing. 
But, a diagnostic shows that Layout fails to call that method.
Hmmm: source inspection reveals no guaranteed call to iBuildRays().
^^FIXED: Installed that call.  Now Layout works ab initio, without
needing a preliminary run of InOut.  

Hmmm. Layout's plan differs from the Plot plans.  Layout
has a flag bNeedSize that is initially true, and setup()
gets selectively called within doTechList when needed:

    if (bNeedOnce)
      doOnce();
    bNeedOnce = false; 

This arrangement eliminates the duplicate calls to setSize()
and also distinguishes setSize() from setLocals() which makes
the initial-vs-repeat setup chain clearer.  

Can I modify the Plots to use the Layout method?
Trouble: setSize() uses no rays, only optics components and raystarts.
  This won't work with the Plot routines that must taste the rays.
Trouble: setSize() confuses things by setting az, el from UO settings. 
  This should be distinguished.

How about a new setup package for Layout Plot2D Plot3D:

  *  Constructor does nothing except... bNeedOnce=true
     which will initialize the view and displayed size.
     Constructor's lack of other work will guarantee that
     every subsequent redraw fetches totally fresh data;

  *  Every redraw fetches parser nrays, nsurfs; 

  *  Every redraw call invokes a fresh RT13.iBuildRays() call;

  *  Every redraw call then runs the one-time setup test....

        if (bNeedOnce)
          doOnce();
        bNeedOnce = false; 

  *  And finally the redraw runs doArt(). 





4 June 2007  A34:  GRAZE ok and < mirror tag
Checked out GRAZE and its "<" solver hint.  Works. 
Also created GRAZE1NULL and GRAZE2NULL files. 



3 June 2007 A34: WFE ok on table rays but fails on random rays.
Evidently there is no application of the WFE group to randoms?
Reason: RT13::doWFEtable() nicely gets all the table WFEs, but
has no hooks enabling subsequent randoms to access their needed
dot products and perform their own end corrections.  
^^RETHINK this situation and provide static arrays for WFEdata.
^^OK, now the correction tables sWFE[] and eWFE[] are static.
However there is not yet any reinforced constraint on WFE groups
to have the same group-common U0,V0.  The U0,V0 range all over
the entire field for each WFE group.  How to constrain them?
The random variate ranges need to be computed for each WFE
group, and allowed to vary only within each group, not within
the larger hyperprism of the entire space.  
^^ RETHINK -- make static sWFE[][] and eWFE[][] group-specific.
^^ FIXED -- now have distinct REJIF setSminSpan() actions for each
iWFEgroup, and the randomizer seems to properly coordinate the needed
random & fixed parameters.   TESTED: gets 5.25e-8 = RMS WFE, as
expected for TMA72 with the heavily marginal ray groups ranging U0=
0.0055, 0.006, 0.007, 0.008, 0.009, 0.010, 0.011, 0.012, 0.013, 0.014
which is nearly uniform in radius unlike our pixels. 

One oddity: when plotting Plot3D with full 320 rays and ten WFE
groups, each with its own color, the 320 table rays are all rendered
with the color of the final table ray, not with each ray's color.
So the impact of the hand colorization of the WFE groups, via @wave,
is lost.  Why aren't the @wave tag colors rendered in Plot3D?
Ditto Plot2D???  Oddly -- the random rays are CORRECTLY colored.
It is the table rays that are homogenized. 
^^ FIXED; in Plot2D and Plot3D need to choose kGuide or kray. Done.






2 June 2007  A34 Plot2D, Plot3D
Problem is when some var range is tiny, the tick labels become
huge strings of zeros.  Uncountable, useless.  Should be replaced
by an Enotation string.  Also: in Plot3D those long tick labels are
centered on the axis; please move them to the left of the vertical
axis, and further away from the plot zone for the A and B axes.
Also need an indication that axis C is the vertical axis.
When zoomed to full size plot, the lateral offsets are marginally
OK for horiz axes but still inadequate on the vertical axis.  Better
would be to predict the linear size needed to fit the charstring,
then work out the offset size in UnitCube coordinates (which requires
knowing the zoom scale factor) and only then calc the offsets. 
^^ FIXED 3 June: new double-to-string converter U.gd() that avoids
excessive precision and switches effortlessly between Enotation and
Fnotation according to size. Also new positioning routine that places the
tick labels more attractively on the plot, taking the current screen
dynamic magnification into account.

2 June 2007  WFE
Why does WFE depend on the position of the final surface?
If it were simply a description of the wavefront heading towards
the final surface, then it would not know where that final
surface is located.  Aha, but the WFE does not merely describe the
departure from a free-fitted spherical wavefront.  Instead, the
dot product built into the end corrections force that fitting sphere
to be centered on the final surface, as is essential for diffraction
limited imaging.  That is, the lateral displacements of the final ray
coordinates *at the final surface* are dotted onto each ray's direction
and if the final surface were different, these correction coefs would
differ.   So the final surface focus position is important. 
HYPERX in Test area shows clearly that
 * in perfect focus, WFE = 0 for all rays
 * beyond focus, WFE is negative off axis, positive on axis
 * before focus, WFE is positive off axis, negative on axis
Always the average WFE is zero, as it should be.
Shape of WFE vs. ray height is a sort of a parabola.


1 June 2007  A34 Ghost Problem

After I run a zernike, tracing a different system
continues to show some zernike behavior! as if the
Zern data are not being zeroed with each OEJIF parse.
Example: ZERNNULL then PARABNULL. Nope doesn't reproduce. 
Keep an eye out for this effect.



EJIF has its printing class PrintText, but...
GJIF has no printing capability yet.  PrintGraph?


31 May 2007  A34  TEST PLAN
Exhaustive testing. I will create a set of null test files and
include null output fields xfinal yfinal WFE. 

  CASSNULL.OPT    a Cassegrain telescope tested on axis
  GREGNULL.OPT    a Gregorian telescope tested on axis
  HYPERNULL.OPT   a single refractive hyperboloid
  HYPER2NULL.OPT  a biconvex refractive hyperboloid
  PARABNULL.OPT   a concave paraboloid in parallel light
  POLY1NULL.OPT   a concave paraboloid using A2, parallel illumination
  POLY2NULL.OPT   a concave sphere approximated via polynomial coefs
  SPHERENULL.OPT  a concave sphere tested in elevation, azim, angled
  TORIC1NULL.OPT  a sphere implemented using equal radius toric
  TORIC2NULL.OPT  a parabolic toroid, wheel spokes illumination
  ZERN1NULL.OPT   a Newtonian telescope, PM+Zern3, tilt=Zern1

All tests are passed. 

31 May 2007  A34  New Feature: Colorizer?
WFE colorizer: ray/spot colors from wfe
     would need a dialog boxes to enter encoding wavelength
     would need to implement continuous color wheel.
     Make available to Layout, Plot2, Plot3
  
31 May 2007: potential memory saver and growth potential?

Is the text table a memory hog? at 512 chars/line * 1000 entries
each table is only 0.5 MByte, no big deal, and 10000 entries, 5MB.
    
Present design uses dRays[][][] to store all table ray results.
Size = (1000 rays)x(13 attribs)x(100 surfaces)x(8bytes/entry)=10.4 MB.
This could be an impediment to growth: would become 104MB at 10000 rays.
I think 104 MB will soon be no problem.  But it should be easy to make
this dRays[] structure sized to the *current* nrays rather than to an
arbitrary MAXRAYS fixed in history.  

Current architecture has RT13 completely static and hence completely
functional whenever called by any client for any purpose, and therefore
must handle anything thrown at it without task-specific initialization.

The "ray store" concept embodied in dRays[][][] is extremely useful: it
allows full access to the current table trace by all clients, text and
graphic.  But this dRays[] idea contrasts with the appropriate usage of
static mathematical objects which are typically tiny and need little or
no static resources to function. 

If RT13 were replaced by a instantiable class, and if every instantiation
of this class were to construct a results table dRays[][][], the constructor 
could create the needed array on the fly with appropriate size.  For
example if the user were working with 10 surfaces and 10000 rays, that
would amount to 10.3MB, okay.   

This scenario would require that all clients (text, graphic) be able to
access the current RT13 object, perhaps using a kind of public registry
service located within DeskMenuFrame, the class that keeps track of every
subsystem status and service.  We could have a private field within DMF
and any client could initialize itself being passed the currentRT, and 
bail out if for any reason that pointer were null.  Or, slicker, each
menu choice that needs a fresh ray trace could first trigger that trace
by instantiating an RT object, then passing this instance to the client.
Ooops! proliferation of expensive objects.  How would we arrange to trace 
a system and then have several views of it?  

Perhaps static is best after all. 


  






30 May 2007  A34
Installed proper normalizer of Zernikes so that the dimensional
effects work properly.  Specifically, unlike the polynomials,
the Zern coefficients apply to dimensionless "rho" = r/R where
R = Zernike circle.  The function values contain the OZ coeffs
which give them the user dimensions, no change needed; but
the gradient terms need to be divided by R so that we get d/dx
in user units.  Done.  Seems to work!  ZERNTEST shows an example
with Diam=4 units, with which Zern3 (paraboloid + offset) with
coefficient = -0.125 has a focal length of 4 units.  RMSerr < 1E-16.
This is correct; an equivalent paraboloid has A2=-0.0625 and FL=4. 
Of course, to have an FL=4, one needs to place a Zern3=-0.125 surface 
at Zlocation = 3.875 since its vertex is not at its origin.



29 May 2007  A34
Installed Zernike analytic derivative
Installed ToricPoly analytic derivative
Removed numerical deriv from RT13.  
RT13 renumbers xyz[] and norm[] going to/from Z methods. 

Test suite is in C:\Java\Math: Toric.JAVA and ZernTest.JAVA
Compiles clean! Works good!
Test case ToricConic.OPT now is clean!
  gives 16 digits accuracy,
  compare used to be 11 digits, 
  and now no dependence on DELTA.
Test case ToricPoly.OPT using Curv=-0.5 and Asph=-1:
  shows no errors in 15th decimal place.
Test Case ToricPoly.OPT using Curv=0.0 and A2=-0.25:
  clean at 15 digits; 1's and 2's in sixteenth place.

Discovered origin ray bug on PolyRev. For radius=0, must
skip divide-by-radius and force slope = 0 before exitting.
Another bug: the endpoint of the ray is not set by the
tracer, but rather is allowed to default to the origin
of the artwork! as if the tracer has abandoned ship at
the endgame of deciding how to draw the final vertex of 
a failed ray.  This is in Layout.  Cause is plot to NAN.

Test case ZernTest fails.  Using Diam=2.0 for unit circle,
and using Z=+0.875 and zern3=-0.125 should give null test.
Nearly so! but progressively slightly too weak towards the
edge, like negative SA.  Acts hyperbolic in x and y.  

I suspect a scaling error in Zern, wherein the x and y
coords are regarded as real world not relative to Diam.
With Diam=2.0 the sagitta looks correct, 0.25 with r=1
and Zern3=-0.125.  But with different diameters, the
sagitta looks wrong and the slopes look wrong. 

For Zern3 = -0.125, B4J reports for x=1, Diam=2, normal is...
   {-0.408248290463863, 0.0, -0.912870929175277};    sos=OK. 

What does ZernTest give for this exact same case normal?
   {-0.447213595500, 0.0, -0.894427191000} using gA[2]=-1.0;
or {-0.447213595500, 0.0, +0.894427191000} using gA[2]=+1.0;

Could this be a case of completing the square with gA[2]=-1 rather
than gA[2]=+1?  Thereby getting the renormalized gradient wrong?
No because the Toric gradient is same boat and is treated OK. 
No because I tried changing it to +1, yikes positive mirror! 
Now reflects like a negative mirror.  Absurd.  

Could it be a case of something deep inside vGradZern()? 
I will install some diagnostics to report what is going on.

B4J: Z.java diagnostics say for R=1, Diam=2, Zern3=-0.125:
  z = -0.125
  a = 1.00 = azimuthal part
  dzdr = 4.0000 as expected
  grad[0] = 4.000 **not as expected*** why not +0.5?
Aha, surf[OZxx] comes in later, in vGradZern().
Aha, vGradZern() is delivering -0.5000000000000 exactly.
For this grad[0], the perp is given as....
   {-0.408248290463863, 0.0, -0.912870929175277};

What the devil.

These are not the same vectors! yet these are the same vector generators.
Given the same input.  Something is fishy in Vermont. 

Maybe this:  within Z.vGradTerm(), xnorm is x/r but perhaps 2*x/Diam??? 
No, for this simple test case the two are identical: r=1, Diam=2.

FOR THE CASE OF THE A2 = -0.25 PARABOLOID.....
RT13:vGetPerp() normalizes (-0.5, 0.0, 1.00) and reports delivering 
   {0.4472135954999958, 0.00000000000000, 0.894427190999916}
After reflection off the A2 paraboloid, ray direction is
   {-0.80000000000000, 0.0000000000000000, -0.600000000000000}
as it should be given grad[0] = -0.5 and norm[0]=-0.447213595.
These are the classic 3:4:5 right triangle relations with 
sin(theta) = 0.8 and sin(halfTheta)= sqrt(0.2) = 0.4472135...
So the polynomial is properly represented and differentiated.

BUT IN CONTRAST THE ZERNIKE3 = -0.125 CASE, the diagnostics
show proper setup: azim=1.000, xnorm=1.000, grad*coef=-0.500000,
and Z.vGradZern delivers grad[0]=-0.500000000000 as it should.
But then RT13.vGetPerp() declares it has normalized this to...
   {-0.408248290463863, 0.000000000000000, -0.912870929175277}
which of course is the wrong normal.
Then after reflection off the Zern mirror, ray direction is
   {-0.7453559924999299, 0.0000000000000000,-0.6666666666666667}
an interesting triangle certainly! why -2/3? but wrong.
 
Apparently, RT13.vGetPerp() can deliver two differing perps
for the same input.  Unlikely! Concentrate on RT13.vGetPerp() which
calls Z.vGetZnorm().  AHA: vGetZnorm() receives the proper prenormalized
normal from its client, overwrites norm[2]=-1.0 then re-normalizes.
It should have received an unnormalized gradient from its client.
Smells like double normalization, never a good thing.   For comparison
following A2=-0.25, vGetZnorm() receives the raw gradient and properly
normalizes having forced norm[2]=-1.0.  AHA... in Z.vGradZernRev()
and also in Z.vGradZernTor() I find the concluding statements....
        ......
        grad[2] = -1.0;
        normalize(grad);
which corrupts the gradient and causes the problem. Yanked them. 
Bingo, Zern3=-0.125 works properly now. 

----------------

Bug: failure of the zero rays in ZERNTEST -- they give indeterminate answers
rather than zeros, yet have status = OK2.  Renamed POLYZERO.OPT.  Findings: 
  * no trouble with these rays if Curv=0.0 or blank
  * no trouble with total absence of Curv, A2, Zern etc
  * no trouble if A2 column is empty, or Zern3 column is empty
  * trouble appears if A2 has 0.0 or Zern2 has 0.0 or ? tag.
Clearly something goes wrong when an item becomes InUse yet has not
been properly zeroed out.  
Diagnostics in Z & RT13 show Z:vGetZnorm() is receiving NAN bad data.
Diagnostics (DEBUG>3) in Z show the zFuncs() are all running properly.
Trouble must lie in the derivatives. 
AHA. Z.vGradPolyRev() calculates a radius r=Math.sqrt(r2),
and then evaluates a polynomial sum, and then to lower its
index by one, it divides by r.  But! if r=0, result = 0/0 yikes.
This is a freshman blunder.  How could Lampton be so stupid.
The right way is to avoid the extra r in the first place, i.e.
add up only the proper exponent terms, no divide.  But for now
I'll just skip the whole process if r=0  thereby saving work.
Else I'll keep the sum-and-divide since it is pre debugged.

Reorganized the Combiners in class Z to make them more obviously
distinct from the elementary surface generators and gradients.

Works; those dead zero rays now show up as proper zeros.
Also the strange bug in the layout, with failed rays not getting
plotted anywhere but the (default?) NAN graph origin, vanishes.

Needs a huge amount of retesting. 
















27 May 2007  A34: Testing
Upon removing all direct access to RT13.bRunray() and using the
formal steps RT13.iBuildRays() and later RT13.dGetRay() to access
the giant table, I find some new bugs.

Layout lacks ray colors and random rays.
^^ FIXED using an update from bRunray() to dRays[][][].  The update
to dRays[][] had been left out of bRunRandomRay() but now is OK. 

Plot2D and Plot3D are looking good!

Histo1D and Histo2D don't show any spread of data,
as if they are looking at zeros, not the real data location??
^^ FIXED using proper RT13 lookup.  Works good now. 

-----------

27 May 2007  A34: first RandomRay causes an array OOB exception. 
^^ FIXED -- improperly dimensioned spans[] smins[] now RNSTARTS.


27 May 2007  A34  Testing continued

ACCURACY: with the new C/CX/Poly logic installed and now running
as it should, I checked out the "exact" calcs for Xcyl and Ycyl;
see TORICCONIC file.  Get 15 or 16 digits clean, as expected.

I set up RT13.dNumSolve() to use a user-settable Auto::StepSize
parameter and tried various values.  With TORICPOLY and its
polynomial coef A2 = -0.25, the typical errors seen are
    STEPSIZE  XF,red     YF,blue
    1E-10     114 nano   99 nano
    1E-8       9 nano     5 nano
    1E-6      33 pico    20 pico
    1E-4      14 nano     0 pico
    1E-2      146 micro   0 pico
Yikes I would have expected both Xf and Yf to go the same way.
The Plot2 diagram agrees with the InOut listings.  

^^Would be really nice to get an analytic derivative!
The error level here is not the Brent solver but rather is the
numerical gradient.  How about some derivative cranking.  Even
if it has to be machine driven. 

Layout (in contrast) hows the red rays falling onto a point.
Oddly, the blue rays shown in Layout have the correct spread.
Defocussing the ToricConic by 1ppm also produces a mathematical 
blur into red and blue at a 1ppm level, seen in InOut, and seen
in Layout in blue only! Red appears sharply focussed.  Strange.
At the 1E-2 level, everything agrees showing red & blue blur.
Aha: Red isn't sharply focussed, it has vanished! leaving behind
the outgoing starting rays which are of course sharply originated.
Moving the red rays starting point to X=+0.001 shows that the 
outgoing rays are properly mapped but **above a certain magnification**
the red return rays disappear.  The blue rays continue to be plotted.
Same issue when simple concave sphere is traced: high Layout magnifications
cause some rays to drop out even though they ought to appear.  
  ^^ APPLY LAYOUT DIAGNOSTIC TO TROUBLE SHOOT THIS ONE

Replacing the ToricPoly with a concave unit sphere: should get
ideal null test on the red group; SUCCEEDS. 

Replacing the ToricPoly with a ToricConic concave paraboloid with
C=-0.5, asph=-1, the radial rays should ideally become parallel
and the parallel rays should focus.  SUCCEEDS. 



May 27 2007  A34 Testing

Testing the Curve-CX ternary logic implementation reveals a
significant discontinuity in behavior that is highly nonphysical
and must be eliminated.  Suppose a toric is built using some 
polynomial terms.  Try varying Curve through zero.  Near zero
the response is a polynomial toric.  But at zero, the behavior
switches to a cx cylinder! suddenly ignoring the polynomial terms. 

The errors that emerge with C=0.0, A2=-0.25, CX=-1 are these:
   OEJIF classifies this as "PolyRev".  Even with A2=0, PolyRev.
   Layout draws a polynomial of revolution, not a cylinder; indep of CX.
   The rays agree with this polyrev and also are indep of CX.
   Why is that nonzero CX be ignored?  
   Here's why: with C=forced zero, toric is set to false, and
   2x2 matrix sets temporary CW=Xcyl.   
   Then, later, since nontoric, presence of Poly upgrades CW=PolyRev.
   Fix:the presence of Poly should move bC 

The errors that emerge with C=0.0, A2=blank, Cx=-1.0 are these:
   OEJIF classifies this as "Xcyl".
   Layout draws the proper CX cylinder
   The ray intercepts occur on a plano surface, not the CX cylinder.
   The ray redirections are appropriate for the cylinder. 
   ^^ FOUND IT; ERROR IN RT13.doQuadSolve() FIXED.

No errors are seen with C=-0.5, any asph, CX=-1.0: TORICCONIC case OK. 

----------------

25 May 2007  A34   New Optical Element: The Distorter!
Imagine an optical surface that can be assigned any profile
z(x,y) by the usual means (conic, toric, poly, zern) and
has the phantom property of no change in ray direction --
but modifies the ray path by an amount z.  It would have
the ability to distort wavefronts! and introduce any given
WFE pattern desired.  It would be autoadjustable, so as to
allow the net system WFE to be minimized, after which its
coefficients would then represent the opposite of the WFE
of the remainder of the system.

Cool, huh? a diagnostic for adding & removing WFE patterns.
This could be a quick/easy way to generate Zernike coefficients.

Designed, built and installed.  Not tested though.  Uses a new
optical surface type OTYPE = OTDISTORT and is captured from OEJIF
via type letter "W" or "D" and implemented via RT13.vPropagate()
that has a special check for OTYPE=OTDISTORT that modifies the
RPATH by an amount equal to the surface's local RTZL local Z. 
This allows the surface to be viewed, as a physical surface, and
have its form measured via Layout, yet have no effect on the ray
trace except through its RPATH.  

------------------------

Task: eliminate all usage of function keys.  I have learned that
Macintosh computers reserve all function keys for OS activities 
and are not accessible by applications.  In particular the editor
needs a column insert command to replace current F9.  Maybe
Alt-RightArrow? to complement Ctrl-RightArrow?  Get a list of
Mac modifier keys and Java virtual key codes.  

http://developer.apple.com/documentation/UserExperience/Conceptual/OSXHIGuidelines/XHIGKeyboardShortcuts/chapter_20_section_1.html#//apple_ref/doc/uid/20000957-CH253

Macs have four modifier keys:
  cloverleaf or command
  control
  option (like Alt key)
  Shift
Main keys rightArrow, leftArrow etc are already heavily
overworked by the OS or maybe some common applications:
 
  command + rightArrow = change keyboard layout
  shift + command + rightArrow = extend selection to the next word
  shift + rightArrow = extend selection one char to the right
  shift + option + rightArrow = extend selection to end of current word
  control + rightArrow = move focus to next cell within this table

Colon, semicolon, comma are only slightly overloaded:
  command colon pops up spelling window
  command semicolon finds misspelled words
  command comma opens an application's preferences window. 
So we could commandeer command + colon to insert a colon column.

Microsoft key modifiers:
http://support.microsoft.com/default.aspx?scid=kb;en-us;301583
http://support.microsoft.com/kb/126449/


--------------------------------


Implementation of the OEJIF surface classification issue:

Create a packaging system for OEJIF parser results.
Move all z(x,y) functions and all normal(x,y) functions into Z.
This way we can establish a uniform system for parsing and
communication parser classification results.  

Low Order = plano, conic, xcyl, ycyl
High Order = poly, zern, toric
The categories of data product are...............
  Low Order positions and intercepts: analytic
  High Order positions: analytic
  High Order intercepts: numerical via Brent.
  Low Order gradients: analytic
  High Order gradients: analytic

There is a limit to how much the OEJIF parser can set up for
surfaces when it sees them.  A zero or empty curvature might 
indicate -- at parse time --- a cylinder.  But later during 
AutoAdjust that zero curvature might become nonzero thereby
changing the surface to a toric.  Similarly for Poly, Zern.
So the classifier has to be based on potential future needs
not just the instantaneous parse-time appearance.

There is TERNARY LOGIC needed for the special case of Curve & CX.
Three states per variable are:  UNUSED,  FZERO, ACTIVE.
UNUSED:  empty and no tag.   -0.0 is the key. 
FZERO:   forced zero and no tag. This forces cylinders.
ACTIVE:  nonzero value or a tag. Two of these force toric.

This situation differs from the other optics params, where
Unused = (empty or zero) and untagged.  For these usual
params, it is OK to use NegZero() && isAdjustable() to set +0.0
thereby indicating active and potentially nonzero or actually
nonzero.  These usual parms need only binary logic. 
  
             CURVATURE + POLYNOMIAL
             UNUSED  FZERO   ACTIVE
           -------------------------
CX=UNUSED  : plano   plano    conic
CX=FZERO   : plano   plano    ycyl
CX=ACTIVE  : plano   xcyl     toric
           -------------------------

Coding will work as follows.  First eliminate the easy 5 cases
by using an if() that makes sure they are skipped.  This gives
us a 2x2 submatrix with both fields in use:

  if (bCinuse and bCXinuse) // work only the 2x2 submatrix:
  {
      bCactive = Ctagged or Cnonzero;
      bCXactive = CXtagged or CXnonzero;
      if (bCactive)
        cx = bCXactive ? OPTORIC : OPYCYL;
      else
        cx = bCXactive ? OPXCYL : OPPLANO; 
  }

    static final int OPPLANO   = 0; 
    static final int OPCONIC   = 1; 
    static final int OPCONICLT = 2; 
    static final int OPCONICGT = 3; 
    static final int OPXCYL    = 4; 
    static final int OPXCYLLT  = 5; 
    static final int OPXCYLGT  = 6; 
    static final int OPYCYL    = 7; 
    static final int OPYCYLLT  = 8; 
    static final int OPYCYLGT  = 9; 
    static final int OPTORIC   = 10; 
    static final int OPPOLYREV = 11; 
    static final int OPZERNREV = 12;
    static final int OPZERNTOR = 13; 
    static final int OPNFLAGS  = 14;   








24 May 2007  A34

Bug in torics.

In TORIC put Curv=+0.3 and CX=-0.30, expect a saddle,
but see a cylinder whose apparent CX=0.
Then put Curv=+0.3 and CX=0.0, expect a cylinder,
but see a sphere.  ??? as if CXeff = Curv + CXtable.
Strange; with no CX column present, Curv gives a proper
sphere or paraboloid, but when I turn on CX=0, the
y-axis (!) becomes twice as strongly focussed as if
the deviation, or angle, were being added twice.   ??
And the Xfinal Yfinal Zfinal for the U0 rays are not
affected by turning on CX.  

Reason: in Z.higher, the various booleans control terms
that are successively added, as if a higher surface were the
sum of a Quad + toric + whatever.  But really, toric includes
the quad behavior.  So it is a matter of defining the solver
in terms of the needed components.  There are just a few combos:

PLANO -- nothing is needed; z=0 is the correct answer.  

QUAD -- use default near-side formula

QUADGT -- use farside quad solution 

POLYTORIC -- includes quad as a special case.
  if poly terms are available, add them to z(y) not z(x)

POLYREV --- includes quad as a special case
  if poly terms are available, add them to z(r)

ZERN --- includes quad, polyrev if available, not toric.

Don't co-add these, just pick one.  Use switch() not if()....

Implementation:

  1. Search out any surface generators that may lie in RT13, Layout.. 
     and replace them with calls to the Unified Surface Library in Z.

  2. Reorganize the OEJIF parser levels for OSOLVER, along the lines
     of the list above.  But there is a branch!  Zern is not appropriate
     in connection with torics?  or maybe it is? as an additive thingy?
     And there are two kinds of Poly: polyRadius and polyY for torics.
     These can be parsed within OEJIF.  Quad is cheap to compute? so 
     might as well lump that in with PLANO?  No -- not that cheap. 

  3. Then reorganize Z along the lines of switch() not if()....
     Here, select the family of surface types that associate with a 
     solver:  QUAD, XCYL, YCYL are trivial to get roots and gradient.
     General TORIC (fourth degree) and higher are restricted to numerical.
     So we need a solver based solution.  

I am thinking of a tree, or assembly sequence, that has these terms:

Plano z=0; 

then...

if(Zern), add Zern(r);
         if(!CX) Quad;      ........ or if(CX) add toric family;
         if poly add poly(r);        if poly add poly(y);
       
So the main desideratum here is if(CX) which splits the two families into
two distinct regions.  If(zern) has to have a simple implementation within
OEJIF since the cost of evaluating zern(r) is high  **PRECIOUS COMMODITY**

But where to get the information??  Can OEJIF deliver the needed information?
Is there a respones mechanism for which "hasZern()" can be communicated?
And more forcible, is there a conveyance of "hasToric" or dissemination?>


How about we base progress on four parser flags:

FLAG 1: HAS CURVATURE --- CURV PRESENT
FLAG 2: HAS TORIC  ------ CX PRESENT
FLAG 3: HAS POLY   ------ A1...A14 PRESENT
FLAG 4: HAS ZERN -------- Z1...Z36 PRESENT

From these four flags it is practical to calculate the appropriate path
through the surface evaluator in class Z.

z=0;
if (Zern) add zern;
if (toric) add toric; 
   if (poly) add poly(y); 
   exit;
if (quad) add quad; 
   if (poly) add poly(r); 
   exit.
exit;




24 May 2007   "Minus Zero Input Bug"
If the user types in a datum "-0.0" then guess what:
that gets conveyed as a valid datum by SuckFloat()
and reported as -0.0, i.e. absent data!
U.suckFloat() will need some help here.    If its
given string length > 0 yet its result is -0.0,
its result should get converted to +0.0.   
^^ Done. Works.  No more minus zero input absence. 




24 May 2007  A34  -- Diams like Curvatures?
Instead of three curvatures OCURVE OCURVX OCURVY the trend is to
eliminate OCURVY and have OCURVE be the general curvature, and
to have OCURVX used only to impose an asymmetry on the figure
for torics.  Works. 

Analogously, should not we eliminate three diameters and have
just two: OODIAM being generally applied to x and y, and have
OODIAX used only to impose an asymmetry on the figure when 
the two dimensions are unequal?  So that when OODIAX is present
OODIAM continues to serve for the y axis?  

Let's do it. Simplifies the parser. Complicates RT13::iris() because
now dX and dY have to be figured out on the fly given OODIAM OODIAX:

parse time:
        simply distinguish "D" and "DX" fields.
run time:
	double dY = surf[OODIAM];
	double dX = surf[OODIAX];
	if (U.isNegZero(dX))
	  dX = dY; 

^^Done. Installed in OEJIF, Layout, RT13.  Seems to work but
needs extensive testing, as does CURVE/CURVX and torics. 


------------TESTING TORIC/ZERNIKE/CONIC---------------

Important to note that -- to get a toric -- user must provide
both Curv = inUse and also CX = inUse.  If there is 
only CX = inUse, with Curv = empty & no tag, then there
results a plano classification.  CX by itself does nothing.





23 May 2007  A34  -- the "In Use" paradigm

Here's a behavior model that can be understood by any user,
and can be implemented easily behind the scenes.  Every cell
will have a derived boolean status variable "bInUse".  The cell is in use
if it has something written in it, or has a tag = 'A'....'z' or '?'.
These tags indicate that it is accessible to master/slave adjustable
status.  Something written in it, even zero, indicates that it is
a quantity of interest to the ray tracer. 

  bHasWriting = sCell.trim().length() > 0; 
  bHasAdjTag = (cTag == '?') || ('A' <= cTag <= 'z'); 
  bInUse = bHasWriting || bHasAdjTag;
  
See this idea implemented in OEJIF:

    static boolean bIsAdjustable(int jsurf, int field)
    // Tests for range of adjustable attributes & tag chars.
    {
       int iatt = oF2I[field];
       if ((iatt < 0) || (iatt > OFINALADJ))
         return false; 
       char c = cTags[jsurf][field]; 
       if (c=='?')
         return true; 
       if ((c>='A') && (c<='Z'))
         return true;
       if ((c>='a') && (c<='z'))
         return true;
       return false;
    }


OEJIF will compute bInUse as part of its general data cell parsing.
If a cell is empty, and tag = nonadjustable, its surfs[][] = -0.0
so as to communicate its unused status to RT13.  If the tag character
is adjustable, then put +0.0 into surfs[][].  Finally, parse the 
numerical contents and place the result into surfs[][].

Later, in RT13, a routine need only check for isNegZero() to decide
to skip computation of polynomials etc.  Since the code value for not
in use computes the same as zero, a test for equality against zero
will serve to turn off a feature, whether it is unused or forced zero.
And we will never repeat the situation of having AutoAdjust move a
variable away from zero after the OSOLVER decision was made earlier in
OEJIF.  By putting the low level use/discard decision at low level,
the run-time computation becomes consistent.

The situation isNegZero() can now be used by OEJIF to choose a solver, with
the negZero result indicating that a datum is not needed for OSOLVER.
The situation (surfs[j][i] == 0.0) can be used at trace time to decide
exactly which solver paths to follow and which polynomials to include. 

Massive cleanup in OEJIF is needed. 







23 May 2007  A34  -- "Stuck at Zero bug"
What if a surface were initially plano? and classified plano?
Thereby not responding to any curvature data? hence making no
responses to testing various deltap values in the curvature
matrix element?

The surface classifier can use the C=0.0 when there is no
question mark, but if there is a question mark it had better
allow a more general treatment.  

Same goes for Zernikes, torics, etc.  The question mark turns
on the feature, not merely its nonzero value.

If the curvature were truly *absent*  hence -0.0, then maybe
we could ignore the question mark?  Nope. 

Three fixes are possible:

HIGH ROAD -- in REJIF, examine all field headers and select
the least complicated profile type that is consistent with
every field every value, zero or questioned or not.

LOW ROAD --- in RT13, during iBuildRays(), examine all the 
113 optics parameters and assign each surface its type for the build.
(This is a work saver: less to be done during parse, and you always
get the simplest possible solver.  But searching 113 parms is itself
a computational load!)  Trouble here is accessing parser clues such
as OQUADGT and OQUADLT which is easy for REJIF.  

MIDDLE ROAD --  some combination of these.  Patches & kluges.

^^Middle road works! no longer stuck at zero.

However the present "logic" selecting a surface solver is gnarly.
Too many patches & special cases.  Impractical to document.  
How about, if there is a column, then you will get a solver with
that generality?  and blanks are zeros?  and no testing for
question marks?  Easier to explain.  Then, within the solvers,
if some crucial set of coefs just happens to be zero, save the
work if it makes sense. Polynomials; zernikes; etc will go more
slowly if they don't check for nonzero coefs, so they should check.




23 May 2007  A34  -- "Stuck at Zero bug"

Need to answer question: is AutoAdjust working efficiently?
It is working but occasionally exits with unfinished work.
Worse, if an initial curvature = 0 (flat lens), Auto won't
even start.  Why?  A33 has the same problem; see LENS
with initial curvature C=0.  Won't budge.  Giving it a
tiny starting curvature however boom! optimizes quickly
and efficiently.  As if the delta were zero!

Notice: 
for one adjustable, minimizing wfe, need 4 doResiduals() per good iter.
for two adjustables, ditto, need 7 calls to doResiduals() per good iter.
for 3 adjustables, ditto, need 10 calls to doResiduals() per good iter.
for one adjustable, using xgoal, need 4 doResiduals() per good iter.
for two adjustables, using xgoal, need 7 doResiduals() per good iter.
for 3 adjustables, using xgoal, need 10 doResiduals() per good iter.

I would have thought, for two sided derivatives, need 3,5,7 calls
when seeking 1,2,3 adjustables for 2-sided derivs + center point. 

Ah. Reason is this: in Auto::bBuildJacobian(), there are three calls
per derivative axis, not two.  Inefficient! Reason is the sequence
is to get pplus, then pminus, then pzero. Each is obtained by a nudge.
Each nudge performs a complete trace and a complete reevaluation of
goals and resid[].  The fourth call is to get the sos of a trial 
point that probes the descent.  Upon a successful probe, that point
and its sos is adopted and then 3N further calls are made to fill in
the Jacobian.  



22 May 2007  A34  -- WFE testing

The centralization of resid[], sos, rms, npts within Comparo
seems to be working well.  Comparo gives reasonable results 
both for usual xgoal and for wfe. However there is still a bug in 
the detection logic enabling AutoAdjust:  should be enabled when

  (nadj>0) && ((ngoals>0) || bWFEpresent)

but it acts like it is ignoring bWFEpresent and is using 

  (nadj>0) && (ngoals>0).

^^Found it; fixed. Works.
Also: converted Auto RMS display from fd(rms,12,5) to fe(rms),
so that it shows all the significant digits and it looke like
InOut RMS display.   

///////////////// test results ////////////////

With nominal 00008 rev H prescription:
TMA72 with all  320 rays:  52.54 nm RMS
TMA72pixel best 160 rays:  36.84 nm RMS
HYPER2 with eight rays: 1.358e-15 m RMS

HYPER2 does optimization via xgoal = 0.0; works
HYPER3 does optimization via wfe;  works. 

//////////// autoadjust problem /////////////////////
since ngood & npts are refreshed each iteration, it
follows that if a ray gets killed during autoadjust,
that merely shrinks the optimization group.  Need a
user selectable AutoAdj behavior:  Stop the iterations
if a ray drops dead, or leave it to die and press on
regardless.  ///////////////////////////

AutoAdjust "Tolerance" often works nicely.  Even with a ridiculous
setting (say: 1E-18) it keeps on chugging until it gets down
to the 1E-18 level, then exits.  But occasionally it exits prematurely
leaving a much larger error uncorrected.  Needs a kick, then it goes
nicely again.   Friction?


With HYPER3, starting with 1st surface lens curv=1, asph=0., 
using WFE for optimization, starting 1.134E-2 = wfe, ngood=5;  
AutoStepSize=1e-6, AutoTol=1E-18, 
takes 9 iters, RMS=2.025E-15 at end of optimization. 

Yikes, starting with curv=0, asph=0: stops immediately!
Singular case? But stops immediately, even with asph=frozen. 


>>>Need to do a thorough examination of stopping.


21 May 2007  A34 -- WFEs without Ray:WFEcolumn

A user may choose a WFE output in plot or histogram form,
with no WFE column being present in the .RAY table.  To accommodate
this work, it is necessary that there be a default of one subgroup
of rays -- the set of all rays --- predefined, with out a WFE column,
and that the REJIF parser of WFEsubgroups always set up this list of
pointers  RT13.iWFEgroup[] pointing to group zero as the default.

Also, even without any WFE column, it is important that RT13.doWFE()
be run at each trace, making the results dWFE[kray] available to
graphics clients.

This arrangement will slightly complicate the behavior of the
InOut "RMS" dialog.  WFEs are always computed and available. 
However their presence should not automatically trigger an
RMS dialog.  The InOut RMS dialog behavior ought to be...

   If no goals, and no WFE column, then no dialog.
   If no goals, but with WFE column, then display RMS WFE dialog.
   If goals, but no WFE column, then show usual RMS dialog.  
   If goals and WFE column, show RMS dialog with both contributions.

Globally accessible indicators of Ngoals and separately WFEcolumn
will be needed, to guide InOut.  Let's use...

   DeskMenuFrame.giFlags[RNGOALS] --the number of explicit goal columns
   DeskMenuFrame.giFlags[RWFEFIELD] -- -1=absent, else present.
   DeskMenuFrame.giFlags[RNWFEGROUPS]  -- default one group; maybe more.

This needs work in REJIF, InOut, Auto. 

Furthermore -- let's centralize the business of computing "npts" within
Comparo, so that each user of npts has to access it via a unified point
counter.   Comparo.nGetResid() could supply npts directly and then
make available three double-precision results:
   getSOS()
   getRMS()
   dResid[]





20 May 2007 A34  -- implementing WFE

  1. Old "Front" and FGoals descriptors & parsers removed.
  2. REJIF's getCombinedRayFieldOp() gets a WFE output column.
     WF still means WFinal; WFE now means WFE. 
  3. rI2F[] and rF2I[] gain WFE knowledge? No, using special fwfe.
  4. Special REJIF parser written, based on Comparo.vGangGoals().
     Its purpose is to fill RT13.iWFEgroup[kray], thereby assisting
     the built in computation of each group's WFE. 
  5. RT13's output mechanism changed from dRays[][][] to dGetRay(). 
     This way every client can access WFE as it accesses other data.
     This way, clients like plotters and histogrammers won't know 
     that they are fetching a dRay[] or a special dWFE[] number.
     Hides the complexity from the clients.  Seamless.  Smooth. 
     Written by Mr. Joe Cool. 

and then the main effort...

  6. Build a subgrouped WFE calculator into RT13 that evaluates
  path + sCorrection + eCorrection - subgroupAverage
  so as to produce a zero mean WFE.  Work by successive subgroups,
  as governed by the preparsed iWFEgroup[] array in RT13 from REJIF.
  Put all WFE final results into dWFE[kray]. 

^^Done. These all seem to work.  Reasonable WFE answers too!
although a vast amount of checking will be required.

Next up, the InOut "RMS" dialog will need some surgery.
For ordinary goaled variables, it is OK, but if WFE is present 
there will have to be a special calc excluding ordinary goals
and including only the zero-goal WFE results. 


19 May 2007  A34 -- implementation of WFE

Here's a simplification.  Let REJIF parse its goal columns and
do its usual testing for syntax and counting of goals.  Let it
also detect a WFE column.  This detection will begin the search
within WFE labelling each ray with a WFEgroup number and updating
a global flag NWFEGROUPS to something other than zero.  This flag
being > 0 establishes a goal for RMScalc and for Autoadjust.

Then, within the WFEcolumn, REJIF scans its rays for cTags, and
sets a WFEgroup index, RT13.iWFEgroup[kray], with every distinct
tag char defining its own group.  Colons, blanks, numbers, letters,
whatever; kray=1 defines the tag for group 0; etc.   This way,
RT13 can go about its WFE analysis using pregrouped good rays.  
Upon reaching the end kray==nrays, REJIF can post giFlags[NWFEGROUPS]
as the total count of groups to be processed later. 

Then, within RT13, after tracing all rays,  iBuildRays can work through
0<=iGroup<NWEGROUPS and scan its output for good rays and build the needed
averages. RT13 will need a static array dWFE[nrays]. For each kray, RT13
will make one huge sweep through nrays, sequenced by iGroup.  For each group 
(1) copy RPATH into dWFE;  (2) get aveStart & aveEnd for this group; 
(3) correct RPATH for starts and ends;  (4) remove average WFE from group.

WOULD WE GAIN ADDED ACCURACY by first removing average RPATH from group?
Thereby achieving less additive error in steps 2, 3, 4?  Probably not. 
Can try this and make sure.  

Later, in the RMS calculation, we will be dealing with zero-mean populations
and so the multiplication subtraction errors in var = <r2> - <r>2 will be
nonexistent since <r>2 is zero. 












18 May 2007   A34

This seems to be getting messier.  Not only will AutoAdjust
have to deal with a now-special goal attribute, lying outside
the organized 13-element group of ray results, but also all
the graphics plotters and histogrammers will have to deal with
the same problem.  Moreover, the plotters won't want to show axis
numbers like 7.222555888 with nanometer ticks, but would much
rather show numbers like 0, 1, 2 nm.  So the quantitative
result from a WFE trace ought to be mean-subtracted and tiny,
and it should be selectable the same way as the other 13 attribs.

How to do this?

Perhaps enlarge RT13 to become RT14, where both RPATH and RFRONT
are computed on an equal basis within each trace?  Since RFRONT
is evaluated only at the final surface, it could nonetheless get
filled into the 14th result for every surface 0..nsurfs, so as to 
avoid perturbing the surface-selector design of each plotter. 

Or! leave RT13 with 13 data per ray per surface, but privatize
any direct access to dRays[][][].  Instead, implement the output
accessor with a public RT13 method:

   RT13.getRay(kray, jsurf, iattrib)

whose implementation could perform the WFE calc when asked.

I am imagining there is no use at all for "Front" data owing to
its ungainly large DC component, and no use at all or FGoal data
owing to never having any need to specify a user supplied goal.
Always, WFE should be calculated from the invisibly grouped and
averaged goals of zero per subgroup.  Always.  

This means:  want only one new column data type "WFE" and it will
always be subgroup-mean-subtracted, and always will be suited for
plotting.  It will become a 14th result attribute.  This one 
column in .RAY will have to carry the subgroup tags.  Even a
colon becomes a subgroup of its own! so there will be 127 possible
subgroups including blank; not just 52 from A...z.  

WITH THIS PLAN....

  RFRONT = 135 goes away.  No special calc here.
  RNPARMS = 13 changes to 14
  RWFE = 13 gets added to ray table output attributes

  REJIF should classify the new WFE column as output,
  and initialize its parse result RT13.iWFEgroup[kray] to
  0 meaning default group, or 0...ngroups-1 if WFE is present,
  and set new giFlags[RNWFEGROUPS] =1 if no WFE column, for plots
  else to how many groups.  Colons/blanks count as a group.

  RT13.iBuildRays() must always perform a special calc to evaluate 
  all the subgroups and WFE[kray].
  This is needed even if there is no WFE column in ray table since
  WFE is a valid output descriptor in the graphics.  

  MAXGOALSUBGROUPS = 127 gets installed/  Unneeded?
  xyzStart[3][MAXGOALSUBS]
  xyzEnd[3][MAXGOALSUBS] gets installed into RT13

This user interface is reasonable: no unused columns, single
point of contact responsibility for setting up WFE, but however
there is a special calc needed when we get to resid and to RMS:
there are no goals whatsoever! Instead of "resid = ray - goal",
it is "resid = wfe" because all the wfe goals are zero.  No huge
difference owing to the fact that that there are no parseworthy
goals for the 14th attribute anyway -- still will have to watch
out for special case #14 and deal with it explicitly within the
residual evaluator in Comparo.  


17  May 2007 A34
To bring wavefront into the goals & residuals mechanism,
so that an optic can be optimized for minimum WFE, 
since Front is not an addressable trace parm, there
will be some extra code needed.  Reason is that, 
at present, Comparo::iSetupGoals() can claim only those ray
goals whose attributes are 0....12, which are RX..RPATH...RWL.
Cannot yet deal with a 14th goal = WF, needs a special maneuver
to get around numbering of dRays[][][] data and diversion to
the dWF[] array.  At line 92, instead of simply limiting iAtttrib
to values 0...12, need a way to introduce WFE and later decode
it to fetch RT13.dWF[] rather than dRays[][][].  Something like...

  goalAttrib[igoal] = op % 100;   // 0...12 or RFRONT % 100 = 35; 

and then later ...

    private static double getFinalRayValue(int kray, int i)
    {
        if ((i>=RX) && (i<RNPARMS))    // i=0...12
          return RT13.dRays[kray][nsurfs][i];
        if (i == RFRONT % 100)         // i=35
          return RT13.dWF[kray];
        return -0.0;                   // i=anything else
    }


Front does not work right yet.  WORKS GREAT when all
the rays in the table have a common focus, because then
the focus centroid applies to all of them.  BUT when there
is a sequence of foci, as in TMA72.RAY with 320 rays and
ten field locations, the overall average field position is
inappropriate for any one field position final ray path
correction term. 

Need some way to break up the global averages and apply them only
to groups of rays.  Could use FrontGoal group suffix letters?
This way the user would furnish two ray fields:
  "Front" to show the individual ray wavefront;
  "FGoal" to allow the grouped goals to become visible.
This way, the InOut "RMS" calculation would become RMS wavefront.
However now RT13 will need an array cRayTags[NRAYS+1] to perform
the selective averaging of the individual gval[][].
Therefore RT13 should also include gval[][].  REJIF will have
to implement the flowing of goals into RT13 for processing,
since RT13 needs goal groups, and must do the XYZ averaging on
WFEstart and WFEend.   Let MAXGOALSUBGROUPS=52 for A....z:

   xyzStart[3][MAXGOALSUBGROUPS]
   xyzEnd[3][MAXGOALSUBGROUPS]

Should the displayed wavefront include, or exclude, the average
path separating the incoming and outgoing wavefronts?

By having the "floating goals" concept piped directly into the
FGoals column, visibility is provided as to this average path for
each goal subgroup.

Or, by having each subgroup's average path subtracted, could instead
do the whole job with one column (tidier layout) but a bit more
mentally confusing since not the same behavior as other ganged goals.
Issue: to show just "Front" data, we *still* need subgroup data!
This is because the Front correction to path depends on the subgroup
being averaged.  So with Front, need aaaaaBBBBBccc subgroups visible;
or with WFE column, also need aaaaBBBccc subgroups visible; these
two are really the same except for subtraction






16 May 2007  A34  A new class Comparo
How about we put all the comparison tools into a new class Comparo
which can do four things, assuming a trace has been run, and that both
dRays[][][] and bGoodRay[] are available from RT13:

  1.  gathers all the current goals from REJIF
  2.  sets up the helpers iGoalAttrib[] and iGoalField[]
  3.  performs any needed goal flotations
  4.  computes resid[] and getRMS(); returns the current nGood.

This class would be useful to InOut in displaying the current RMS.
This class would be useful to Auto in repeated optimization steps.
This class would eliminate the current duplication of rval[] gval[]
and the helper arrays iGoalAttrib[] and iGoalField[].  



14 May 2007 A34   Repairing the RMS blur calc

Seems to me that when the iBuildRays() method is called,
the MSError ought to be recalculated by floating the 
adjustable .RAY targets, and made available to any caller
(InOut or Auto), along with the number of contributors to
that MSError.  This way, the deviations are combined into
all accesses of the trace, and a unified presentation of the
blur becomes available to all clients.  In particular the 
RMS business is made visible by InOut, and is made a local
minimization target within Auto. 

I regard RT13.iBuildRays() as an ideal home for several functions:
  * run all table rays
  * compute Fronts
  * compute all ganged goals including Front goals
  * compute MSE and RMS deviations from goals
This way the gathering of diagnostic data and optimization data will
become centralized into a single method.  

Repair plan:
  0. Review & understand workings of rval[][] and gval[][].
  1. get RMS working within InOut, using resid[]. 
  2. identify which parts are generally useful
  3. factor the general stuff out, into RT13:iBuildRay()
  4. test everything. 





13 May 2007   A34

Funny bug:  With deltaPath=3.5 as in HYPER2,
And with P0 = 1, 2, 3, 4;
I get front = 4.5, 5.5, 6.5, 7.5
which are correct and depend on P0 + deltaPath;
but I get Pfinal = 7.5, 7.5 ,7.5, 7.5
as if only the final P0 drives all of the Pfinals.

Strange!

Aha, a bug in the InOut shows the results for the final ray
in the locations for all the rays.  Most obvious in LENS.RAY
presenting x1, x2, xfinal.   The bug is *not* seen via Layout; must
be an error either loading RT13.dRays or reading RT13.dRays[].
Found it; InOut was loading its data from RT13.rayseq[] rather
than from RT13.dRays[].  Of course the rayseq[] contains only
the final trace.

Works now.  Even "Front" have about the right scatter on TMA72!

RMS calc is now broken.  Probably needs to be revised so
as to use dRays[] not rayseq[].  




12 May 2007  A34

Here's a more radical idea to get WFE capability:

Instead of ray-by-ray computations of everything using bRunray(),
let's have each client create a BigTable = double[iatt][surf][kray].
This need never be larger than 13 * 100 * 1000 doubles = 1.3 M doubles
which is 11 megabytes. It will usually be much smaller.  BigTable can
be a static property of RT13 for example, to be populated to the
size requested by the RT13 client, 13 x (nsurfs+1) x (nrays+1).

Then, with access via a public method to BigTable, each client can pick 
and choose what it needs to fill in its data.  

Suppose the new RT13 method iFillTable(nsurfs, nrays) returns ngood.
After it puts all the trace results into place, it can also calculate
the averages at surf=0 and surf=nsurfs, thereby delivering the required
corrections to be applied to any kray's path to get WFE for that kray.
All without any duplication of effort.  

WFE is handled just like any other calc: with the 13 attributes already
filled in, the averages and the end corrections can be evaluated for
each ray, and F0.....Ffinal can be read out.

Could try an experiment generating a huge table within RT13.
^^WORKS.  Seems to work OK.  At least, nothing crashes.

Advantage: computational clarity.  The RT13 code always does the same
thing, once.  It gets called with Nsurfs and Nrays, and fills in the 
BigArray and is static thereby making it available to the client.  

For random rays, RT13.bRunray() can continue to be called with kray=0.
Its WFE will be calculated on the fly, using prearranged averages. 

To start this software mod, it would be best to distinguish between
the raystart macros and the raytrace macros.  Thus:

RX....RPATH: common to both
RSWAVEL, RSCOLOR, RSORDER: raystarts only
RTXL...RTWL:  raytrace only.

^^Done; works. 

Next I'll install a big array dRays[][][] into RT13, have it static,
 double dRays[kray][jsurf][iatt] = [MAXRAYS+1][MAXSURFS+1][RNPARMS];
This sequence allows passing one ray by bigArray[kray]. 
Static means it is installed as a fixed work area at startup
and won't have to be destroyed & rebuilt with each trace task. 
Reusability.  Maybe good.  (Maybe not!)  












12 May 2007 A34

Here's a way forward to build WFE capability:

1.  Thoroughly check out Path functions, and eliminate
all PathZero corrections, so that Path simply always gives
P0 + sigma(NiDi). 

2.  Create a new special calc constant RFRONT=135 and build 
a recognizer into the rayHeaderParser and the plotVarParsers.
But! How to code a goal for Front? adding 10100?? convoluted.

3.  Create a new flag giFlags[NEEDFRONT] and have it set/reset
by RayParser according to presence of "Front" also set/cleared by
various customers of RT13: plots, histos, Auto.  (This is merely
a laborsaver; perhaps first edition always performs the calc.)

4.  Build the new capability into RT13:
giFlags[NEEDFRONT]=0:  business as usual;
giFlags[NEEDFRONT]=1:  special calc in progress:
  if (kray==1) clear the summation of xyzsum[]; ngood=0;
  if (kray > 0)
     do the usual one ray trace;
     if (good) 
        sum xyz into xyzsum[] and increment ngood.
  if (kray==nrays), after trace & summing, even if not good,
     if (ngood>0)
     {
         calculate xyzave[];
         repeat entire trace putting wfe[]=path[]+corrections;
     }
At this point the client can read out the public wfe[kray] list. 

5. AutoAdjust: when Front is not displayed in RayTable, set NEEDFRONT=0;
if Front is shown in RayTable, set NEEDFRONT=1 so that table updates
can properly display the changing values of Front;
if Front is a RayTable **goal**


11 May 2007   A34

I notice that the zero path definer is broken:
HYPER2.OPT declares P0 = whatever, but no effect.
However Pfinal looks OK namely 3.5000000000 independent of Pzero.

There is a design issue in connection with i/o of ray table data.
The REJIF header string recognizer "getCombinedRayFieldOp(String s)"
delivers only input ray parm index numbers, + 100*surfcode.
What should it calculate for "Front"?  Something like 13+10000
with the 10000 signifying "final" and 13 signifying "Front".

No no: "Front" is not a ray table index, but instead requires a
special calc.  So the code for front should be like RNOTE=133
or RDEBUG=134, maybe RFRONT=135, to trigger this special calc.
There is no "front" within the RT13 trace; it depends on the ensemble
of rays traced and therefore has to be calculated after the ensemble
is complete.  


9 May 2007  A34 future feature:  WFE

WFE is a useful design tool and could be an autoadjust driver.
WFE is not the same as OP.   OP is merely the optical path between
the ray start and the ray end, sum of NiDi of the segments.
WFE = OP - OPaverage + startCorrection + endCorrection.
This way, WFE has zero mean and explicitly corrects for end effects. 

For a collection of rays, e.g. a ray table, there is a well defined
average vector of starting points AveStart[] for example the center of the
entrance pupil.   Each ray's relative position vector P = Ray - AveStart
and absolute direction start vector Dstart = {U, V, W}. Then,

  startCorrection = (ray - AveStart)�Dstart = P�Dstart

Similarly at the end of the trace there is a well defined average ending
vector point aveEnd...

  endCorrection = -(ray - AveEnd)�Dend

So, adopt for WF the computation

   WF = OPD + (ray - AveStart)�Dstart - (ray - AveEnd)�Dend

and then
   
   WFE = rmsVar(WFP).


Give it a shot! Needs some work interpreting to work smoothly with AutoAdjust,
so as to allow the optimization of optics wrt least OPD.  Still, worthwhile!
In particular, *after* the group of table rays has been calculated, then
only then can we calc the two needed averages, and then each ray's WF, and
then the system's WFE.   This should be part of cleanup in InOut and in each
step of Auto.









7 May 2007  A33 Bug/Omission Parade

  * If .MED is loaded, then index numbers are unrecognized.

  * Control-C is flaky copying to clipboard.  Edit::Copy is OK. 

  * Some graphics need to be jiggled to show Options effects.

  * Blank control number -> entire table:  not implemented
  
  * Fresnel surfaces not implemented

  * Manual scale settings not implemented

  * Layout needs graduated distances along radii: 3x^2 - 2x^3.

  * Advisers ">" and "<" not yet implemented? 
    Yet necessary now that zero is a valid intercept. 




7 May 2007:
Although in A33 the Graphics screens handle keystrokes,
the editors fail to get theirs.  Why?

EJIF:
        ePanel = new EPanel(this); 
        cPane = getContentPane();
        cPane.add(ePanel); 

GJIF:
        this.setContentPane(gPanel); 

What is focussed is the generic getContentPane() of any JIFrame.
For EJIF this will be cPane; deaf to keystrokes; holds sliders.
FOr GJIF this will be gPanel; processes keystrokes; no sliders. 

Perhaps, at startup, the starting JIFrame should offer a way to
access its keystroke receiving JPanel?  

        super.setKeyPanel(ePanel);

Works.  Now EJIF can introduce its private ePanel to its BJIF,
yet GJIF's BJIF can default to focussing on the ContentPane = gPanel.





7 May 2007   A33: Combining caret & QuickPNG into class BJIF
and arranging for EJIF, GJIF to extend BJIF thereby gaining the
caret and PNG capability.

^^Works!

BJIF does not know anything about its descendant's client JPanels.
Instead it focusses a generic Container.  Works. 
Also, to blink, it switches a flag and repaints itself.
This OS repaint automatically includes its descendant's client JPanel.
BJIF offers a public method getCaret() to get caret state. 
Each JPanel knows its host BJIFrame and can getCaret() there,
as part of its paintComponent() method.  


6 May 2007  A32: Move caret from DeskMenuFrame into EJIF and GJIF.
This experiment is to try implementing the ideas in FocusDesktop
where JIFrames gain focus not just "active" status.

Q: In FocusDesktop, is the setFocusable(true) essential to
overcoming the odd-even autopromotion bug?

A: No.  The KeyFrames each receive and process keystrokes
without having setFocusable(true) present. Probably due to
ePanel.requestFocusInWindow().


Things needed in this move:

1. Retain the existing ePanel and gPanel KeyListeners.  Evidently,
from the evidence in FocusDesktop, keystrokes will get to the JPanel.
This is likely due to the internalFrameListener bug fix.... 

                    public void run()
                    {
                        ePanel.requestFocusInWindow();
                    }

that gets the client ePanel focussed properly. 

2. Each JIFrame will need its own caret timer and engine.  Copy these
from the JIFrame in FocusDesktop. 

3. Supporting the carets, DMF will need an accessible bHostActive.
This is sensed by each JIFrame's blink task. 

4. Supporting its caret, each JIFrame needs an internalFrameListener.
It has this listener already, to fix the odd-even autopromotion bug.
Associated with the listener is a flag bJIFactive, visible to
the caret blink task.  

5. Each JIF will have to manage QuickPNG.  The DMF will set a flag
bQuickPNGrequested and at the right phase of the caret blink
the only active JIFrame will check that DMF flag, and elect to 
run doQuickPNG() and clear the DMF flag.  

^^ Works! Nice caret action, no dead carets, perfect autopromotion,
and PNGs work nicely both text editors and graphics.  






5 May 2007  --OVERVIEW OF CARET/FOCUS METHODS-------

METHOD 1 -- CENTRAL CARET  (A31)
  Here, DMF contains a single caret engine.
  When a menu pops up, CARET=OFF and caret messages are paused.
  When the menu vanishes, caret blinker resumes.
  What if entire DMF becomes passive?
  Method = BlinkerBlocker.
  Communicates repaint() to active JIFrame & JPanel.

  Cannot simply clear a caret instantaneously, within a single tick:
  Reason is that repaints happen later, deferred by OS.  So the idea
  of setting bCaretOn=FALSE, repainting, then TRUE, then moving on
  to the newly promoted JIFrame -- fails if all these actions are
  requested within the same tick process.   Both JIFrames will later
  get repainted but with flag=TRUE. 

  Maybe a way to get this to succeed is to use two ticks.  
  There is a 2x2 state diagram:  newFront=t/f;  blinkOK=t/f.
  Here, only when blinkOK=true and newFront=true do we invert & repaint.
  All other cases we set bCaretOn=false and repaint the old window.
  This matrix emphasizes the need to get a dying caret to go away. 
  Caret will only turn on when JIF is old.  

  Much better! Dead carets are much more rare.  Problems:
   * Half of all menu popups, the caret keeps blinking.
    (the other half, it vanishes, as it should.)
   * Half of all other-app focusses, the caret keeps blinking.
    (the other half, it vanishes, as it should.)
   * When I pop up a new editor, half the time I get a dead
    static caret on an old JIF, erasable with an other-app repaint. 
    And, half the time there is a blinking caret in the active frame
    that stands behind the OpenFile dialog.  

  [Shouldn't all frames go passive when a dialog is in progress?
  [Isn't this a temporary loss of focus?  


METHOD 2 -- DISTRIBUTED CARET.  (see FocusDesktop)
  Here each JIFrame contains a blinker and drives its KeyPanel.
  Each blinker is ticking all the time.
  When the JIF is not active, caret=OFF. 
  When the DMF is not active, caret=OFF.

  In the MainWindow, I have window listeners for Activated, Deact, Focus, deFocus,
  also can put MenuListeners for popup popdown if I decide that's important.  
  These listeners control a flag  bHostActive:  static & visible to all KeyFrames.

  In each KeyFrame I have a local flag bKIFactive and a bCaretOn flag. 
  I have an InternalFrameListener (essential to Fix focus bug ThreadID=604540)
  that governs bKIFactive. 
  Also each KeyFrame has a timer, whose task is to manage bCaretOn;
  turn it off at every tick unless bKIFrame=true and bHostActive=true.

  Each KeyPanel knows nothing of all this.  It merely checks its internal flag
  bShowCaret during its paintComponent() method.  This flag gets preset or
  precleared by a call from the KeyFrame just ahead of the repaint(), so that
  the information is sitting there in the keyPanel at the time it is needed. 

  It works!

  But this is a lot of repainting.  Could probably be streamlined, so that
  repaint is requested only when there is something to change; perhaps
  test for prior state of bCaretOn and if that was also off, do nothing. 

  This works too! and it seems cleaner than method 1 although it has a bunch of
  timers running all the time. 



3 May 2007 A31  BUG REPORT if a .MED table is loaded,
then numerical index data in .OPT become unrecognized.
They should be parsed as numerical index data.  


1 May: BUG REPORT Edit::Copy always transfers to clipboard OK
but Control-C is flaky --- sometimes transfers, sometimes not.


1 May 2007 A31
Covering a dead caret with a window,
then reexposing the dead caret, often clears
the dead caret.  But sometimes it creates a
dead caret where there was none before! as if
the caret ticker is still ticking and is in
an uncontrolled state.  


1 May 2007  A31
Reviewing the issues of JIF=front, JIF=active, JPanel=focus;
also the bug fix thread to the odd even failure to autopromote;
also the right way to coordinate (JIF=front+active & JPanel=focus).

Perhaps will require normally forbidden state JIF=focus
followed by an explicit keystroke transfer to the JPanel. 

Working folder = FocusDesktop for these experiments. 
  Never put setBackground() into paintComponent() because
  setBackground() calls for a new repaint().  

Sun document about focus....
http://java.sun.com/j2se/1.4.2/docs/api/java/awt/doc-files/FocusSpec.html
http://java.sun.com/docs/books/tutorial/uiswing/misc/focus.html
http://java.sun.com/docs/books/tutorial/uiswing/events/focuslistener.html

"Focus-lost as well as focus-gained events can be temporary. 
For example, a temporary focus-lost event occurs when the window 
loses the focus. A temporary focus-gained event occurs on popup menus."

30 April 2007 A31
Discovery: the deMenu repaint clears any dead caret.
Just like an uncover repaint.  Good!
This means that, in the present design, the stashed bitmap is
OK, just the screen composition is corrupted with the 
dead carets.  

^^Nope: see 1 May. 

Switching applications, the active JIF properly loses
its blinking caret, but of course any dead carets remain
visible and static. 

Could this fix work:  
  1. each JPanel's repaint could contain a test for the 
    frontness of its JIF, being sure to skip the
    caret if not front;   
  2. Let each loss of panel focus request a repaint,
  3. Let each loss of JIF=active request a repaint?
This fix would avoid any need for coordinating a caret flag
and would avoid any need for a central DeskMenu switchyard.
Requires a panel focus listener. 
Requires a JIF=active listener.
Requires a way for a JPanel to test for JIF frontness
because now its repaint appearance will depend on frontness.

Maybe this fix could also help solve the occasional failure
of active to agree with front.  Sometimes, the JIF that is 
lit up is not the front JIF! as if JIF=active does not
coincide with JIF=front & JPanel=focussed. 

29 April 2007  A31
Working on the dead caret problem.

[Gordian Knot (meat axe) approach:  repaint all windows
at every timer tick, with a single global bCaret flag array.
Sounds very expensive of machine effort! Not recommended.]

Cannot simply detect JIFclosing {bCaret=false; repaint();}
because the repaint will happen later, different thread,
whenever the OS gets around to it, meanwhile another
JIFopening{bCaret=true; repaint();}  will have turned
on the caret! and both repaints will include carets. 

Suggests I need a caret flag for every JIF.  This way
there can continue to be a master caret clock but each
JIF's repaint will have to check its local caretFlag,
not confusing it with a global bCaret that is serving
various oddly timed threads.  With a local flag, the
flag can be set by that JIF's own circumstances, and
whenever repainting happens it will be in the appropriate
state.

Or: since there is only one window that is allowed to be
active and have its caret enabled, why not have a master
DeskMenuFrame pointer designating the active JIF or null?
This way, each of handover repaints will do the right thing:
the defocussing JIF will repaint with its caret=off, while
the focussing JIF will repaint with its caret=enabled.
Ooops! Won't work because only the specified JIF will ever
get repaint() instructions from the caret blinker, so the
defocussed JIF won't ever get the news and repaint with its
caret off.  

Perhaps each timer tick should do two things: repaint the
previously focussed JIF with a caretfree bitmap, and repaint
the currently focussed JIF with the alternating caret. 
Hmmm, sounds costly of machine effort.  

How bout this:  Each JIF has a caret flag, and DeskMenuFrame
has a JIFActive pointer = null when nothing to blink. 
Let each JIF have an InternalFrameListener receiving 
focus/defocus events and managing the local flag bCaret.

  Each JIF: when defocussed, set bCaret=false, immediate repaint.
  Do not wait for CaretEngine blinker events to do this.  
  This is certain to eliminate dead carets.
  When focussed, set bCaret=true, but don't repaint until
  CaretEngineEvent is received which verifies everything. 

  This way: all blinkings are centrally managed
  but all defocus cleanings are locally managed. 

With the current bitmap, is it OK for a JIF to show its caret,
even though there is a menu popped up?  I think it might be OK
since the menus overwrite the native JIF bitmaps.  I think. 




23 April 2007
Slight improvements in A30 providing automatic filename suffixes
in StartFiles.

Concern: I still often see dead carets. 
Both in editors and graphics.  Review and clean up.
 ^^ DEAD CARET TEST: cover a dead caret with the window
of another application, then uncover it.
Dead caret reappears? must be part of the bitmap.
Dead caret vanishes?  defocus repaint never happened.
 ^^ DEAD CARET RESULT: refreshed screens are ALWAYS CLEAN.
Must be a failure of the defocus caretfree-repaint to occur.  
If it had occurred, then the visible window would be pre-cleaned. 
The uncover-repaint refreshes with the OS bitmap which is clean. 

Concern: I see that ten segments does a poor job on
graphics that have extreme edge slopes (DROPLET) --
as if the fiducial segment points are equally spaced
in (x,y) radius independent of segment length.  
I presume also that optics that have severe slopes near
the vertex suffer a similar drawing presentation problem.
Is there a cheap way to shift the spacings when there
is significant surface slope?  Or perhaps always use 
extra short segments at both ends of each arc?
Given radial fraction 0<f<1, g = 3f^2 - 2f^3 might do,
it provides small steps near f=0 and f=1, bigger steps
across the central plains around f=0.5.



13 April 2007  A30
Found the problem in RT13::iGetNonnegRoots()  -- 
when a=0 the quadratic is truly linear, one root, OK
but when c=0 it is truly quadratic and must not discard x=0.
Faulty clause in iGetNonnegRoots() was discarding x=0 when c=0.
^^FIXED now c=0 case is solved in general quadratic routine
where the zero root is perfectly legal. 

12 April 2007  A30
About letting ray segment length ZERO=VALID:

1. For OSPLANO surfaces the code is already in place
except for a serious blunder: in the RT13 dIntercept()
function, all the "break" statements were missing from
the general surface profile switch() statement! and
therefore all the solvers were being run for each
surface regardless of type.  

2. For OSQUADs, zero = invalid owing to iGetPosRoots().  
Instead I will need to create iGetNonnegRoots(). 


11 April 2007  A30
I have attempted to build some sort of capture for showOptionDialog()
but failed.  Always, the dialog is transient, and vanishes before it
returns, thereby denying the Robot any valid on-screen rectangle to
grab.  And when the dialog is on screen, no way to get inside it.
However! a full screen capture works OK simply using FuncKey 11,
manually, from which I hope to be able to trim the bitmap graphic
and use it for illustrating the user document.  Works pretty good
only trouble is trimming is imprecise: cannot trim to the pixel
level with Microsoft products.  OK for now I guess. 

10 April 2007
Now that I have an automatic fixer of .PNG suffixes,
why not add automatic fixers of .OPT  .RAY  .MED suffixes?
and eliminate that potential headache?
^^ALREADY INCLUDED within EJIF file name processor. 
Very much more general than the .PNG specific solution
that is built into the QuickPNG writer.  

10 April 2007   A30
Two little nasties to work on:

  1.  Raylength = 0 should be made legal for plano targets.
  This would permit starting iris, found in many SS files.
  No downside, because no chance of double intercept when plano.
  Maybe even for curved targets! allowing zero clearance lenses.
  Can always work around using ">" hint for multiple hits,
  and multiple hits is a *rare* requirement. 

  2.  Changing Options should force an immediate repaint of the
  frontmost, or all, of the affected graphics, so there is an
  immediate feedback -- no need to jiggle!

8 April 2007    Edition A30
Revised the QuickPNG function to install a file chooser.
Cleaned up the file selection function, and prepared a
slightly improved JIF capture routine.   Seems to work!
and so far (knock on plastic) no captured dead carets,
either with text or with graphics.  I added a new class
PNGfilter at the end of DeskMenuFrame, to guide the chooser
towards PNG filetypes.  ^^DONE

Oh yes the QuickPNG function should not be called QuickSave
since "save" connotes saving your work for future machine
access.  The "PNG" part is a reminder that you will capture
a picture of a frame, not the data. ^^DONE

7 April 2007    Quick.PNG
Too complicated having to go back and figure out the QuickNNN numbers
and assign filenames post facto.  Far better to solicit a filename
at the point of creation.   ^^DONE



5 April 2007
Would be nice if an iris whose OD is lacking would not draw an OD.
So the Layout won't show an OD where none is specified.
^^DONE. Works.  Also cleans up some code in Layout. 

4 April 2007  "Phantom" is implemented as a lens
but having equal refractive index on its two sides.
Needs a writeup in manual, and an example. 
Code needs no changes, it is already clean. 

4 April 2007   Introduced "type"
The .opt column header "Lens" or "mirror" can now also be "type"
That "y" distinguishes it from Tilt.  

Needs writeup and examples in the manual. 


3 April 2007   HOEs and FZPs

Some kind of glitch here:  March 4 2007 edition does hoe's OK
although "order" requires .OPT fails with .RAY
Yet:  April 3 2007 edition, with the "order" fix in place,
order fails both in .OPT and .RAY.  The fix failed to fix!
and worse, it broke the .OPT function!

^^FIXED: 
problem was indexing ray[RORDER] which makes no sense.
The index RORDER applies only to raystarts[] not to ray[],
as is made clear in the file CONSTANTS where these indices are
defined.  With this fix in place, "order" in .OPT works, and
is overridden by "order" appearing in the ray table. 
But if .RAY "order" is left blank, the .OPT "order" serves.
Entries override but blanks do not, just as they should. 
Test and demo files are FZP, FZP2.

Needs writeup and example in the manual.
-----------


There are at least two problems revealed by the test files
HOE and FZP.

1.  "Order" meaning diffraction order is ignored if it appears
in the .RAY table.  "Order" works OK in the .OPT table but that
forbids having one table show the diffraction of two or more
orders.  I'd prefer order to function in either place, with .RAY
overriding .OPT if both are present.
^^ Fixed in RT13. 

2.  What kind of optic is an HOE? refractive/transmissive? or
Reflective?  If a transmission grating is simply a grooved lens,
then why is HOE not just a groovier lens, still of type "lens"
but having the HOE descriptors, not the GX parameters??  This 
appears to be a confusion within the parser.  

^^ NO CONFUSION -- CODE IS CORRECT.

A feature not a bug! 
User may call it a hoe, or a fzp, or a lens, all function properly.
Everything defaults to a lens except these predefined types:
  i,I:  iris 
  G,m,M: mirror; G for compatibility with reflective Grating -> mirror
  r,R: retro.
Nice to have "order" in .OPT so can have several gratings
but then must not use "order" in .RAY lest .OPT be overridden.

Needs writeup in manual. 





22 Feb 2007
I now prefer for optics to have width=1.7f; rays width=1.0f
Optics drawing should request HEAVYLINE to get this. 
Rays drawing should request LIGHTLINE. 
^^DONE installed into LayoutPanel.java

Also Gpanel.java now has proper HEAVYLINE and LIGHTLINE
interpretations for BasicStroke(1.7f,...) and (1.0f,...).

Also CAD.java PostScript driver has proper interpretations
for "fat" and "thin" setlinewidth = 1.7 and 1.0 points.
^^Works. 

21 Feb 2007   CAD.java  PostScript generator
http://atrey.karlin.mff.cuni.cz/~milanek/PostScript/Reference/PSL2s.html

  n setlinecap
n=0: butt cap  (default)
n=1: round cap (adopting this)
n=2: butt cap extended half the line width

  n setlinejoin
n=0: miter join (default; 10 setmiterlimit)
n=1: round join (adopting this)
n=2: bevel join = butt join + filling triangle.

trying n=1 both places....
^^ Looks good!


19 Feb 2007,  GPanel.java
Java BasicStroke.JOIN_MITER makes spiky line joins. 
http://java.sun.com/j2se/1.4.2/docs/api//java/awt/BasicStroke.html
   BasicStroke(float width, int cap, int join)
Trying BasicStroke.CAP_ROUND, BasicStroke.JOIN_ROUND.
^^FIXED -- now looks great. 

30 Dec 2006  A29  Ray Generator Failures
Two failures of the ray generator:
  1.  Sometimes no rays are generated. 
  2.  No explanation of why.

Reason for #1 is: fails to re-parse ray table immediately prior to
searching for the needed fields, thereby missing the newly added field
headers, and believes it cannot write into the table for lack of one
or both required field headers.

Another reason for #1 is that only 5, not six, buttons are checked
by Options:RayGen to identify which coordinate pairs are wanted. 

Reason for #2 is: no MessageDialog explaining why failure occurred.
Need clear communication as to what headers are required and fact that
these are lacking in current Ray.Parse() information.  

FIXED:  
Installed vMasterParse() call in DeskMenuFrame RayGen listener, that updates
a newly installed a public flag "bRayGenOK" within DeskMenuFrame;
Installed a flag reader failure dialog in the Options:Dialog warning if no Ray Table;
Repaired index range 0...4 raised 0...5 to allow all six Option buttons;
Installed feedback from each PutRays() method of Options allowing verification;
Installed failure dialogs into each ray generator showing absentee header(s). 




30 Dec 2006  A29  New Caret

This variant "A29" will have its blinking caret implemented via the
OS-visible method paintComponent(), rather than trying to float the
caret atop the display.  Perhaps will have better luck!  To make it
blink I propose this:

1. The blink task repaints the entire window, by requesting repaint().
   The blink task also manages a public boolean bShowCaret(). 
2. Via OS, repaint() triggers paintComponent().
3. paintComponent() will call bShowCaret().
   If false, it does not include the caret in its artwork. 
   If true, it does include the caret in its artwork. 

This way, we can avoid having the caret appear prior to its new window
host appearing (looks disconcerting!)
This way, we can avoid the window repaint fighting its own caret. 

To implement this I will need to...
  Eliminate deliverCaret() from DeskMenuFrame.
  Eliminate the doCaret() methods of EJIF and GJIF, 
  Create a public DeskMenuFrame method bShowCaret().   
  Create a caret painting snippet into paintComponent() of EJIF, GJIF.  
  Also I will write a new blink task. 
  Reuse blinker blocker of DeskMenuFrame that kills the
  blinking when something pops on top of any window.

DONE. WORKS. 


29 Dec 2006  A28  Flaky Caret, continued.

To have the caret implemented via repaint, I shall need a new variety
of DeskMenuFrame.  Instead of

    private void deliverCaret()
    {
        JInternalFrame front = jdp.getSelectedFrame();
        if (front != null)
        {
            if (front instanceof EJIF)
              ((EJIF) front).doCaret(bCaretOn); 
            else if (front instanceof GJIF)
              ((GJIF) front).doCaret(bCaretOn); 
        } 
    }

Instead I will put some code dependent on DeskMenuFrame.bCaretOn into
the paintComponent() method of each JInternalFrame, and trigger like this:

    public boolean bCaretOn; 

    private void deliverCaret()
    {
        JInternalFrame front = jdp.getSelectedFrame();
        if (front != null)
          front.repaint(); 
    }




28 Dec 2006  A28  Flaky Caret
Not random at all.  Working from C:\Java|A28:

1.  When I start fresh, and request....
  New Optics:  caret OK
  New Rays:    caret OK
  New Media:   caret OK

2.  When I start fresh, and load...
  Open Optics: no caret usually.
  Open Rays:   no Caret usually.
  Open Media:  no caret usually.

But after I click this window, placing the caret (i,j), 
then it becomes visible. 
And EPanel:doCaret() is receiving alternating true,false
messages as it should.
Perhaps the iCaret,jCaret location is initially off screen?
Perhaps for a fresh load, need iCaret=0, jCaret=0?
Nope: diagnostic put into doCaret() shows ordinary expected
values of iCaret, jCaret, not off screen, and although
clicking mouse within table *always* places proper values into
iCaret,jCaret, is often fails to make the caret appear. 
Example: CASS.OPT can see end of table, yet no caret. 

***HINT*** When CASS.OPT is 20 lines long it extends below
the default initial view box;  no caret, even when we scroll
to the end, or when I place the caret at 4,4 etc.
***BUT*** when I shorten CASS.OPT to 12 lines long, and restart and
load it, the caret appears as it should at line 13, and follows
the mouse click around the table visibly. 
***AS IF*** the paint box is faulty if initially off screen.
...Trying this paint modification at: EPanel:doCaret() line 171
     eliminating  gTemp.setXORMode(Color.YELLOW); 
     substituting gTemp.setColor(Color.BLUE); 
     ahead of     gTemp.fillRect(i, j, ICS, charheight); 
...Ha, this works.  
...No it doesn't.  Sometimes it works, but other times we get just
one blink, then the caret turns invisible, until another table is
opened, whereupon the caret behaves properly.   ???  
CASS.OPT  gives me one blink.
CASS.RAY loaded then blinks OK
and mousing back to CASS.OPT caret is now OK there as well. 
Sometimes both tables get failed carets. 

***HINT*** when the caret is invisible, it is actually blinking 
white on white.  Becomes apparent when caret is on a blue highlighted
text line, or when it sits atop a printing character.  
SOMETIMES NOT ALWAYS -- sometimes, it is truly invisible, as if
it has a transparency setting that is failing to get set, or is
being randomized somewhere.  

Is this a situation of setPaint() setPattern setColor()?
  setPaint(Color.BLACK) fails to compile under Graphics. 
  setColor(Color.BLACK) compiles fine, but is flaky.
Perhaps I need Graphics2D instead? AHA yes;
  setColor() is used only in Graphics;
  setPaint() is to be used in Graphics2D. 
Compiles OK this way.... but still flaky caret. 

Hmmm. Perhaps I need an explicit Rectangle object. 

    Rectangle2D r = new Rectangle2D.Rectangle(i, j, w, h); 
    g2.setPaint(Color.BLUE); 
    g2.fill(r); 

Nope.  Still invisible sometimes, visible other times. 

Maybe the painting gets immersed underneath the visible table drawing
surface?  Could explain why, sometimes, I see the caret just once, but
not again.  Threads?  Table repaints immediately after the caret draws?
Doubtful: what would trigger the table repaint?
A thread timing issue might act as random as this symptom. 

In a snit, I tried five successive rect() repaints per blink.  No help. 

***HINT*** whenever the editor caret becomes invisible, so does the
graphics caret.  Both still work, technically, for editing and for
graphic navigation, but are invisible or visible together.  Why?

Maybe there is something fundamentally screwy with my plan to draw
rectangles atop other graphics.  Mostly, graphics are preprogrammed
and then blitted between two states to implement this blinking.  

Another idea: in case it is a repaint synchronization issue, I could
try running the repaint clock at 5X the blink rate, so that for every
ON paint there are five equally spaced ON paints, then five OFF paints.
This way would give multiple chances for the paint to work. To do this
I will need to rewrite the caret engine BlinkTask in DeskMenuFrame,
so instead of changing direction every run() task, it counts up the
runs in each direction, then switches when it has enough.  

DeskMenuFrame:BlinkTask was....
        public void run()
        {
            if (bCaretOK == true)
            {
               bCaretOn = !bCaretOn; 
               deliverCaret(); 
               if (bPleaseQuickSave && !bCaretOn)
                 doQuickSave(); 
            }
        }

Will try writing the caret three consecutive ticks each way....
        static int count = 0; 
        public void run()
        {
            if (bCaretOK == true)
            {
               iCount++; 
               if (iCount % 3 == 0)
                 bCaretOn = !bCaretOn; 
               deliverCaret(); 
               if (bPleaseQuickSave && !bCaretOn)
                 doQuickSave(); 
            }
        }

Results are curious:
  * Sometimes, no caret in any editor or graphic
  * Othertimes, caret in editor = OK and 1/3 usual rate, 
    while graphic caret is also visible but has an unexpected
    cadence: two quick blips then skip one, two quick blips then skip one..

Suggests that something is countermanding or overwriting the caret.
Perhaps there is a partial OS-mandated repaint of a portion of the
graphic, when it senses that something has overwritten a snippet of
the window?  Let's check for paintComponent() messages....

Aha: when I stick a diagnostic into GPanel and run Demo, I find that
its paintComponent() method gets called regularly at nearly the tick rate.
Moreover, by slowing the ticker to 1000 ms/tick, it becomes obvious
that repaints are not requested when the caret appears, but that
repaints *do* happen whenever the caret fails to appear, as if the
cause of the vanishing caret is some tattletale OS driven refresh
that covers up the scar of the caret.  

Hmmm.  My caret is fighting my OS.   Not good. 

How to incorporate the caret *into* the artwork, rather than have it
plonked atop the artwork?  I am figuring that this plonk is making
some sort of trigger that awakens the sleeping lion of the OS and
triggers a window repaint, whose effect is to overpaint my caret.

Perhaps I can build a public flag into DeskMenuFrame "bShowCaret", 
that any paintComponent can read, and if true, it finishes its paint
with a caret, else finishes without the caret.  Then, in the BlinkTask
I can put the repaint() instruction to be sent to the front window. 

--------------------------

The *real* way to do animation is not to write directly atop a graphic
but rather to stack up a series of frame bitmaps and then successively
paint them.  To be in this style, I should generate two bitmap images
of my edit or graphic: one with the caret showing, one without it.
Then arrange for the active identifier to change with timer tick
number, and have only a general OS request "repaint()" be issued
by the timer tick.  Never any overwriting.  



------------------------

Next I want the caret to appear at (0,0) for fresh loads, but at the
end of the pasted portion when pasting starting below the ruler.
So this should be governed by if (jStart==0) jCaret=0.
^^DONE: EPanel vLoadString() line 600.  Needs testing. 

-----------------------------
 

3. When I set up autoload CASS.OPT and CASS.RAY
  Optics appears but is gray border (inactive).
  Rays appears but is also gray border.
  No caret, appropriate for inactive windows.
  When I click either of these, it instantly becomes
  active and properly gets its caret. 

This behavior has to be the key to the absentee caret. 
Putting DEBUG=5 and recompiling, shows the title ticker
indicator tte, tfe, tte, tfe, tte, tfe....
indicating good clock tick action, yet missing caret. 

EPanel line 64: why is the focus listener commented out?
Because the caret is not controlled by focus.  Instead
the caret is controlled by DeskMenuFrame's caret timer. 


27 Dec 2006  working without .OPT file present:

When starting out TEST directory with a new (empty) RAY table, 
there is no caret.   Type, edit, etc....  no caret. 

Second new .RAY table: caret is OK.

Close that, open an existing .RAY:  no caret

...hmmmmm, same problem starting with .OPT file: no caret!

Performing these startups again --- caret works!

Strange.  Setting Constant::DEBUG=5 to get some diagnostics...
Hmmm.  The TitleLine shows alternating tfe,tte,tfe,tte....
but no caret.





27 Dec 2006

Possible cause of the editor paste mishap a few days ago:
Just noticed that after performing a multi line paste, the
caret *fails* to go to the end of the pasted block, but instead
it goes to the table origin (1,1).  A subsequent cut or paste
would ruin the preamble!  Find out why the errant caret.

^^PROBABLE CAUSE: EPanel line 591, jCaret = 0 after pasteInto.
Changed this so that only iCaret = 0 after pasteInto.  NEEDS TESTING

Bizarre failures of the Ray Generators.  Sometimes they work.
Sometimes they fail.   Need some diagnostics.  One possible cause
(not yet verified) is they start working after a "Factory Restore"
as if perhaps the string array is getting mangled? 

Really, the RayGenerators need not be in Options, they could be
moved to Edit, and become grayed according as to the presence of
a .RAY table.  Also they do not need to save their previous ray
settings -- could be eliminated from the Options system, just be
employed on the fly. 



26 Dec 2006   Manual says...
"If you leave the control number blank, so that the title line 
starts with non-numeric characters, BEAM FOUR will compute its 
control number automatically, based on how many entries in the 
table it can effectively parse."  ????

Sounds like a classy feature!  But not implemented, yet. 





26 Dec 2006 A28 -- Path tested using HYPER.  Works; rms error is
3E-16, about as good as can be expected.  

Logic for table ray direction defaults hinges on what is specified in .RAY:

USER SPECIFIES		BEAM DOES THIS
--------------		-----------------
U0, V0, W0		If all zero, uses {0,0,1}.
                        Normalizes to unit length. 

U0, V0			If U0,V0 too big, normalizes U0,V0 to unit length.                        
			Makeup W0 to normalize trio to unit length.
			Sign of W0: Options:DefaultRays:Sign
                  
U0, W0			If U0,W0 too big, normalizes U0,W0 to unit length.                        
			Makeup V0 to normalize trio to unit length.
			Sign of V0: Options:DefaultRays:Sign

V0, W0			If V0,W0 too big, normalizes V0,W0 to unit length.                        
			Makeup U0 to normalize trio to unit length.
			Sign of U0: Options:DefaultRays:Sign

U0 only                 If U0 too big, normalizes it to unit length.
                        Sets V0 = 0.
                        Makeup W0 to normalize trio to unit length.
                        Sign of W0: Options:DefaultRays:Sign

V0 only                 If V0 too big, normalizes it to unit length.
                        Sets U0 = 0.
                        Makeup W0 to normalize trio to unit length.
                        Sign of W0: Options:DefaultRays:Sign

W0 only                 If W0 too big, normalizes it to unit length.
                        Sets U0 = 0.
                        Makeup V0 to normalize trio to unit length.
                        Sign of V0: Options:DefaultRays:Sign

None                    Uses {0, 0, 1}.

The makeup can be placed anywhere that is needed.
  To make up W0: leave W0 unspecified.
  To make up V0: leave V0 unspecified and specify W0.
  To make up U0: leave U0 unspecified and specify both V0 and W0. 
All makeups use the sign specified in Options:DefaultRays:Sign. 



26 Dec 2006 A28  MANUAL needs a lot of work.
Section on AutoAdjust:  <<< own chapter
  Question marks
  slaves
  antislaves
  Ganged goals - no question mark needed!
Section on RayDefaults  <<< into Ray Editor
  Makeup
  Makeup table
  Random Rays  -- what is "volume" ??
Section on RayTableGenerators <<< into Ray Editor
  1D
  2D rect
  2D circ
Section on Spreadsheets
  cutPaste -> BEAM.  Records; entire table.
  cutPaste -> Spreadsheet.  Records; entire table.
    ^^ Caution about Options:Editors:ClipboardOutput!
  file -> BEAM, entire table
  file -> Spreadsheet.  Colon delimiter!






26 Dec 2006 A28 -- public Registry
^^CLEANUP PERFORMED.  Works! All "reg" arguments are deleted.
All private references to local editions of reg are eliminated.
All references to "reg.xxx" are now to DeskMenuFrame.reg.xxx(). 

25 Dec 2006 A28 -- Startup Options Bug.
RT13 does not have any reference to the registry and until now
cannot access the strings that control its parameters.  I will add
registry access and move the relevant string parsers into the RT13
method iInitRaySeq().  Registry source will now be public:

    DeskMenuFrame:: public static Registry reg; 

so that any client can refer to DeskMenuFrame.reg to access methods
of the Registry, including especially getss() numbered string fetcher. 
Note that THIS INTRODUCES AN ENTIRE NEW AVENUE to registry access, and
since it is a poor idea to implement parallel avenues, a future cleanup
should eliminate all argument transfers, replacing them with calls to
the single DeskMenuFrame.reg object. 
^^INSTALLED. Works!  

Cleanup however not yet done. Cleanup ought to be easy: find every 
instance of an argument of type Registry and delete it. 
Find every private or protected instance or usage of "reg" and convert it
to read DeskMenuFrame.reg which should work every time. 

Is "supply push" OK for Options that perform an immediate action, such
as constructing a group of ray starts --- as opposed to setting parms
to influence a future action?  Seems to me that in this case, supply
push is a perfectly reasonable way to go.  My distinction here is that
the parms within the Option are used only once, for the immediate purpose
and are never relied upon to perform passively. The parms are discarded
upon first use. 

Testing will resolve this. 
^^LOOKS GOOD SO FAR.


24 Dec 2006 A28
Bug: some of my nonfactory preferences are not loaded at startup.
If I Options:Dialog review my settings, they look OK not factory.
Then they work OK.  As if at startup they are ignored but after
one visit to Options:Dialog they get properly registered.  

Preferred startup files get loaded by an explicit call within
DeskMenuFrame to the registry(UO_START_XXX), and this works well.
The fifth line of the constructor of DeskMenuFrame creates our
registry, which reads the file B4OPTIONS.TXT and makes its preferences
available to any code that elects to inspect reg.getss(UO_XXX).

I think the ray tracer must be failing to grab its reg.getss()
information before proceding into its initial RT13 calculations. 

Ha! Bad design discovered in Options.java....
Here, some parms within RT13 were updated from within Options.
That's a no no*.  There is no way that Options can sense when RT13 or
any other client needs its fresh data.  Instead, should implement 
"Demand Pull" logic so that whenever there is a calculation pending,
that calc goes out to reg.getss() and fetches the current information.

*Except for temporary parms used only dynamically, e.g. ray builders. 


24 Dec 2006 A28
Bug: while editing cut/paste to/from clipboard with a 919-ray .RAY table
there was some kind of ghastly editor failure, mangled top line of table.
Bulk of table remained OK.  Could not reproduce.
Ha: any table that has ordinary text beneath its data records,
and then has its field widths modified, messes up its fields,
as if the absence of colons messes up each row's counting.  
Append a poem to an optics table, then modify the fields!  See it!

24 Dec 2006 A28
Needed:  Optical Path is not yet properly implemented.  Very useful in
the design of optics!  Example: path for TMA72 should be about 8 meters
but I am seeing 1.5 meters which is the final path segment not the whole
optical path.  I think each segment is properly calculated but at each
iteration of the surface loop the cumulative path is set to zero. 

I suspect that the path increment is properly written into rayseq[]
but never carried forward from surface j to surface j+1 pre increment.
If so, rayseq[j][RPATH] will be a list of the increments, not the
cumulative path.  

A good place to carry path forward is in labtovx() which prepares
each solver stage for its calculation. 
^^^DONE. FIXED. 

24 Dec 2006 A28
Unfinished: manual scale settings for Plot2, Plot3, Histo.

24 Dec 2006 A28
Need clear writeup on the use of Option::Default Rays.  Very powerful
and seems to work OK but needs a clear description.  What is "makeup"
and when does it apply?   What if SoS(U0,V0,W0) is not unity, and how is
its renormalization accomplished? 

Why have the alphabetically-last of U,V,W be the makeup parm?  Should
it not be user selectable which parm is to make up? Choice here!

24 Dec 2006 A28
Trouble: RT13 line 488 dIntercept() returns a positive value to indicate OK,
or returns a positive value to indicate failure.  Negative!
^^^FIXED needs testing.

24 Dec 2006 A28
Trouble: vPropagate() extends path += d; should be path += dIndex * d;
to account for refractive media.  
^^^FIXED needs testing. Use HYPER.OPT.

20 Dec 2006 A28
Tests running the optimization of TMA72.OPT exercise the floating goals
feature of AutoAdjust.  Works great.

Tests running the optimization of TMA72grism.OPT exercise the ganged
adjustables, organized as master + slaves.  Works great; multiple slaves
obey constant offset from their masters.  Anti-slavery not tested. Yet. 


18 Dec 2006 A28 
Discovered a tiny bug in InOut that declined any output unless
ngoals > 0 -- thereby passing some InOut tests but failing others.
Fix was to eliminate the test for (ngoals>0) in the InOut constructor.
Fixed 18 Dec 2006. 


18 Dec 2006 A28  Delightfully, noncolon tag fields do not interfere 
with the tab-out process. Clipboard transfer to a spreadsheet properly
communicates fields lacking colon tags.   Question mark tags,
letter tags, all communicate OK.  Reason: EPanel::getMarkedText()
has a switch for (tabs && j>0) that tests charTable[ruler] and 
substitutes a tab where the ruler has a colon.  Works!


17 Dec 2006 A28

Three by Two chart describes loading data into a table.
We include in native formats all the EOL variants from various
platforms.  However spreadsheets generate CSV or Tab formats
which carry no ruler or field width information, so we will
have to use a new Options:FieldWidth ruler or an existing ruler. 

   vLoadString() always inserts; chooses ruler or formula. 

                 A:NativeFormat        B:CSV/TabFormat

1. LoadNewFile:  vLoadString(true);    vLoadString(true); 

2. PasteAtJ=0:   vLoadString(false);   vLoadString(false);

3. PasteAtJ>2:   vLoadString(false);   vLoadString(false); 

Logic in EPanel.vLoadString() implementing this diagram is as follows:

               case TAB: 
               case COMMA:
                  if (bForeign)
                  {
                     if (jCaret == 0)
                        i = iNextFormula(i, period);
                     else
                        i = iNextTab(i); 
                     if ((jCaret>1) && (i>0))
                       charTable[jCaret][i-1] = COLON;
                  }
                  break; 



//----------PasteOver() is not used------------------------//
//--------All paste() is pasteInto()-----------------------//


17 Dec 2006 A28

The rightmost field header will not be recognized unless it
is underlined at least as far as its characters extend.
(No need for a terminating colon in the ruler) It is as if
the header parsing extends only as far as the ruler chars go.
So be sure you have enough hyphens!  Hyphens become critical
in the rightmost field.  

Still cannot paste an entire worksheet into an initially empty
table.  It is as if marking and Ctrl-X deleting the .MED contents
leaves some formatting information in place, and subsequent paste
gets confused by that.  Paste the body of a table works OK, it
properly picks up the ruler formatting.

I want it all: 

  * ability to load entire native table        << GOT IT, works
     ^^uses native ruler for fieldWidth.

  * ability to load entire CSV,TAB table       << GOT IT, works
     ^^fieldWidth from UO_EDIT_FWIDTH.

  * ability to paste native records in;       << Works if from same table
     ^^

  * ability to paste foreign records in;      << GOT IT, works
     ^^

  * ability to paste entire native table       << NOW WORKS!
     ^^

  * ability to paste entire CSV,TAB table      << NOW WORKS!


16 Dec A28
For the Manual, with fix below, set up spreadsheet for complete
table using cell contents as follows:
  A1:  number of records
  B1:  other title bar information
  A2, B2, C2....  install your field headers
  A3, B3, C3..  leave empty or fill each cell with '--------
  A4, etc: your computed data

Save as file of type Tab Delimited (*.txt)
or Comma Delimited (*.csv)

Later, can change filename extension to .OPT  .RAY  or .MED,
then load into BEAM using File:Open;
or can read native extension (*.txt, *.csv) into BEAM choosing 
   File:Open:Files of type=All Files.

The file will be read in, using Excel's delimiters (tab or comma)
and putting the data into BEAM table fields whose width you specify in 
   BEAM:Options:Editors:Default fieldwidth, chars [ ]. 

..OR....target an existing table to receive the data via clipboard....

In your spreadsheet, mark any rectangular group of data records with 
the mouse,  Ctrl-C to copy to clipboard,
then in BEAM place click your mouse to place the blinking caret 
in a data record below the ruler, and paste using Ctrl-V.

This way you can predefine the individual field widths appropriately.
(The clipboard will carry tab delimited text into BEAM
and tab delimited text will be automatically formatted to
fit your predefined table's ruler layout.)
  


16 Dec yikes, cannot parse a tab delimited file generated by Excel.  

  * Fails to parse if loaded via File::Open. Should be easy, but
    the lack of an existing ruler during input gives no clue as to how
    the various comma-delimited or tab-delimited or semicolon delimited
    fields ought to be spaced apart.
    Instead of separating, get one giant field containing entire record.

  * Parses correctly if pasted via clipboard into the middle of
    an existing table whose ruler is predetermined hence known. 
    Be sure fields are wide enough to handle the number of digits
    that the spreadsheet displays, lest long fields overflow.
    EPanel::doTab() forces the needed number of spaces.  
    Fails to insert a colon. Computes OK. 

  * Fails to parse if complete table is pasted via clipboard.
    Evidently the absence of ruler data gives no tab locations, 
    and therefore following fields overwrite the field separators.

Fact is, with a tab delimited file, there is no up-front way to tell
how many digits we will need in each data field.  Would have to parse
the entire file, counting digits/field, and then establish the field
sizes, then reparse into the distinct fields. Maybe that's the right
answer. For now let's use field width = 11 chars + colon. 

If an EXCEL field has more digits than are provided by the BEAM
table, the field is not truncated upon being read into BEAM --- 
it pushes into the next field, and all subsequent
fields appear one entire field rightward. Long field truncation
would be a superior outcome: one field modified, overall structure
would not be damaged.  DONE; max 11 chars of data per field.

What is needed for complete foreign-delimiter input files is this:
  0. User option default field width = 10 chars. 
  1. Every field will have 10 characters + 1 delimiter or colon.
  2. There will be a maximum of 20 fields = 220 chars per line imported. 
  3. Various numbers of fields per line is OK.
  4. Incoming String will be decomposed into Lines, EOL = \n.
  5. The title string will be guided into place, as one single field.
  6. The first 10 chars of each header will be guided into place,
     and will be delimited by a colon.  (ok?)
  7. The first 10 chars of each ruler will be guided into place,
     and will be delimited by a colon.  (ok?)
  8. Each data record will be parsed into fields, up to tab/equivalent
     or first 10 chars, whichever comes first, and poured into table. 
     Again, a colon will get built into the table.  
  9. Might be best to pre-create the table format "New Table" and then
     backfill it with data from the text input file. 
 10. How to distinguish a foreign file from a domestic?
     Tabs => foreign
     Comma delimited => foreign
     Semicolon delimited => foreign
     Colon delimited => domestic.
     So let's pre-search the file...
       * first tab, comma, semicolon => Foreign flag
       * first colon => domestic flag
     Expect headers to have no delimiters in them;
     Expect ruler line to contain delimiters.
     

There is a very very major distinction to be drawn between loading
a complete file and loading a portion of a file that is to fit into
a given field-width structure.  

Complete file: needs to preestablish its own field structure.
Partial load: needs to obey the existing rules of the road. 

FIXED using distinct EPanel routines loadString() and loadForeign().
Choice is made be searching line #2 for first delimiter: 
  COLON means it is a native format table; runs loadString().
  COMMA, TAB, SEMICOLON indicates imported; runs loadForeign().

Works using Excel:File:SaveAs:Type=CSV(comma delimited):OK:Yes
  then changing its name from XXX.cxv to XXX.med
  then reading it in via BEAM:File:OpenMedia:Files of type .MED
or
  not changing its name XXX.csv
  then reading it via BEAM:File:OpenMedia:AllFiles:XXX.csv
or
  Writing Excel:File:SaveAs:Type=.txt(Tab delimited):OK:Yes
  then reading it via BEAM:File:OpenMedia:AllFiles:XXX.txt



Works by marking in Excel, Ctrl-C, then BEAM Ctrl-V paste into place.



-------------------------

15 Dec A28  Yikes, tab-delimited clipboard output fails;
copies out colons instead. 
^^TRIED; added simple tabber to EPanel.java's getMarkedText()
method, tested on one .OPT and one .MED file.  Shows one
serious problem however: noncolon tag chars fail to delimit
the fields, hence fail.  Would be better to calculate
a horizontal index "h" and compare it with the current
ruler line for colons, since the ruler line colons are
never corrupted.  
^^TRIED new tabber that uses charTable[2][] ruler to guide 
tab placement in all output chars except zeroth line. 
WORKS; now EXCEL can read records cut from BEAM and pasted into a
worksheet.  

OUTPUT ISSUE IS REGARDED AS SOLVED.
OWNERS MANUAL should describe two output routes:
 * via mouse & clipboard with BEAM:Options:Editors:TABS
     but headers won't parse this way unless you colonize them.
 * via file; Excel File:Open:AllTypes:Delimited:Colons
     but headers won't parse this way unless you colonize them.

15 Dec A28:   How to make paste worksheet records into an
existing .OPT file? and keep field widths compatible?

15 Dec A28    USING EXCEL TO WRITE TAB DELIMITED FILES
Excel cannot write colon delimited files but can write
tab delimited files, which BEAM is supposed to read.
Although it seems it cannot read from clipboard.  

In EXCEL:
File
SaveAs
  SaveAs Type: Text (Tab delimited) (*.txt)
Warning box "Multi-sheet workbooks"
  click OK
Warning box "Lose incompatible worksheet features?"
  click Yes.
File will write.

Later, outside EXCEL:
Rename the file so that its extension is not .txt
but rather is .opt or .ray or .med


USING EXCEL TO READ COLON DELIMITED FILES (Useful!) 

In Excel:
File
Open
  Navigate to your ray tracing directory
  Files of Type: All Files (*.*)
  File name:  GLASS.MED or whatever
Text Import Wizard - Step 1
  Choose delimited file type:  (.) Delimited
Text Import Wizard - Step 2
  Specify colon as delimiter:  [v] Other [:]
Text Import Wizard - Step 3
  Specify column data format:  (.) General
Finish.

This works OK on all the data records
but fails to get the header fields unless you colonize them. 












13 Dec A28
Slave/antislave sensing and driving is now installed.
The slave sensing is now built into the Master adjustment loop
within OEJIF.  The slave driving is built into Auto::dNudge().
The raw table sensors that were earlier used within the routine
Auto::setupAdjustables() have been eliminated by OEJIF::parse().
Seems to work!
Needs a bunch more testing!


12 Dec A28: I really need slaves in autoadjust. 

Adjustables presently is an ArrayList of objects, each is
   DCARF = {doubleVal,charTag,attrib,rec,field}.
Could expand this to include a slave list (maybe empty):
   DCARFS = {doubleVal,charTag,attrib,rec,field,slaves}.
Slaves is itself an ArrayList, possibly null, listing
   Slave = {rec, bPositive};
the two qualities of each slave -- recordNum and Sign.
With this information, whenever a nudge is given to an
adjustable, the nudger could check for slaves and give
them nudges too. 

Ganged (floating averaged) goals are implemented in InOut
by the private method vGangGoals(), which is called after
each ray trace, before evaluating the SoS. Works. 

There is a bit of a developmental curiosity here:
there are five methods in common between InOut and Auto,

	vSetupArrays()----DUO
	iSetupGoals()-----DUO
	iTrace()     -----TRIO
        vGangGoals() -----TRIO
	dGetResid()  -----TRIO

but this code appears as two private separate codes.
There may be some future way to have this code become
common, perhaps in a SoS class. 


11 Dec A28:
Warning: terminology B4W   ....becomes........B4J:
  optic type    "grating" + grooves     "lens" + grooves
  optic type    "Grating" + grooves    "mirror" + grooves



10 Dec 2006  A28
Installed three ray generators:
  one dimensional.
  two dimensional rectangular.
  two dimensional circular.
They seem to work OK. 

It would be nice to have a user-editable Help screen,
initially carrying a few reminders about the use of
the function keys and mouse stuff; saved as B4HELP.TXT.


3 Dec 2006  A28
Added a feature: user selectable radius for isotropic
random rays.  Units are degrees.  


30 Nov 2006 A28
Change introduced into RT13 internals, esp. bRunray():
  * distinction between "bak" and "mis" is abandoned;
  * all prop failures are "mis"
  * iIntercept becomes dIntercept, returns math d directly
      -- failure code becomes any negative number e.g. -dExtend
      -- no temporary storage of prop "d" within rayseq[OPATH]
  * retain separate vPropagate() and vExtend()
  * retain reverse propagation for failed noniris rays. 

Also streamlined & simplified the ray iInitRaySeq() so that
the random ray portion is in the middle, following the setup
and preceding the normalization. 


28 Nov 2006  A27  Revised LayoutPanel.doTechList()
Idea here is to eliminate everything from the LayoutPanel
constructor, put it all into doTechList() so that all setup
work is performed as late as possible, with the freshest
possible user options.  There will have to be a flag bNeedsSize
initially true, but false after the optics size and scalings
have been computed, so that zoom/pan do not get overpowered
by recomputing the optics size. Size should not need a ray
trace but should more simply come from the range of {x,y,z}
and diams[] in the optics table, plus raystarts[].

doTechList() is called for initial artwork and for redraws.
Before fullArt or skeleton, it should perform all needed setups,
including sizing if bNeedSize = true. 

^^Done. Works. 



27 Nov 2006  A27
How does a LayoutPanel graphic get created?

  1. User selects Run::Layout menu item.
  2. DeskMenuFrame's RunMenuListener builds a new GJIF;
  3. GJIF's constructor builds a new Gpanel of type LayoutPanel;
  4. LayoutPanel's constructor calls setLocalsOnce() & setLocalsAgain();
  5. LayoutPanel's setLocalsOnce() performs a complete ray trace;
  6. LayoutPanel's setLocalsAgain() performs another complete ray trace. 
  7. Then OS will ask Gpanel to paintComponent().
  8. Gpanel's paintComponent() calls LayoutPanel's doTechList().
  9. LayoutPanel's doTechList() calls setLocalsAgain() -> third trace!
 10. Then doTechList() calls doArt() -> fourth trace!
 11. If later pan/zoom redraw, doTechList() calls setLocalsAgain(),
     then doArt(); each costs one ray trace. 

This two-stage fetching of data might explain why some of the
user adjustables refuse to get adjusted on each repaint but are
instead held fixed from previous repaints, while other user
adjustable items pop smoothly to their new configurations.

This trouble might be eliminated by performing all the
setup work once, in response to the doTechList(),
including the size & positioning for initial draws but
skipping it for redraws. 

The reason for the two stage business is to permit zoom/pan.
The initial doTechList() should include fixing size & initScales.
Subsequently, zoom or pan or twirl should allow modifying the
display affines, but no need to redetermine the size & initScales.

Fact is... setLocals() merely sets the local parameters.
Fact is... setLocals() does not draw any rays.
doArt() does the artwork and relies upon knowing proper affines. 

setLocalsOnce()  188 lines---
  getUserPreferences();
  getViewPreferences();
  getShadeCodePrefs(); 
  getSurfRadii();
  getSinCos(); 
  loop over all rays----
    getActualRadii();
  imposeUserRadii(); 
  getSurfsPositions();
  includeRayStarts(); 
  getViewExtents();
  setSpans();
  getSpiderLegs(); ??

setLocalsAgain()  102 lines;
  getUserPreferences();
  DELETED getViewPreferences();
  getShadeCodePrefs(); 
  getSurfRadii();
  getSinCos(); 
  loop over all rays----
    getActualRdii();
  imposeUserRadii(); 
  DELETED getSurfsPositions();
  DELETED includeRayStarts(); 
  DELETED getViewExtents();
  DELETED setSpans();
  getSpiderLegs(); ??

Proposed redesign for Layout and other graphics:

1.  Never do any ray tracing within constructor.
Do nothing within the constructor. 
Defer everything until doTechList().

2.  In doTechList(), use giFlags[OALLDIAMSPRESENT].
If doArt() finds this flag=false, run a preliminary trace 
to get ray radii, saving these to local radii[].
If flag=true, copy user diams[] to local radii[]. 
Then: perform a trace for each drawOneRay().

Plot and Histo will never need the UserDiams, and therefore
will need only the doArt() ray trace.




26 Nov 2006  A27
Discovered that the faulty random ray trace null ray directions
are caused by
  (a) setEuler() is private in RT13, called only for kray==1;
  (b) OEJIF.parse() is called when starting random
  (c) OEJIF.parse() sets all Oparms=-0.0 to initialize them
  (d) therefore the initial Euler matrix = -0.0, -0.0, ....
  (e) But for kray==0, there is no call to setEulers()!

Who calls OEJIF.parse()?  Not random's constructor. 
Ha. Found it: 
DeskMenuFrame (line 957): vMasterParse() calls oejif.parse().
And, vMasterParse() gets called at line 856, when any RUN item
is clicked, to get the correct graying, which of course needs
a current vMasterParse result.  This includes RUN::Random. 
To fix this I really need a dirty bit, to flag if a new parse
is actually warranted, vs. can we just use the old status. 

However I have decided management-wise to not pursue the dirty
bit work skippers yet.  Therefore, for the present, I retain the 
parse at StartRandom, and therefore must retain OEJIF.parse() 
access to setEulers() somehow. 

Shouldn't RT13.setEulers() actually be part of OEJIF?
It is most closely associated with proper setup of the 
optics table.  It is used only by OEJIF and Auto.dNudge().
^^ Done.  Works.  


Discovered another annoyance.  Random layout rays fail to show
their table colors.  Probably wavelength is wrong as well. 
Likely a disconnect from the chosen guide ray identity.  
^^FIXED: introduced RT13.getGuideRay() allowing any curious graphic
to discover which ray was the most recent guide ray: wavel, color. 
Installed into LayoutPanel, Plot2Panel, Plot3Panel.  Works. 
I removed RDONOR, a previous way to get the guide ray index
out of storage within raystarts[0]. 


Discovered another annoyance.  Whenever I run Layout, or Plot, 
or Histo, I get *two* table ray traces before the graphic plots.  
Should have only one.  Not as simple an explanation as having to
repaint before, then after, the dropdown menu vanishes. 
No double tracing with random rays: there I get just one
trace per random ray, as I should.  


Discovered another annoyance, very visible when full
DEBUG=4 is specified: OEJIF field lister usually runs 
many times, listing the attribute codes of the successive
column header fields; often 5 or 8 times, occasionally just 
once, at start of an InOut ray trace.  

For a 3-surf layout, I get three OEJIF field listings. 
For a plot or histo, I get three OEJIF field listings. 
Aha: vMasterParse is followed by zero or three OEJIF field
parser cycles, and vMasterParse is invoked four times in 
starting up a three-table task. vMasterParse() is called
as part of the RUN menu popup, as it should be, for graying.
It is called whenever any table pops into the background,
to obtain fresh syntax information.  So, to have Layout
pop up, if atop a previous layout, count = 1 vMasterParse
for the graying.  But if table is frontmost, then there is
an additional invocation for losing the table. 
The triple OEJIF arises from a single call to OEJIF.parse().
The triple OEJIF is an error: its display is within a surface
loop, not within the header loop.  FIXED. There are still
many invocations of vMasterParse() but only one header display
per invocation now.   

I would really do better with a dirty bit. 




Discovered another annoyance with Plot3Panel: usually
there are far too many crowded tick labels.  Want fewer. 
Looks less horrible if the graphic font size = 10 point
not 14 point.  Make 10 point the default? 


Discovered another poor design choice.  Why does the
kray==1 situation in RT13.bRunray() trigger the updating
of the refraction vector for LayoutPanel?  Seems to me that
this is either a parse issue, or a LayoutPanel issue. 
Nothing to do with ray tracing, except for the fact that
its two key arrays both reside within the class RT13.
^^Fixed: moved it into LayoutPanel. 



25 Nov 2006 A27
Redesigning the RT13 method iInitRaySeq() so as to simplify the
user interface.  I propose that the User option for the
TableRays has one choice: (.)positiveMakeup (.)negativeMakeup.
And behind this choice, there are three rules:
  (a) if U0 V0 W0 all specified: normalize via length only.
  (b) if one or more unspecified: alphabetically last gets makeup,
    with makeup = positive or negative according to UserOption.
  (c) all other unspecified: default = zero. 
Escape clause: if makeup would be imaginary, then the offending
cosines are reduced to have the makeup zero. 

For RandomRays there is also just one four-way choice:
(.) volume; (.) iso U; (.) iso V; (.) iso W.
The "volume" takes the spans from the table rays to get
a random ray, and normalizes according to rules (a)(b)(c).
"Iso U" is different!
  If U0 is present, it generates a random U0, then randomizes V0, W0.
  If U0 is absent, it gets random U0 [0,1] or [0,-1], then V0, W0.
"Iso V"
  If V0 is present, it generates a random V0, then U0,W0.
  If V0 is absent, it gets random V0 [0,1] or [0,-1], then U0 W0.
"Iso W"
  If W0 is presnet, it generates a random W0, then U0, V0.
  If W0 is absent, it gets random W0 [0,1] or [0,-1], then U0 V0. 

22 Nov 2006 A27
Table rays are OK but random rays are broken.   In Layout,
rays start but all head to the *vertex of the first surface*
wherever that may lie.  Maybe a symptom of two failures: 
 (1) initial ray direction is screwy, maybe zero vector? Then...
 (2) Rayfail segment doesn't get transformed to lab coords.
     Instead, the vertex of the target surface gets transformed to lab.
This double failure would leave zeros in the lab coords of the
successive ray lab vertex locations.  But how could it work OK
for the table rays?  The trace sequence in runray() does not
depend on the ray number.  I think. 

Of these two, (2) is easier to check: it must lie within the
runray() loop, whose exit upon ray fail must have forgotten
to properly register the rayFail segment in the target surface coords,
leaving an initial zero position in the target vertexframe,
yet remembered that the transformation vertex -> lab is still needed, 
even for failed rays, to properly show the RayFail segment. 

With gross warnings turned on with DEBUG=1, there are no warnings
with table rays, but a blizzard of "RT13.bRunray() unnormalized output..."
that show output failure, probably also input failure. 

CAUTION UNDERSTANDING HOWFAR:
  * howfar says how far the loop went: "Diam 13" or "OK 14"
  * howfar does not say how far the ray went.
  * howFarRayWent = RROK ? howfar : howfar-1.

20 Nov 2006 A27
Added bordered boxes for related Options, both 
radio button groups and check box groups.  
Deleted yellow box group design. 
However the elements are not properly centered vertically.
Slightly too much empty space at the top.  Don't know why.


16 November 2006  A27
Yikes, the simple ANGLES.OPT demonstrator, with no rays,
fails to show its declared Diameter optics! even though
the pop-up analyst says Layout would be OK. Same trouble
with the file CASS.OPT.  However!  If I add one
ray then bingo, all four optical surfaces appear as they
should.   Something is clobbering the declared Diameters.
Must be in the Optics parser. 


29 Oct 2006  A27

Layout's setLocals() is now separated into setLocalsOnce()
and setLocalsAgain() to gain command of setup for size & view,
and then to setup arrays, diams, nrays, nsurfs, .... 
^^ TESTED AND WORKS OK. 

Privatized RT13.setEulers() so that it is invoked only within
runray() for the case k==1; means that OEJIF & AUTO need not
remember to handle this setup work.  Needs testing on auto
angles to make sure that auto gets the service it needs. 
^^ TESTED AND WORKS OK. 

Options:Editors shows the choice TableMode/TextMode
but only TableMode actually works.  For now let's eliminate
this visible choice, leaving the machinery in the background
for future implementation.  
^^ VISIBILITY ELIMINATED; LOOKS OK. 


15 Oct 2006  A27
The caret blink monitor built into the setTitle() method for the
DeskMenuFrame fails to reveal why the blinker sometimes vanishes.
When the blinker is displaying properly, it shows tfe,tte,tfe,tte,tfe...
When the blinker has vanished, it shows the same  tfe,tte,tfe,tte,tfe...
^^ NOT ENCOUNTERED RECENTLY.  KEEP WATCHING!


15 Oct 2006 A27
Options::InOut should allow choice of e-notation and Ndigits?
Fixed number of digits is often too coarse or too fine. 
Issue is delivering the appropriate dynamic range to the user. 
So maybe we want e-notation all the time? 
^^ DONE E-NOTATION LOOKS GOOD. 

9 Oct 2006 A27
An aggravation that *some* parms are replotted by Layout and some are not.  
Diameters change; layout fails to update them.
Nsurfs changes; layout fails. 
Need a comprehensive replot not partial.  
^^ DONE 29 Oct 2006: see above. TESTED. WORKS. 
Here, setLocalsOnce() by constructor initializes size, pan, and view.
And,  setLocalsAgain() handles all the dynamic stuff but won't reset zoom pan twirl.



3 Oct 2006
It would be good that zoom in, zoom out have a special effect on the
1D Histogram function:  zoom in should rebin more finely and magnify
horizontally.  Drag left, right should modify max,min plot limits so
as to allow viewing a translated plot. 

But, of course, this is a totally different action from the usual
graphic action, where zoom in/out is a complete magnification of the
artwork, not just some subset of the artwork. 

3 Oct 2006
I need better management of the top level title bar message.
When a task is minimized, only this message is visible on the
taskbar.  So a message "OK" is not helpful!  Message should be
prefixed with the application name. 
^^ FIXED. WORKS. 

Also some of the messages are incorrect.  Closing all files
gives a reminder about RAY being absent, should be "no files loaded"
or some such.  
^^ FIXED.  WORKS. 


3 October 2006 A27  Help screens

How about a "reminders" help panel?  Comes with a dozen or so,
but others can be typed in, as needed.  This panel would manage
a user text file HELP.TXT
It could be implemented using a JTextArea object. 

This file could be factory initialized around a complete
list of error messages, alphabetically organized.

User Reminder:
  If a surface is failing to refract, verify that its 
  declared "Mirror/Lens" column type is "L" for lens, not iris.  
  Yes even if it is flat, e.g. a window or a prism, if it it to
  refract, it has to be called a Lens. 

  If you get the message "Ray wavelengths not found" take a close
  look at the exact spelling of your ray wavelengths and compare them
  to the spellings of the wavelengths listed in your glass table.
  Although leading and trailing blanks don't matter, spelling and 
  capitalization and punctuation must match, even numbers! 
  So "0.4" is not the same wavelength as "0.40" for refraction lookup.
  (Of course if you are just diffracting off a grating, there is no 
  refraction table lookup and these two are the same numerically.)
  and "d" is not the same wavelength as "D"
  Help::ShowTableError won't help, since it is not obvious which
  table (ray, or media) is the problem.

  Glass names must match also: "BK-7" is not the same glass as "Bk-7".
  Again, Help::ShowTableError can't help since it is not obvious
  which table (opt, or media) is the problem. 





30 Sept 2006

Would be really nice to complete the AutoRay feature:
  1-D linear sequence for fan beams; specify
  2-D rectangular sequence; specify Dx, Dy, Nx, Ny
  2-D circular sequence, 1..19 rings; specify Diam
Should this be associated with EditMenu, grayed out unless
a Ray table is available into which to stick new rays?
And have it preparse the column heads, allowing only the
existing members of X0, Y0, ...W0 to participate in AutoRay?

29 Sept 2006

Would be really useful to build in WFE evaluator, as
part of Path evaluator (not yet installed?), showing value
of PPWFE and RMSWFE for current set of good rays, similar
to the way InOut shows RMS deviation from goals is shown. 
Indeed, WFE can be calculated without goals being present.
Better, with Pgoal present, rays can be grouped by tag letter
so that a group of image points can have their combined WFE
estimated, using group {xbar,ybar,zbar}. 

Also: allow "WFE" as a ray display variable in Plot2D and Plot3D. 

28 Sept 2006

Would be really nice to get the darn slaves working.
I need them to autoadjust a multi lens relay for SNAP BAO.
There is a similarity in slaves and gangs.  How does the
gang system work? and can I use the same branchout feature
sublisting in gathering and managing slaves?  Could I use
the "ragged right" 2D array capability of Java to connect
the one array of masters to the many groups of slaves?

Here is a plan to be implemented in Parser & Deviate:

  Adjustables = new ArrayList(Adjustment);
  Adjustment object = {table, row, field, arraylistSlaves};
  if no slaves, arraylistSlaves = null;
  if has slaves, arraylistSlaves = new ArrayList(Slave);
  where slave = (row, bPlus); 

Same idea could work for gangs, implemented in Parser & SoS

  Start with an ArrayListOfGangs = empty; 
  Search the goals for tag = "a"...."z"
  if a tag letter (gang member) is found, 
    build an arrayListOfMembers(row, col);
    augment the arrayListofGangs(tagLetter, memberList).


class Toric  // see c:\java\torus
// Copyright 2006 STELLAR SOFTWARE 
{
    static final double cx = 1.0; 
    static final double cy = 1.0; 
    static final double sy = 1.0; 

    static double zToric(double x, double y)
    // Returns zToric(x,y) or zero if out of bounds.
    // Right answer for sphere(0.5,0.5)=0.2928932188134525
    {
        double arg1 = 1-sy*cy*cy*y*y; 
        if (arg1 <= 0.0)
          return 0.0; 
        arg1 = Math.sqrt(arg1); 
        double fy = cy*y*y/(1+arg1); 
        double r = 1-cx*fy;  // = minorRadius/majorRadius
        if (r <= 0.0)
          return 0.0; 
        double arg2 = r*r-cx*cx*x*x; 
        if (arg2 <= 0.0)
          return 0.0; 
        arg2 = Math.sqrt(arg2); 
        return fy + cx*x*x/(r + arg2); 
    }

    static void bGradToric(double x, double y, double grad[])
    {
        // double x = xyz[0];
        // double y = xyz[1]; 
        // double sy = surf[OASPHERY] + 1.0; 
        // double cx = surf[OCURVX]; 
        // double cy = surf[OCURVY]; 

        grad[0] = 0.0; 
        grad[1] = 0.0; 

        double arg1 = 1-sy*cy*cy*y*y; 
        if (arg1 <= 0.0)
          return false; 
        arg1 = Math.sqrt(arg1); 
        double fy = cy*y*y/(1+arg1); 
        double r = 1-cx*fy;  // = minorRadius/majorRadius
        if (r <= 0.0)
          return false; 
        double arg2 = r*r-cx*cx*x*x; 
        if (arg2 <= 0.0)
          return false; 
        arg2 = Math.sqrt(arg2); 
        double term1 = 2*cx*x/(r+arg2); 
        double term2 = cx*cx*cx*x*x*x/((r+arg2)*(r+arg2)*arg2);
        grad[0] = term1 + term2;
        double term3 = 2*cy*y/(1+arg1); 
        double term4 = cy*cy*cy*y*y*y/((1+arg1)*(1+arg1)*arg1); 
        double dfdy = term3 + term4; 
        double fac1 = cx*cx*cx*x*x/((r+arg2)*(r+arg2)); 
        double fac2 = 1 + r/arg2;
        double dzdf = 1 + fac1*fac2; 
        grad[1] = dfdy*dzdf; 
        return true; 
    }
}



--------speed with zero coefficients---------------
see  C:\java\speed

If computing a ghastly complicated function, whose coefficient
might be zero, it is best to test for nonzero coeff value first
and then proceed to compute only when value is nonzero:

        sum = 0.0; 
        for (int j=0; j<N; j++)
          sum += (coefs[j] != 0) ? coefs[j]*ghastly(j) : 0.0;

---------------------

17 Sept 2006 Prep for A27 with Summed surfaces.
THIS IS A PARADIGM SHIFT relative to all earlier Beam products.

Idea is to avoid selecting one surface profile vs another.
Idea is instead to sum elements from a vast palette of terms
Allows Zernikes to modify any other surface, even cylinders.
Three diameter terms:
  Diam always fills both Dx and Dy: an absentee landlord.
  Dx then can overwrite Dx if present: a tenant.
  Dy can then overwrite Dy if present: another tenant.
Three Curvature terms:
  C, Curv, ... always controls quadratic surface
  Cx always implies Cyl/toric (cyl if Cy=0/missing; else toric)
  Cy always implies Cyl/toric (cyl if Cx=0/missing; else toric)
Polynomial coefs A1, A2, ...always refer to polynomials of rotation
Zernikes require defined Diameter
> and < apply only to quadratic surfaces

    static final int OASPHER   =  7;
    static final int OSHAPE    =  8;
    static final int OASPHERY  =  9;
    static final int OCURVE    = 10; // quadratic surfaces only
    static final int OCURVX    = 11; // curvature in x; cyl or toric
    static final int OCURVY    = 12; // curvature in y; cyl or toric

There will be changes to  OSOLVER codes.  Used to be...
    static final int OSPLANE   = 0;
    static final int OSQUAD    = 1;
    static final int OSQUADLT  = 2;
    static final int OSQUADGT  = 3;
    static final int OSXCYL    = 4;
    static final int OSYCYL    = 5;
    static final int OSPOLYREV = 6;
    static final int OSPOLYCYL = 7;
    static final int OSTORIC   = 8;
    static final int OSZERN    = 9;

but now will be determined by highest function present.
"General" means: numerical solver, analytic deriv for NormalVec:

    static final int OSPLANE   = 0;  // special formula
    static final int OSQUAD    = 1;  // special formula
    static final int OSQUADLT  = 2;  // special case of 1
    static final int OSQUADGT  = 3;  // special case of 1
    static final int OSXCYL    = 4;  // general
    static final int OSYCYL    = 5;  // general
    static final int OSPOLYREV = 6;  // general
    static final int OSTORIC   = 7;  // general
    static final int OSZERN    = 8;  // general

Use analytic derivative for full precision normal.
No numerical differentiator, except for validation.
But there will be a numerical (Brent) rootfinder.

Derivatives:
given r = sqrt(x^2 + y^2)
given t = arctan(y/x)
given f(r,t) = g(r) * h(t)
then the normal vector is...
  df/dx = (x/r)*dg/dr - (y/r)*dh/dt
  df/dy = (y/r)*dg/dr + (x/r)*dh/dt
  Norm = normalize(-df/dx, -df/dy, 1.0);

Derivatives are evaluated termwise, so that a sphere
and a Zern can be added, and their derivatives will add also.
So the implementation must be that each routine has to deliver
its terms {dfdx, dfdy} as a doublet; only when all terms are
coadded can we proceed to Norm = normalize(-dfdxDum, -dfdySum, 1.0).
This means, remove the old code that performs the normalize
within each surface type solver, because each solver will now have
to potentially work in tandem with other solvers. 





10 Sept 2006  AutoRay Generator
I need a dialog to help create a bunch of 2-D ray starts.  
Radio Button: angle vs position. Graying will be needed. Perhaps:
  (.) X and Y  <<grayed if no X or Y column in .RAY
  ( ) X and Z  <<grayed if no X or Z column in .RAY
  ( ) Y and Z  <<grayed if no Y or Z column in .RAY
  ( ) U and V  <<grayed if no U or V column in .RAY
  ( ) U and W  <<grayed if no U or W column in .RAY
  ( ) V and W  <<grayed if no V or W column in .RAY

FillInBlank: outer radius for ensemble. Or diameter?
FillInBlank: how many rings around the center point.
Or maybe a big list of radio buttons, each showing Nrays?
If 919 rays is enough I could stop at Nrings=17.
^^DONE constructing the constants UO_2DRAY_NN;
^^DONE constructing the UI.  ?? where is it??
^^Need some code to generate the rays.

public class tri
{
    public static void main(String[] args) throws Exception
    {
        int j=1; 
        for (int i=0; i<20; i++)
        {
            int f = 1 + 3*i + 3*i*i; 
            j += 6*i; 
            System.out.println(i + "   " + j + "  " + f); 
        }
    }
}
0   1  1
1   7  7
2   19  19
3   37  37
4   61  61
5   91  91
6   127  127
7   169  169
8   217  217
9   271  271
10   331  331
11   397  397
12   469  469
13   547  547
14   631  631
15   721  721
16   817  817
17   919  919
18   1027  1027
19   1141  1141




10 Sept 2006 Zernike Warning
Zernike radii are dimensionless.  So it is mandatory to have
a declared diameter for any surface to which Zernike terms are to
be added.  Lacking that, no way to compute the Zern terms. 


10 Sept 2006 A26 Zernikes
I think the Zernike surface generator is working OK
when tested on its own, but fear that there is no easy way
to add Zernike terms to an arbitrary surface (toric, cylinder,
etc) because I have not written the surface generator as a sum
of surface contributors (so Zerns could be merely another kind
of term) but instead have them divided into camps, so that the
meanings of Cx and C and Cy change according to the principal type.

Better plan would have *different names* triggering different functions
which get totalized, so that for example you could have some quadratic
surface, to which a circular cylinder or quadratic cylinder or poly
cylinder gets added, to which a poly circular is added, to which a Zern...

Trying to re-use the names means there has to be a single interpretation
of each name.   A2=paraboloid;  or parabolic cylinder; depending. 
Why not A2=paraboloid; C2=parabolic cylinder; Z2=Zernike#2 ??
Or since poly cylinders go unused, do this:

Curve & Asphericity -> quadratic of rotation term
Cx -> circular cylinder term, yaxis cylinder
Cy & Casph -> quadratic cylinder term, xaxis cylinder 
...is the sum of these a toric? NO it is not. 
  ^^ so there must be a Toric Exception.

A1, A2, A3...A14 add polynomials of rotation.
Zern1, Zern2...Zern36 add zernikes provided a Diameter is specified.


6 Sept 2006 A26  Elimination of RT13.whichray
Now, with the presence of every raystart's data in RT13.raystart[0][iatt],
there is no longer any need to be able to discover the identity of the
current ray to access its startup properties.  Can always simply go to
RT13.raystarts[0][XXX} and get the skinny.  This means that there is no
longer any need for RT13.getWhichRay() and need to keep track with random
rays of the setup information.  It's all right there in RT13.raystarts[0][xx].

For use with refraction tables, the kray index has to be available to Snell()
so that it can access the proper row.  I have stashed this kray index in 
the field RT13.raystarts[0][RDONOR] so that its identity can be recovered.

^^ WORKS both PRISM and CZERNY.

5 Sept 2006 A26: Random rays
A potential reorganization of the rayseq[] initializer would
have the following design:

  if (k==0)
  {
     bRandom = true; 
     k = newRandomK();
  }
  for (iatt=RX; iatt<=RPATH; iatt++)
    rayseq[0][iatt] = raystart[k][iatt];
  if (bRandom)
    scrambleXYZUVW(); 

This way all the ray qualities (wavel, order, color)
that are copied into rayseq[] would be copied independent
of the random nature of the k selection. 

^^ WRONG CONCEPT: these qualities are never copied to rayseq[].
Instead they remain residing in raystarts[][], since they
do not vary as we move from surface to surface. 
However! they should get copied to raystarts[0] especially if random.

Change #3: don't leave the ray color information buried within
REJIF.icolors[]  ---  it really is a raystart attribute, and belongs
with the other raystart information in RT13.raystarts[][].
This will require a color identifier integer for the second index into
this array, like RWAVEL, for example RCOLOR (see CONSTANTS.JAVA). 
Also it will require conversion from double to int, using (int),
when accessing the array.  Neither is a big deal.  It will require that
REJIF plant its color parse into RT13.raystarts[][RCOLOR] not into
REJIF.icolors[].
^^ DONE. WORKS.

Change #2: Whatever is the user of RT13.whichray?  Looks like a loose end.
Can this be eliminated by copying each randomly selected kray into
raystarts[0], so that within RT13, it is perfectly okay for the refractors
and diffractors to access raystarts[0] to get order and wavel.  
A: its only use is to fetch the color of each ray.  Each "drawRay()" call
carries kray which is often zero.  Using kray to always point at color
lets Layout just call RT13.raystarts[kray] correctly. 
^^ DONE.  WORKS.

Change #1: Use RT13.raystarts[0][iatt] as a temporary workspace for each
random ray start.  In particular, place order, wavel, and color there
just as soon as a random kray selection has been made.  This will fix
the problem that random rays don't diffract properly owing to iGrating(kray)
looking in raystarts[kray] for its wavel.  
^^ DONE. WORKS.

When copying from raystarts[][] into rayseq[][] to initiate a random
ray do not forget to copy RPATH.  

Q: random rays seem to have wavel=0 when diffracting, yet diffract
okay when they are table rays.  The issue must be Order or Wavel. 

A: RT13:iGrating() uses wavel = raystarts[kray][RWAVEL]; 
since RWAVEL is a predefined constant, the error must be in kray. 
Maybe a classy way to use kray is to *let* it be zero! for random rays,
and have RT13:iInitRaySeq() copy the raystart data from kray to zero.
THEN any routine working the current random ray could always go to k=0
and fetch whatever it needs: raystart[0][whateverAttrib] would be sitting
right there available for convenient reference. It would never have to be
tricked into using a non global kray integer supplied by the return value
of iInitRaySeq[] which after all might not be visible to the manipulator!

Ha.  

So. What value of kray is iGrating() using, when she computes the diffraction?
On table rays, she gets the ray number.
On random rays, she gets the value zero.   In RT13:

        // System.out.println("RT13:iGrating() has received kray = "+kray); 
        // ....this shows that we receive kray=0 on random rays. 
        // ....problem is, wavel = raystarts[kray][RWAVEL] below gets kray=0.
        // ....and, there is no RWAVEL information at kray=0.
        // ....so, there is no diffraction on random rays.






4 Sept 2006   Why, if no files "No files loaded No files"
...as if two chefs are stirring the title bar?  <<FIXED

4 Sept 2006   Bug: empty .RAY wavelengths w/ mandatory .MED
were not detected as a problem; this allowed a trace to proceed
that needed to look up refraction, and allowed empty string to
be compared with an array of various .MED wavenames, sometimes
succeeding!  <<FIXED by testing REJIF.wavenames[irec].length() > 0 
before comparing string contents.  


3 Sept 2006 A26  Random Rays reflect OK but don't diffract.
They refract OK if the index is numerical.
They fail to refract if the index is looked up from MEDIA. 
Playing with PRISM.OPT, table rays=OK but the random rays won't bend. 
Playing with CZERNY.OPT I find that the table rays diffract
properly but all the random rays fail to diffract, as if their
Order=0 rather than 1 from the .OPT table, or as if their
wavelengths fail to be properly generated along with color.
Putting Order=1 into the .RAY table does not help.
Something is missing in the random ray initializer. 

Q: Beyond x,y,z... what is the package of surface-independent data
that accompanies each ray?  How are rays organized?  
They are organized by RT13::iInitRaySeq() which copies or sets up
the zero-surface rayseq[0][i] values. It has a list of data from
raystarts[kray][i] if kray>0; but if kray=0 then raystarts have to
be faked before copying into rayseq[][]. 
The return value of iInitRaySeq() is the kray > 0 to use in
evaluating wavel, color, order.  Perhaps it is not being used?
Or failing to have its wavel drive the needed lookups?

Q: how does the proper refractive index lookup work, for table rays?

A: kray carries right through the redirectors.

Q: doesn't MEJIF parse() verify mglasses[] = record names in Media, and
that mwaves[] = column names in Media, and that intersection = valid datum?  
And then puts data into RT13.media[][] for lookup?

A.  Yes it does.   Works too, as shown by PRISM working nicely.
In PRISM, having loaded GLASS.MED, I can switch the glass names
and see varying amounts of refraction, just as it should.

Fix: within RT13 there were two conflicting integers:
  randomray << used when kray=0
  whichray  << used when kray=0.
I have eliminated randomray, and forced refraction to use whichray.
Seems to work!  However there is uncovered a parser failure: if the
wavelength names are missing from the .RAY table, trace is allowed
to proceed, even though "BK7" appears as a refractive index. 
Need some work in DeskMenuFrame::vMasterParse() to validate the presence
of the needed wave names, and if missing, post a warning and stop the truck.

Now, random refraction (e.g. PRISM) runs OK
However random diffraction (e.g. CZERNY) fails. 








3 Sept 2006 A26  Directory Management

There are four file i/o activities in BEAM FOUR.

1.  B4REG.TXT (registry):   direct; to/from startup directory
2.  QUICK.PNG (bitmaps):    direct; to startup directory
3.  EJIF i/o   (text):      chooser; to/from navigable current directory
4.  WriteCAD  (graphics):   chooser; to navigable current directory

...a possible improvement: let CAD have its own current directory
...since some users might keep their CAD files elsewhere?

Startup & current directories are stored in DeskMenuFrame as strings:

    static private String sInitialDir;
    static public  String sCurrentDir; 

I avoid the need to assemble a complete path+filename with
platform dependent separators, or to deal with the root C:\\ etc.
My method is to use the new File(sParent, sChild) constructor. 
The startup directory is discovered at the start of the
constructor for DeskMenuFrame, and is stashed, and initializes 
sCurrentDir, and is passed to Registry for action.
Prototype demonstrator is in C:\java\FileChooser.
Note: the Property("user.dir") is where the JVM was invoked. 

1.  The BEAM FOUR action is in DeskMenuFrame's constructor: 

        sInitialDir = System.getProperty("user.dir");  
        sCurrentDir = sInitialDir;        
        reg = new Registry(sInitialDir);   

    and Registry() uses the File(parent, child) method:

        fReg = new File(sInitialDir, "B4REG.TXT");

2.  QuickNN.png uses the File(parent, child) method:

        String sName = "quick_" + nQuickSaves + ".png"; 
        File f = new File(sInitialDir, sName);

3.  EJIF sets up its chooser this way...

        JFileChooser fc = new JFileChooser();
        String sDir = DeskMenuFrame.sCurrentDir; 
        if (sDir != null)
        {
           File fDir = new File(sDir); 
           if (fDir != null)
             if (fDir.isDirectory())
               fc.setCurrentDirectory(fDir);
        }
        ...if myFile is chosen...
        DeskMenuFrame.sCurrentDir = myFile.getParent(); 

4.  CAD sets up its chooser this way...

        JFileChooser fc = new JFileChooser(); 
        String sDir = DeskMenuFrame.sCurrentDir; 
        if (sDir != null)
        {
            File fDir = new File(sDir); 
            if (fDir != null)
              if (fDir.isDirectory())
                fc.setCurrentDirectory(fDir); 
        }
        ....if file is chosen...
        DeskMenuFrame.sCurrentDir = file.getParent();


30 August 2006

PreBeta tester Bercovitz complains that the
initial chooser directory is not the user directory.
He is right!  Actually there are two absolute directories
that have to be kept track of, in DeskMenuFrame:


  * startupDirectory: registry stays here.  DMF: reg, quicksave.
  * currentDirectory: follows user around. 

//---DeskMenuFrame startup for registry-----------

        File fst = new File("B4REG.TXT");   // need not exist.
        currentDir = fst.getParent();       // absolute directory. 
        String sst = fst.getAbsolutePath(); // abs dir + filename. 
        reg = new Registry(sst);            // set up Registry.

//------currentDirectory---------------

        fc = new JFileChooser();
        String sUserDir = System.getProperty("user.dir"); 
        if (sUserDir != null)
        {
            File fUserDir = new File(sUserDir); 
            if (fUserDir.isDirectory())
              fc.setCurrentDirectory(fUserDir);
        }

JFileChooser appears in CAD (one place) and EJIF (two places).
There I eliminated the H&C p.474 "." method and replaced it
with the five-line method shown above. BUT the five line method
might fail to follow the user directory around?  Rather have it
always use the previously chosen spot.  

Raw file i/o without a chooser: DeskMenuFrame, Registry.
Registry:  FileWriter(fname), FileReader(fname)
Perhaps here we don't want to move around? But instead
keep one single location for startups?  Or perhaps 
internalize a single directory location for repository?
Startup files are OK to have from user.dir
but probably the OPTIONS are not appropriate there, prefer
to keep them in the Java interpreter default directory? 

        String sUserDir = System.getProperty("user.dir"); 
        if (sUserDir != null)
          File fUserDir = new File(sUserDir, "WHATEVER.TXT"); 


      




-------------------------------

27 August 2006
Negative refractive index works ok
but Layout should shade NRI materials.
At present, no shading for NRI, only PRI. 
^^FIXED Layout now shades for NRI. 


http://www.sinopt.com/
--Lambda Research Corporation--
"OSLO 6.4.2 Update now available for download
This OSLO release updates the 6.4.x series of OSLO.  
All customers with valid OSLO 6.4  licenses are requested 
to upgrade to this latest release.
OSLO is the only commercially available optical design 
software program that runs on both Linux and Windows platforms."
^^Need a killer advert.

26 August 2006 A26

Strange bug in Zernike Layout: with LayoutArgSegs=40,
the wiggles along X, Y axes look perfect
but the circular periphery of the lens has four
giant -Z spikes on it at 45deg, 125, 225, 315 deg.
Worse still with ArcSegs=30: many ratty spikes.
No trouble at all if ArcSegs=20. 
Theory: perhaps the ultra sharp cutoff at r=1.0
is causing the zernike to sometimes fail, owing to
roundoff, thereby forcing the graphic into some ugly
display?  Can I permit some slack in there? For example
r<1.0001 or some such?
^^ FIXED -- yes it needs tolerance. 

--------------------------

Q: why am I free to modify my .OPT table, and the
existing Layout when dragged will repaint to show the
new data, yet why am I not free to modify my Options:Layout
settings and view them the same way?  It is as if the
option settings are captured for eternity in a window
but the .OPT data are not.  

A: LayoutPanel setLocals() is called only in constructor.
New graphic is generated in doTechList() which has no call
to setLocals().  

I am sticking a call to setLocals() into doTechList().
Ah: that breaks the zoom, because setLocals() takes charge
of all the initial view settings.  Of course.

No this is a serious bug: on a redraw, the old diameters remain
but the new rays appear, often violating the visible diameters!
Must at least redetermine the diameters to draw.
How to separate the zoom setup from the artwork parms? 
so that the zoom state is not reinitialized but the artwork is?

---------------------------

26 Aug 2006 Reorganization
The surface classifier is not exactly quad *or* toric *or* poly.
Important to have (quad or toric) *and* polyRev *and* zernike.
Allows the zernikes to add onto any other surface type.
So instead of having a single type classifier per surface,
want to have a bunch of on-off flags that says which tapas to
serve up.  Many combinations will force numerical solver;
a few simple combinations will allow planesolve or quadsolve. 

How to introduce a flag set into surfs[]? Perhaps best way is
to continue to have an optic being an array of surfs, but have
each surf an object of type surface, containing private data
including a flags array and a bunch of double arrays for spatial,
inherent, zernike, euler, etc. Methods to read and write the data.

Until then I suppose I can continue to add flags as doubles.
Assume everything needs at least plano. No flag needed there.
Some surfs will need quadratic; one flag there. 
Or if Cx <> Cy then not quadratic but toric; same flag, bigger value.
What about polytoric vs. polyrev? separate meanings for A1..A14?
Then an additive term in flag when any Zernike is present?

------------double vs single Zernike indexing scheme-------------------------
http://research.opt.indiana.edu/Library/VSIA/VSIA-2000_taskforce/TOPS4_2.html
-----------------------------------------------------------------------------
------------Zernikes, aberrations, human eye, exit pupil---------------------
http://scien.stanford.edu/class/psych221/projects/03/pmaeda/index.html

scien.stanford.edu/class/psych221/projects/03/pmaeda/index_files/ppt_presentation.ppt
-----------------------------------------------------------------------------

26 Aug 2006 Zernike continued
Unit radius normalization: is it appropriate to 
use rzern = r/(0.5*Diam) allowing use with various Diams?
I will set it up this way.   But which to use?
OODIAX, OODIAY, OODIABOTH?  Maybe not OODIABOTH:
it warns "used only within the parser" perhaps it is
the maximum of the other two?  or what?  
Nope.  OODIABOTH is present only when "D" no x, no y has data.
OODIAX gets Dx datum, or if absent, gets D datum.
OODIAY gets Dy datum, or if absent, gets D datum.
So to get max working, will need Math.max(Dx, Dy). 


It would be good to have a way to evaluate zernike coefs
from optical path data, without having to run a general
purpose nonlinear least squares on 36x36x500rays.  Imagine
inverting the 36x36 matrix! 
Since the zernike polys are orthogonal, prefer to simply integrate
each term separately.   Perhaps with a special function window
that plots their values, 0...36. [units] = scaling factor, i.e.
wavelength. Choice Linear, linear absolute, log absolute. 


25 August 2006 Zernike Surface
Wrote and tested a zernike surface, and adopted
the numbering system 0...36 as per Wyant and Zemax.
Seems to work but I don't count six zeros for i=36.
Need to perform diagnostics. AHA normalization is wrong;
not automatic; Layout is showing only part of the Zernike.
See above. 

Included in Constants are numbers OZ00...OZ36 so that
we can have piston if we want it.  However the parser
is set up to ignore OZ00, only parses 1..36, hope this is OK.

How to best use it?  Zernikes are used as a descriptor
of a wavefront, not a descriptor of an active surface,
suggesting that Zernike coefs be assigned to a phantom
surface and used for the determination of optical path.
But this will require that optical path be measured from
a specified surface, where the Zernike is, to a final target
surface orthogonal to the final beam direction, or that
the optic be inverted to a projector and have the zernike
be the final target.  Could path P have a defined start
other than zero?  so as to avoid the inversion?

Serious trouble with the phantom zernike starting surface:
there is no built in automatic way to construct the spherical
catcher surface needed to allow ray path to estimate the wave
path.  [But if we had one, that spherical catcher could have
a zernike modifier as an image of the entrance pupil!] 

Better is to always start with a point source (ray = wave)
and let it reverse propagate to a plane wave, and fit the zernike to
that plane wave.  Demands a reverse trace.  

---------------------------------------------

18 August 2006: Potential Bug
Seems to me that although the new +X, +Y, axis
extents are correct, the -X and -Y are way too negative.  
Looks non symmetrical.  Needs attention??? Look closely
at LENS.OPT for an example.  
  XMIN=-2.47487
  XMAX=0.95
  YMIN=-1.61477
  YMAX=0.95
why not symmetrical about zero?
HA problem was mixing lab frame coords and view frame coords.
^^FIXED...and code is simplified as a bonus. 


18 August 2006 A26
Added these edit functions:
  F7 or Ctrl-Left: narrow field
  F8 or Ctrl-Right: widen field
  F9 or Alt-Right: split field
  F10 or Alt-Equals: copy field down.
Then put descriptions into B4Man.word,
and into Options::Edit help fields. Works. 


12 August 2006 A26
Improved the QuickSave window screen dump.
Instead of triggering directly from menu, which usually
grabs part of the menu + desired window, I have the menu
set a flag bPleaseQuickSave=true; then on each caret blink
I check to see if the flag is set and if the caret has been
turned off: if so, call doQuickDump().  Should eliminate
both the menu getting grabbed and the caret getting grabbed.
Result: menu is avoided but the caret still shows up now and
then.  Maybe threads or something. 

Also: the QuickSave files are now numbered:
  quick_1.png
  quick_2.png
etc starting with each run of BEAM FOUR. This way we can
make a series of graphics not having to worry about renaming
each graphic as soon as it is created. 


11 August 2006 A25 -> A26
Installed a window dump routine for F2, help in illustrating
the Book.  Uses ideas developed in Java\ScreenCapture:screen.java
particularly placing the image writer into DeskMenuFrame and
having each keystroke parser trigger on VK_F2, asking DeskMenuFrame
doDump().  Result: WINDOW.PNG is written to host directory.

Constant vertical offset 46 pixels: sum of the top
main window title bar + main menu bar.  Each bar = 23 pixels. 

There's a nicer way to present this feature to the customer.
To the FILE menu, add an option "Save Window w/ Frame" and
"Save Window client area" and have each pop up a Save dialog.
For Window w/ Frame, use entire rect with offsets (4, 46).
For Window Client, offset (8,69) and shrink rect.size by (8, 27).
...maybe better to offset (9, 70) and shrink by (10, 30). 
Then grab & save in the usual way.  How to choose .png vs .jpg?
Can I set up predefined file types in the Save dialog?
Oooops: getting the client area is non trivial.  No way to
getClientRect().  So I am dropping "Save Window Client"
and I am dropping the entire SaveAs dialog business, and
I am renaming this as "QuickSave" -- always is "window.png" and
always goess to default base directory.  

Note this route does not require any F2 processing anywhere.
It becomes purely a DeskMenuFrame activity. No need to call
doDump() from anywhere, nor fret over the static/dynamic. 
There is no fretting about how to kill the caret. 
---
Installed dotted line Xaxis, Yaxis, Zaxis into Layout. 
---
Renamed EdPanel as EPanel and gave it its own file.
Renamed AnnoPanel as GPanel; it keeps its own file.
Improves parallelism:  GJIF=>GPanel, EJIF=>EPanel.




6 August 2006 A25: jars file won't run using command line
 yet Core Java vol.1 p.526 says should run OK

d.bat:    << creates align.jar
  jar cfm align.jar Manifest.txt *.class *.java

Manifest.txt:  << which class has the entry point "main"
  Main-Class: align
  Author: M.Lampton 

^^ double clicks OK but fails to run for: javaw align.jar
   "Could not find main class. Program will exit"
 or for java align.txt
   "Exception in thread "main" java.lang.NoClassDefFoundError"
-----------

d.bat   << this file creates BEAM4.jar
  del BEAM4.jar
  jar cmf MyMan.mf BEAM4.jar com\stellarsoftware\BEAM4\*.class

MyMan.mf  <<used for BEAM4 double clickable .jar file
  Main-Class: com/stellarsoftware/BEAM4/M7
  Author: STELLAR SOFTWARE 2006

^^double clicks OK, but fails to run for:  javaw BEAM4.jar
   "Could not find main class. Program will exit"
 or for:    java BEAM4.jar
   "Exception in thread "main" java.lang.NoClassDefFoundError"



23 July 2006  A25

One of the remaining bugs is the occasionally vanishing caret.
Darn thing.  I'd like a way to see a summary diagnostic indicator
without complicating the key listener business.
^^ Implemented this: if DEBUG > 0 as is usual during development,
each caret timer tick now places a three letter diagnostic into the
DeskMenuFrame title bar:
  First char = t or f showing bCaretOK enabled 
   (this is controlled by window, menu, dialog).
  Second char = t or f, showing bCaretOn: showing or invisible
  Third char = e or g or n: front JIF = editor or graphic or neither.
Now that I have the diagnostic installed, I can't get it to misbehave.

 
---------------------------------

15 July 2006 A25
Improved logic within RT13 and Layout to illustrate the dotted
extension to a failed ray whose launch direction is known but no
intercept (mathematical, or legal) occurs.  Introduced the boolean
bExtend that is set when a ray needs this dotted extension.
The diagnostic "howfar" includes this extension; howfar-1 should
be drawn solid, and the final segment dotted.  Of course when a
ray stops by actually hitting an iris, this is a true stop and 
does not receive a dotted extension.  It is dead dead dead.
^^ In LayoutPanel I added this feature to drawOneRay().  Works.

---------------------------------

9 July 2006 Spider:
Installation for spider ray tracing works OK in RT13.
Creating Layout artwork for the spider. 
^^BUILT; works even for one leg.
^^REBUILT including curving leg Z sequence that follows
optical prescription for the spider surface.

Bug: in Layout, the ray approaching a blocking iris
is dotted.  Should be drawn solid right up to hitting
the blockage. ^^ SEE FIX ABOVE.

-----------------------------


9 July 2006  Negative refractive index:
Viktor Veselago "The electrodynamics of substances with simultaneously
  negative values of epsilon and mu,"  Uspekhi Fiz. Nauk 92, 517-526 (1967) 
  Suggested the idea;
J.B.Pendry PRL 85 3966 (2000) flat lens is perfect!
D.R.Smith, D.Schurig, J.B.Pendry"Negative refraction of modulated 
  electromagnetic waves," Appl Phys Lett 81, 2713-2715 (2002);
D.Schurig & D.R.Smith "Negative index lens aberrations"
  Phys.Rev.E 70, 065601 (2004)
J.B.Pendry & D.R Smith, Sci.Am. v.295 #1, pp.60-67, July 2006
J.B.Pendry & D.R.Smith, Phys.Today v.57 #6, pp.33-43 June 2004

------------------------------

9 July 2006 A25: mouse drag beyond window force scroll:
Horstmann & Cornell v.1 p.308 write that mouseDragged method
keeps getting triggered even when the mouse moves out of a
graphical object. Works! c:\java\CoreJave\v.1\ch8\mousetest
So, with this working, I will need to add some code... 

  (a) detect running beyond the display box;
  (b) force a scroll:
        1. increment/decrement the scroll index;
        2. move the caret to the new but limited drag location;
        3. request a window repaint.  

^^DONE; but forcing scroll makes vert scroll buttons go crazy.
^^FIXED: forcing scroll now also updates vertical scrollbar. 


6 July 2006
Here's maybe the cause of the intermittent caret.
I am using *three levels* of caret blinker blocker:

  1. DeskMenuFrame adds a windowListener that
  senses Activated & Deactivated states to enable
  and disable the caret.  DMF is of course disabled
  when a dialog pops forward but not if a menu pops up.
  [Q: this is implemented as an adapter: are there only
  these two actions that need listening? maybe more??]

  2. Each menu has a blinkerBlocker listener to disableCaret() 
  at popup and enableCaret() at popdown.   This is to avoid the
  blinking through (atop) a menu.  The menu popping does not
  *directly* affect the Act/Deact state of DeskMenuFrame, so 
  it should not collide with the Act/Deact caret action.
  However there is an *indirect* collision likely: if the
  menu item chosen creates a JOptionPane, that creation
  will take top level thereby deactivating the DMF.  I think..

    1. Menu pops up; blinkerBlocker disables caret.
    2. User makes menu choice requesting a JOptionPane.
    3. Menu disappears, blinkerBlocker enables caret.
    4. JOptionPane appears, requests top layer;
    5. DMF deactivates and listener disables caret.
    6. JOptionPane finishes and disappears.
    7. DMF activates; its listener enables caret. 

  3. Each help menu item has its own private calls to
  disableCaret() and enableCaret() surrounding its call
  displaying its JOptionPane.  As if JOptionPane fails
  to push the DMF into deactivated state, and thereby
  fails to turn off the caret, and so needs some extra
  blinker blocking.

With two or three levels of control, sequencing becomes an 
issue.     The melange of DisableCaret() + EnableCaret() calls
might come through in scattered order and leave the
darn caret disabled if it is DEED not DEDE.  

  Q: is is really necessary to have those help menu helpers?

  A: Nope.  I have now removed them from DeskMenuFrame
  lines 267 269 277 279 287 289.  

^^ Done, Works OK. But keep alert for further caret vacations! 
It might still be the case that the menu listeners collide with
the DMF Act/Deact listener. 

 -----------------------------

6 July 2006 A26
Bug: marking rows by dragging does not force scroll
and I can mark only as far as the bottom of the screen.
^^FIXED see 9 July above. 


5 July 2006 A25
Bug: blank shape is a paraboloid not a sphere.
  NoColumn:      rayX=-0.0007  <<ok
  Asph = -1:     rayX=+0.015   <<ok
  Asph = 0:      rayX=-0.0007  <<ok
  Asph = blank:  rayX=-0.0007  <<ok
  shape = 0:     rayX=+0.015   <<ok
  shape = 1:     rayX=-0.0007  <<ok
  shape = blank: rayX=+0.015   <<ng.
^^FIXED OEJIF line 231, include test for NegZero(d):

        if ((ia == OSHAPE) && !U.isNegZero(d))
          RT13.surfs[irec][OASPHER] = d-1.0; 

Yikes the caret vanished. 
then it came back when I exitted & re-ran.
Perhaps every window opening should reestablish the
reactivation of the caret.  Oh wait it already does.
How to diagnose this rare timer failure? 
^^FIXED maybe see 6 July. 

5 July 2006 A25
Needs to have optical path installed.
RT13 has the fields but not the calcs.
^^DONE, seems to work OK, needs testing. 
TMA72s.OPT has a spherical target; works!
^^ STILL NEED TO TEST WITH REFRACTORS ^^

The new Plot3D is particularly nice with path
as a function of X1,Y1: visible wavefronts!
But of course this isn't wavefront error
because the intercept is a tilted plane, not
a confocal sphere.  Hmm: a new feature?

Also-- how to automate the sagittal/tangential
focus diagram?  I want to work on this for demo
of the anastigmat and RitcheyChretien vs TMA. 

----------------------------------


4 July 2006 A25
Finished writing Plot3D but there are some issues.
In particular I adopted the unit cube idea, in which
the initial (unzoomed, unpanned) uxcenter=0 & uxspan=1
for all three axes.  Zoom and pan modify these affine
consts via AnnoPanel's mouse action.  Twirl (RH mouse) increments
the client's azim and elev through the client's doRotate() method.

Issue: there are three kinds of objects to be drawn-----
  (1) user objects that pan zoom & twirl;
  (2) fixed size items, like chars: move but cannot twirl;
  (3) mixed, like tick marks: size=char but orientation varies.

So how can the artwork properly paint the three types of item?
And what is the appropriate division of responsibility between
AnnoPanel (knows about pixels and has myTechList[])  and 
ClientPanel (ignorant of pixels, builds techList thru AnnoPanel).

At present, AnnoPanel is rigidly two dimensional: it has some
helper functions getax(ux), getay(uy) that apply a predefined
affine transformation (uxcenter, uxspan, etc) to make pixel numbers.
AnnoPanel's only contact with z is to implement an autotranslation
associated with twirl.  Otherwise it ignores z.  


2 July  A25: Fixed AutoAdjust issue with OSHAPE and OASPHER.
Trouble was that although OEJIF parser and Auto adjustment
finder were properly identifying OSHAPE and OASPHER distinctly,
Auto.dNudge() was not writing dParm[OSHAPE] deltas into OASPHER.
Now, the responsibilities are clarified, and everything works:
OEJIF regards OSHAPE and OASPHER as totally unconnected.
oF2I[] and oI2F[] regard these as totally unconnected.
AutoAdjust counts them as separate as well, except for
Auto.dNudge() where they cross pollinate via dParm.

With this fix, we can even have *both* "shape" and "aspher"
in an optics table, and simultaneously display their values.
(Not recommended!) (but it works).  If both are present,
and they don't compute to the same optic, "aspher" wins. 


30 June   AutoAdjust is OK on GRAZE.
  GRAZE uses asphericity. 
  Auto properly minimizes the blur,
  then InOut properly sees the optimized optic,
  and Auto repeated starts with optimized optic
  and exits after just one iteration. 

BUT InvKorsch.OPT uses "shape" not "asphericity" and
  on this file AutoAdjust is not working properly:
  Auto runs, adjusts, minimizes rms, shows adjusted .OPT; 
  then InOut shows the initial RMS not the optimized RMS;
  then if you run Auto again it starts from the original
  start not the converged start.  Saving and reloading
  the adjusted file fails also.

AND when I rewrite InvKorsch.OPT to use asphericity, it
  works properly.  I conclude there is an error in converting
  final posted shape into final implicit asphericity.  

One difference is the floating goals?



27 June 2006 A25: Asphericity vs shape?
Both asphericity and shape are recognized in OEJIF,
so both are needed in the i/o tables oI2F[] and oF2I[].
But only asphericity is recognized in RT13 & Z.
So the OEJIF parse() has to funnel both into RT,
and Auto dNudge() has to put both fields into OEJIF. 

^^FIXED.  Auto.dNudge() now senses deltas to RT13.surfs[OSHAPE]
and copies them into RT13.surfs[OASPHER] as well.  This means
that Auto line 414 need not explicitly mess with this issue. 



25 June 2006 A25: 3-D plot?
Here's an idea: like the current 2-D plot, have a
3-D plot with full twirlability, similar to the rotatable
test cube, but transparent, with each good ray hit being
represented as a colored dot triplet (x,y,z), viewable from
any angle. 
^^STARTED: created separate Plot2D and Plot3D, introduced
user options for three axes.  User option dialogs created.
Artwork not created yet however.

24 June 2006 A24
The only defect I find in the ruler is the horizontal ruler labels:
with lots of digits showing, the tick labels can overlap making
the numbers illegible.  Perhaps each horizontal label should calc
its proposed leftmost Xuser, and if this is not rightward of the
rightmost character in the preceding label, skip the label. 
^^DONE in Layout, Plot, P1D (P2D doesn't have multiple ticks). 
Tests each individual label for fit, skips any label that 
might collide.  Maintains a user coord xPrevRightmost marking the right 
hand end of the previous label, and test xThis against it. Works.

22 June 2006
Three things to do immediately:
1. fix the ruler if it is still broken
2. fix the random ray start setup information
3. fix the shape/asphericity dualism on i/o

Then, when this is done, add some new features...
1. Zernike
2. Random ray table data

Then, when these tests are complete, write a manual. 

Then, when this is done, put up some advertisements..
1. In Photonics
2. In Physics Today
3. In Laser Focus World


12 June
AutoAdjust hinges on the translation OASPHER <-> OSHAPE
and at the moment, OASHPER works OK, but OSHAPE fails.
Need a complete reconfiguration to fix this.  Present picture
is to have just one OVARIABLE ::  OASPHER handling this variable
but to have an OEJIF public boolean bUsingShape to control the
i/o to/from this field and its posting onto the .OPT table.




12 June 2006  A24  Testing AutoAdjust

With GRAZE using shape, Autoadjust cannot tune shape, stalls.
(With GRAZE rewritten using Asphericity, AutoAdjust works fine.)
There must be some disconnect in achieving two way communications
between the internal Asphericity value and the posted Shape value. 
Diagnostic reveals it is Curve and Asphere being adjusted. 
There must be two failures: Shape not being updated on screen,
and Asphere not being recognized as having changed. 
Perhaps Asphere is not being sensed by the tracer?

One way to trace an optic is to use s = shape + aspher
with defaultShape =1; action in either will function. 

Another way is to abandon asphericity except as a modified i/o
activity: a special i/o case, translated to/from shape. 
Or equivalently abandon shape.  Cleaner!

Yes -- with Aspher, I get action in OATTRIB= 10 & 8;
but with Shape, I get action in 10 & 9, as per constants.
I shall need to find a way to keep shape & asphericity
always consistent.  

11 June 2006  A24

Testing, with Default U0=0, V0=0, W0=+makeup,
RandomRays: UniformUVW(.)

Testing CATCHER ---- looks perfect
Testing CASS ------- looks perfect
Testing HYPER ------ looks perfect
Testing GRAZE ------ looks perfect
Testing XYZFIT ----- Require start Curv nonzero! Then, OK.
Testing ROWLAND ---- looks perfect
Testing TMA72 ------ looks perfect
Testing CYLINDER --- trouble, not a cylinder.
^^
When running B4, Curvature=+1 the -1 while Cx=0. This runs correctly. 
Question is, is Curvature being properly parsed as Cy?
and is Cx being properly parsed as Cx?
PROBLEM: CX is special; CY = default curvature.
FIX: redefine consts as OCURVE and OCURVX
with the proviso that OCURVX is used only when it differs
from OCURVE.  Now CYLINDER works as it should. 




8 June 2006 A24:
The choice RayDefaults {0.9, 0.0, +makeup} combined
with Random=Uniform UVW delivers this result:
   Table rays ok, U0 = +0.9; 
   Random rays ng, U0 = 0.


YIKES fwe(negArg) is not the same length as fwe(posArg).


There is a conceptual problem specifying in DefaultRayStart
the combination W0=+MAKEUP and also Isotropic Zaxis.
On table rays, W0=+MAKEUP works fine.  But then on random,
with W0=+9.876E+005, things go numerically awry, and
conceptually what should this mean?  For randoms, the
W0 will be the starting random not the completing formula.
Where to get the starting random? Surely not +9.876E+005.
Add a note, and a test, for this problem:
  "Requires specified W0 values in Ray table."
and for the default, repair +MAKEUP to +1.000 to be sure. 
Possible cheapskate alternative: define +MAKEUP=+1.0000000001.


7 June 2006:
I find it odd, diagnosing the UVW's coming out of initRaySeq(),
in its faulty (0,0,1) mode, that some of the zeros are -0.000
and some are 0.000 seemingly random.  I would have thought
that all would be -0.0000 (like the table output) meaning
missing, or all would be +0.000 (like the defaults) if the
defaults had been installed.  But never random!


6 June 2006: Idea.
Let's remove all the unnecessary calls to initRaySeq()
that are built into InOut, Layout, .....
so that only the native RT13.bRunray() calls are serviced,
and move RT13.initRaySeq() into private status, to see
if the unfriendly behavior noted below is due to the double
calls.  ^^DONE.

No joy. Random colors are now lost, since the return value
from initRaySeq() has been replaced with 1 everywhere; 
but there is not any fix to the faulty values of U0.  
I must say that there is nice circularization of the rays
around the X axis, with U0 = 0.0.  But lacks default U0!

Ray colors REGAINED by establishing RT13.getWhichRay()
and calling it from within Layout and Plot, to provide the
needed ray colors.  

Another problem: the Options:defaultRays = {0.9, 0, +Makeup}
has no effect until such time as I call up that Option
dialog and click OK -- *then* it comes into effect.  Before
then, effective defaultRays = {0,0,1}.
As if nothing enforces RT13.grabDefaults.
^^FIXED THIS BUG by placing a call to grabDefaults()
into the (kray==1) setup activity list.  I will also
place one into the REJIF parse() function. <<DONE.



6 June 2006 A24

Observations about this new raystart thingy.

WITHOUT ANY "U0 V0 W0" COLUMNS IN THE RAY TABLE...
Everything should depend on the Options:DefaultRays
dialog settings.  Indeed with Default {U,V,W} = {0.1, 0, 1.0}
and W0 = +makeup  the table rays have U0=+0.1.    
However the random rays are {0,0,1} -- why not {0.1, 0, 1}?  
^^IT IS AS IF RANDOM U0=0.

With Options:DefaultRays dialog set to U0=+0.9, V0=0, W0=+makeup,
the table rays properly go to U0=+0.9 and W0=+makeup as they should.
BUT-- the random rays go to a circle around the X axis, with 
U0=0.0 not  +0.9  --why is this??
^^AGAIN IT IS AS IF RANDOM U0=0.

5 June 2006 A24  Logic Design for Defaults
Envision a single ray setup method applyRationale()
that accepts raystarts[] and defaults[] and constructs
the needed rayseq[0] for bRunray() to use....

For: tablemode isovolume,
     tablemode isotropic,
     randommode isovolume:
           1. Start with Table values
           2. Apply defaults to absentees
           if random, 3. randomize all coords
           if makeup, 4. adjust makeup
           5. Normalize. (should be unnecessary)

For: randommode isotropic Axis:
           1. Start with Table values
           2. Apply defaults to absentees
           3. randomize X,Y,Z,U,V,W
           4. Knowing Axis, circularize nonAxis
           5. Normalize. (should be unnecessary)
           
For all modes:
           1. Start with Table values
           2. Apply defaults to absentees
           3. If (random)  randomize X,Y,Z,U,V,W
           4. If makeup, adjust makeup.
           5. If (random & isotropic) circularize nonAxis
           6. Normalize. (should be unnecessary)




3 June 2006

For CATCHER.RAY there are no columns for U0  V0  W0
and the table rays are all assigned {0,0,+1} as per the
default ray starts dialog.  These table rays run OK.

For random rays, with DefaultRayStarts set at
    "Random rays: Uniform WVW"
I get randomized X0 and Y0 and all directions = {0,0,1}
just what I expect. 

But for random rays, with DefaultRayStarts set at
            "isotropic Zaxis W0 range" = (.), 
the random rays do not obey {0,0,1} instead they
are all non starters, they are {ru, rv, 0} perpendicular
to the table rays.  If all the table rays are {0,0,1}
then it seems that all the random rays should be the same;
only the range in X0 and Y0 would be expected to get
randomized.  X0 and Y0 randomize just fine, but it is the
U0 V0 W0 that is discrepant.     The reason is due to the
code in RT13.supplyRandomDefaults() case 3: U=V=W=0 then case 3
sets up U and V to be random governed by W=0.  What should
happen is the initializer should have set U=default, 
V=default, W=default, thereby giving W0=1. 

With diagnostics installed, the initial missing data setter
works OK and puts ray[RW] = +1.0 as it should, but then
modification of UVW by smins & spans forces ray[RW] = 0.0
as if setSminsSpans has not been called. 

Issue is bad design: RayParse ought to manage smins & spans,
as well as the default ray starts, so as to allow RT13 methods
to simply run rays either table or random.  As it is now, the
smins+spans get set by RT13.initialize() which is called at the
beginning of bRunray(k==1) but not if k==0.  

Yikes there are two initializers! RT13.initialize() and
then immediately after RT13.initRaySeq(kray}  -- confusing. 




29 May 2006 A24 DEFAULT RAY STARTS
The usual way a client obtains its registry data is to be passed
the reference to the current Registry "reg" in its constructor.
Then, in that constructor, it calls setLocals() which reads the strings

   az = U.parseDouble(reg.getss(UO_LAY_AZIM)); 

and prepares whatever internal local data are needed. 

For something like RT13 that is all static, no constructor, there is
an alternative path:  DeskMenuFrame offers the public method

    public static Registry getRegistry()

from which any client can extract the strings it needs.  This route
could be used by RT13 in processing its first table ray, to be sure
that it is using the current default ray numbers when it sets up
setTableDirection() or setRandomDirection().

Nice thing about communicating the strings is that RT13's default
ray setup could also detect non numerical instructions.  For example
the W0 string could be "-makeup" meaning -sqrt(1 - u*u - v*v),
in distinction to -1.0 which would force renormalization.  To implement
this plan I will need a ternary status value for U0, V0, W0 that
conveys numeric, PMAKEUP, or MMAKEUP parse values. And in utilities 
class U there will be a double dGetDefaultValue(String s) that will
interpret the default value as valid numerical, or PMAKEUP, or MMAKEUP,
or if garbage will return -0.0. 

The use of default rays is tied intimately to the UVW code being
processed within RT13.setTableDirection() so that is where I shall
put the new code.   Seems to work; renamed supplyTableDefaults(). 
Because of the convenient built-in missing double "-0.0" value,
I have eliminated the dependence on UVWcode and simply detect
missing data on the fly, using U.isNegZero(arg) to sense where to
install defaults. 

To handle the inevitable user default messups I run normalizeLab()
on the resulting default-amended raystart vector, before turning it
over to bRunRay. 

Installed the same supplyTableDefaults() for the case of random rays.
THIS NEEDS TESTING -- this substitution has certainly clobbered the
isotropic ray mode, maybe other problems as well.  I am certain there
are no cosines within supplyTableDefaults!





   

28 May 2006 A24

Added solver codes OSQUADGT and OSQUADLT to handle basic quadratic
situations where there are two roots but there is user guidance with
tag char > or <  and to support these modes I added a bit of code
to the parser to detect these situations.  

Testing reveals that it is so far nonfunctional: switching on either
of these hints delivers the proper parse result, but then clobbers the 
trace at the hinted surface.    I suspect the problem is
in the quadNormal() generator, which has no built in test for which 
hemiQuadratic is the current root.   Test: use numNorm() instead
on well-studied problem GRAZE.OPT..... Result: numNorm() works OK
although of course only delivers 8 or 9 decimal digits of accuracy.
So the issue correctly is, the quadNormal redirector fails when 
asked for surface normal based solely on (x,y) -- it must also use
z, to decide bPrincipal = (z*c*s < 1.0).  Trying...
Now it works, and quadNorm() gives me 15 decimal digits on GRAZE. 

Studying AutoAdjust: fails to improve GRAZE.  Auto is such a vital
element of the BEAM family that this should be my next effort.  
First step: set up the Auto debugger to show Auto LM engine status.

USER SETTABLE DEFAULT RAY STARTS
{0,0,0,0,0,1} might be Lampton's preference but I betcha there are other
folk out there who might prefer {0,0,0,1,0,0} or goodness knows what.
Let's have an Options::Other entry for Default Direction. 
28 May: DONE.  X0, Y0, Z0, U0, V0, W0 are now available within
the Options system.  Introducing them into the ray tracer has some
bugs: even with user default = {1,0,0} there usually appears {0,0,1}.
This is built in safety system: RT13.setTableDirection(), which should
be rewritten to accommodate the UO_DEF ray preferences, rather than
being introduced via REJIF.  Aha: this will be easy, provided that
RT13 contains an array double defaultRayStart[RX...RORDER] that is filled
in by REJIF using default Options, overwritten by Ray parser.  Then
within RT13.setTableDirection() the defaults can be adopted on the basis
of XYZ code and UVW code.  

My current issue with this design is divided responsibility.  Which class
is responsible for setting raystarts[][]?  As of now three classes:

  RT13 presently does much more than copying raystarts[] -> rayseq[]
    -- it also applies setTableDirection() or setRandomDirection()
    in an effort to prepare appropriate defaults.  

  REJIF has sole responsibility for RayTable -> raystarts[], and also
    takes care of setting reasonable defaults. 

  Options now has a method doDefRaysDialog() that knows when any defaults
    have changed.  When a default changes, REJIF ought to re-parse its ray
    table and rebuild raystarts[][] for the revised default values.  So
    there will have to be a trigger connection. 

Alternative, no trigger:  REJIF does its best, based solely on rayTable;
but then whenever RT13.bRunray() is called, it checks out current defaults
rather like RT13.setTableDirection() and revises raystarts[] where appropriate.





27 May 2006 A24

Rewrote getPosRoot() to avoid zero roots, and to use a set
of four predefined constants GPRTWO GPRONE GPRMIS GPRBAK
describing the real root situation. 

Rewrote iIntercept and its solvers to return integer status
numbers not propagation distances, and to instead put the
recommended propagation distance "d" into ray[RPATH] to be
employed in subsequent propagation and iris status evaluation.

Needed: how to set HINT in the numerical bracket finder?

Needed: how to communicate "<" and ">" status in nearside
and farside quadratic solution preferences?  Perhaps best way
would be to encode preference as a surfs[OSOLVER] value:
OPLANE, OQUAD, ..... OZERN, OQUADNEAR, OQUADFAR. 


24 May 2006 A24

Layout needs dotted lines to show "extend" ray segments. <<DONE.

Rewrote class Z to include analytical surface z(x,y) and also
normal vector (x,y,z) for a given surface function, all analytic
except for that darn general toric.    Perhaps Z can be used for
the various numeric solvers and supplant or replace the numerical
normal in RT13 (except for the general toric, for which I still don't 
have an analytic normal).   There is a terrific derivative website
http://www.calc101.com/webMathematica/derivatives.jsp#topdoit
where Mr. User can enter an expression and see the derivation for
the first and second derivatives, and the expressions come out 
rather nicely simplified.  Great advert for Mathematica!

in RT13...........
    // There is a potential misconception about "howfar"
    // Should howfar state the surface number where there is a failure?
    //   -- this is the interpretation in NOTES i.e. "mis 05"
    // Or should howfar state the number that went successfully?
    //   --- this is the interpretation for NOTES in "OK 9"
    // Or both: jFail or jEnd?
    // If both: 
    //   failed ray: Layout should draw to howfar-1, then extend;
    //   good ray: should draw to howfar. 
Answer: howfar always specifies how far the loop went.  If OK,
the loop ran to its end = Nsurfs.  If NG, howfar properly labels
the surface where trouble was discovered.  In both cases, howfar
is the proper label to use in Notes. 


23 May 2006 A24

All 25 files look OK.  I have rewritten the RT13 foundation methods
so that only one function is evaluated in each method.  This means
that propagate() and iIris() have been split out, so that the
dIntercept() method delivers a recommended real value when the optical
distance is positive, or a negative value for non intercepts.  


21 May 2006 A23

Installed switch(OSOLVER) statements in RT13 to handle:
  intercept() uses switch(OSOLVER);
  getNormal() uses switch(OSOLVER);
  iterFunc() calls Z.getZsurf() uses switch(OSOLVER),
  getFunc() calls Z.getZsurf() uses switch(OSOLVER).
Here, iterFunc() is used to compute the root for intercept,
and  getFunc() is used to compute the gradient for normal.
At the moment, the numerical solver is called upon for
every OSOLVER situation higher than OSQUAD.........
OSPLANE, OSQUAD, OSXCYL, OSYCYL, OSPOLYREV, OSPOLYCYL, OSTORIC.
But eventually we shall want to move the cylinders into a fully
analytic environment for best accuracy.

Along with this work there will have to be a test plan.
I am aware that iris() is absent from the higher math surfaces
so iris() will have to be added soon. 
To begin I






19 May 2006 A23 Berkeley

Ugly behavior of the new UVW random ray generator.
When I specify only a few values of U0, no spec on V0 or W0,
the random rays are isotropic about the X axis by design.
But! what I expected was a small range of U0 from within my
list, and V0=0, and W0 = +sqrt(1-u*u): a narrow fan beam.

If I add a V0 column, all blanks, then behavior is OK I get my
expected fan beam. 

So which do I want: single axis -> isotropic about that axis?
or the old way, single axis -> fan beam, W0 accommodating?
It is purely a human factors decision.  I am leaning towards
single axis -> isotropic about that axis, but this is a break
from the established B4 product line.  Learning curve!
Perhaps it can be presented as a feature not a bug. 

I have installed the -0.0 value for empty double fields,
first by initializing the RT13 double arrays with -0, then
also in U.suckDouble() returning -0 for empty fields. 
Then, to identify the ternary state for curvatures, 
Cx = {empty, zero, nonzero}; Cy = {empty, zero, nonzero}; 
I work the 3x3 matrix to choose solver = plano, quad, toric. 
Appears to work OK.  Also possible to identify XaxisCyl and YaxisCyl
conditions separately but for now I place all cylinders within the
general toric solver for numerical solution. 

And of course I will need new artwork for Layout. 

This clears the way to install a solver switchyard in RT13.
I think the poly & toric solver might be the same numerical solver.
(However the XCyl and YCyl are not quartic only quadratic so they
deserve their own solvers and normal finders.  Split them out.)
I will need a surface function generator, a bracket rootfinder,
and a numerical gradient estimator for the surface normal. 
All these will require a bunch of testing.  The numerical stuff
will apply to poly and toric and polycylinder but not conic cylinder
or circular cylinder or conic of revolution.  So I had better
distinguish the polycylinder from the conic cylinder! etc.

---------------------------

18 May 2006 A23 Airborne to SFO

Darn caret vanishes intermittently.  No help to open a new file
e.g. GLASS.MED; caret still absent.  Trouble started when I closed
Layout.


18 May 2006 A23 Atlanta. 
OEJIF sets up surfs[j][OSOLVER] field:
OSZERN, OSTORIC, OSPOLY, OSQUAD, OSPLANE are split out in that order.
RT13 needs a switch() to detect these settings and apply the proper
solver.  

Encoder for OSOLVER is not quite right.  Diagnostic for DEBUG=1:
Headers "Cx" and "Cy" the entries Cy=0.0 or 1.0 or blank are TORIC.
  (Would rather have the blank default to quadratic.)
Headers "C"=0.5 and "Cy"=0.0 or blank parse as quadratic.
  (blank->quadratic is ok, rather have 0.0->toric.)
Headers "C"=0.5 and "Cy"=0.05 parses as toric.

These discrepancies show that the parser is very simple minded,
all blanks are interpreted as zero -- no distinction drawn from
forcing zero and allowing default.  

Possible fix is to use two values of zero:
 * negative zero means blank field;
 * positive zero means user zero.
Should compute the same.  But-- will there be bizarre repercussions
on output?  will some output fields after ray tracing then display
continue to show a minus zero?  I don't think so!  
 * setting:  x = -0.0;
 * testing:  U.isNegZero(x)
To implement this plan I will need to install some code:

1. Initialize all the user-driven double arrays to -0.0 not +0.0; 
  ^^Done for OEJIF initializer of RT13.surfs[][]; OK
2. Verify that the parser interprets user's "0.0" and "-0.0" as +0.0; 
  ^^Done for OEJIF tracing U0 to U1.  OK
3. Write sensor code to detect this distinction in setting OSTORIC etc.
  ^^In work.
4. Test the relevant parser actions for OSTORIC etc. 




18 May 2006 A23 airborne, approaching Goose Bay

Here is an issue: why vMasterParse(false)? ... that is why ever
call vMasterParse() without wanting the complete assessment of
status, and display?  Seems to me (right now, groggy) that every
time there is an editor opening/closing/activate/deactivate, there
ought to be complete reanalysis of the data content of the tables
and the implications for the user.

As an experiment I have commented away those calls within 
DeskMenuFrame that had (false) arguments, to see if there is any
particular effect. Ha! seems to work better.  For each table
opening or closing, the status is properly and promptly shown.
So I am thinking there is no reason for the (false) argument.
If further thinking supports this, let's eliminate the argument.



18 May 2006 A23 Moscow

I have been exploring the stale MasterFrame titles.
With DEBUG=1, I have postTitle() calls being logged to System.
And I have assured myself that the autoLoader does indeed call
the vMasterParse() analyzer after its loadings are complete.
However there are some mysteries: with no files to AutoLoad,
the native "Hello 1" appears as the title, yet postTitle()
generates and logs its "Hello 2" -- why a disconnect? Who
ordered that postTitle()? and why does it not show?

Bigger question: when an EJIF closes I am careful to call
vMasterParse(true) hoping for an updated title.  What I get
is a postTitle() message (good!) but with the old stale status.
Why old? as if the closure news has not arrived at vMasterParse()
by the time of its calling?  Missynchronized threads??? Do I need
to insert a delay, or some evaluateLater thingy?


17 May 2006 A23 Moscow

Implemented the RUVWCODE table ray generator and random ray generators,
both installed into RT13, along with a helper U.minmax(x,lower,upper).
Testing has not yet started! but the familiar files appear to work OK.

Something odd: with Wo only, I expected 0 < u <umax=sqrt(1-w*w) positive;
but I get equal negative and positive u.  Symmetric.  Nice but why?
^^Answer is my confusion between table ray fixup and random ray fixup.
 * For table rays, u = +sqrt(1-w*w) which is always positive.
 * For random rays, r = +sqrt(1-w*w), u=r*cos(p), v=r*sin(p).
This is circularized version of the table ray, always symmetric around W0.
Plot shows a disk, linear radius = 0.2 units, symmetric around origin.  OK.

Bug: when I autoload, evidently the .OPT gets parsed, but the .RAY
does not.  Warning: "No rays, but Layout is allowed".  When I try a Run::XX, 
the parser is again called, and discovers the needed rays. Or: if not
all diams are present, Warning: "Ray table is absent".
^^Fixed 18 May: within DeskMenuFrame, called vMasterParse(true) to
display the status of autoloaded files.  Works properly. 

11 May 2006  A23 Berkeley: To Do

1.  So far we have used the "positive w0" direction cosine convention.
Generally we will need the +U0, -U0, +V0, -V0, +W0 and -W0 conventions.
How to choose these? and how to implement the resulting algebra?
Requires careful planning, definition, coding, and testing.
Plan:  use giFlags[RUVWCODE] to select the appropriate UVW calculator...

0 = no UVW: use (0,0,1)
1 = U only: if (U>1) set U=1; if(U<-1) set U=-1.
    table rays: W = sqrt(1-U*U), V=0.
    random: make isotropic Umin<U<Umax.
2 = V only: if (V>1) set V=1; if(V<-1) set V=-1.
    table rays: W = sqrt(1-V*V), U=0.
    random: make isotropic Vmin<V<Vmax.
3 = U and V: if U*U+V*V=s>1, U/=root(s), V/=root(s); W=0.
    random: Umin<U<Umax, Vmin<V<Vmax, then as above.
4 = W only:  if (W>1) set W=1; if(W<-1) set W=-1.
5 = U and W: if U*U+W*W=s>1, U/=root(s), W/=root(s), V=0.
    random: Umin<U<Umax, Wmin<W<Wmax, then as above.
6 = V and W: if V*V+W*W=s>1, V/=root(s), W/=root(s), U=0.
    random: Vmin<V<Vmax, Wmin<W<Wmax, then as above.
7 = U, V, W: s = U*U+V*V+W*W. if s=0, make (0,0,1). 
    else U/=root(s), V/=root(s), W/=root(s).
    random: Umin<U<Umax....Wmin<W<Wmax, then as above. 

2.  So far we have used a simple conic surface definition and a
simple analytic normal.  But more generally we need a more powerful
toric/polynomial/conic surface generator and some more powerful
normal vector generator.  Analytic?  Numerical?  TBD.  Write and test.

3.  So far we have used a simple parallel plane grating generator.
But more generally there are HOEs and need a parser & tester for HOEs.

4.  So far we have used a very simple auto scaling artwork generator
for Layout and Plot and 1D and 2D.  But for greater generality we
need a user specifiable span and center; must write the affine const
setters and perform testing. 

5.  So far the AUTO routine has been written but not tested. 
I shall need a set of B4 test cases from the C++ application, and
convergence results, to discover any shortcomings of the Java
application. 

-------------------------------------------

10 May 2006 A23: the 3-D graphic "twirl" function is implemented
using the right button drag.  Until now, this DragEvent was merely
used to modify the Layout parms: sinel cosel sinaz cosaz, followed
by a redraw.  Better would be to have it pivot about the visible
on-screen center, not the possibly off-screen Origin.  So I put
some translation statements into AnnoPanel line 620 onward
"manageDragRotate" that compute the average *depth* or visual z
coordinate of things in view, for which a linear x and y translation
gives a more localized rotation.  Looks better. 


10 May 2006 A23: Installed a WindowAdapter into DeskMenuFrame
to sense the events WindowActivated and WindowDeactivated, so
that the blinking caret can be enabled and disabled.  Wouldn't
want that darn caret to keep blinking in an inactive window!
^^Works. 

8 May 2006 A23: At present, the parsers properly determine
if allDiamsPresent and if so, properly posts the correct
message.  Still needed in the implementation is the Layout
graying and the actual no-rays artwork generator, and the
communications between them. The optics-only artwork is
called the "skeleton" and the ray tracing and rays come
later with the full artwork.  Perhaps I can jimmy the
mechanism in pan/zoom/twirl so that the ray part gets
blocked if the giFlags[] is set to AllDiamsPresent. 
Ha! I rigged the AllDiams flag to ungray the Layout menuitem,
and arranged that for AllDiams the 


8 May 2006 A23: wrote a FileDigger.java that opens the
sub sub sub directory and sifts through all .java files
and lists every occurance of "System.out" so as to expose
the usage of system messages.   Works, helped me verify
that output messages are allowed only when DEBUG>0. 



7 May 2006: Eliminated the various XXDEBUG constants and
the corresponding System.out.println() messages from the
body of the code.  Serious errors are detected and trigger
an alert U.beep() which is enabled by a master constant
DEBUG>0; otherwise this alert is disabled through
U.beep().  This is part of my effort to move the product
away from the lab into the hands of the users, for whom
the debug facility is worthless.  Possibly, if I create
a properly documented message group organized by class,
each U.beep() could be accompanied by a System.out.println()
message with a bit more detail, nominally OFF.  

One debugging aid that remains is in RT13 which allows
a detailed comparison of the analytic vs numerical getNormal
methods, with output going to System.out.println().  This
fires if DEBUG>2.  




7 May 2006 A23: ShowTableError vs PostSituationMessage:

I intended ShowTableError to be specific to syntax errors.
I intended the titlebar to show all situation messages.
The fundamental parsing DMF::vMasterParse() should take 
place whenever the situation changes, i.e. when any
file is opened, closed, or modified @ lossOfFocus. 
But the ShowTableError should be specific to SyntaxError.

I have got these two functions somewhat confused. 
To clarify: call vMasterParse() at every change of status,
and pre-gray Help::ShowTableError according only to syntax
error messages, not file absence/presence situations. 

^^Ha. Now, graying permission is computed on the three
syntax errors, but the message posting via vMasterParse()
continues as it should. FIXED.

6 May 2006 A23: working the darn caret.
  Having a hard time making it misbehave!
  Diagnostics might help me track this down.
  Trouble was either the engine, or the switchyard. 


6 May 2006 A22:
  (a) finish ShowTableError: pop up the editor, place the caret.
    ^^ done except for enforcing scroll to Zone of Trouble. 
    Spiffy new routine DMF::bringEJIFtoFront() handles focus also. 
    Show table error should be grayed out if no table error. 
  (b) SetDebugLevel: Options::Debug
    ^^ decided NOT to do this, abandoned A22 having started this.
    Issue is userDocs, also dynamic Registry vs static RT13.
  (c) Twirl CG: revise the rotation/translation math based on view
   rather than based on absolute coordinates. 
  (d) fix the flaky caret. Diagnostics on blink engine? blocker?


1 May 2006 A22: although OPT and RAY syntax errors are properly
sensed, and clearing them is sensed, for MED a syntax error once
sensed is permanent: it remains a syntax error after I have
corrected the typo.  Somehow, MED filed don't get re-parsed
after editing. Even closing the MED and opening a different
file, the syntax error remains.  I must have forgotten to
initialize the MEJIF parser variables at each startup. 
^^FIXED: discovered static int msyntaxerr not dynamically
initialized to zero on each parser start.  

1 May 2006 A22: caret is still flaky: sometimes present
black & white, othertimes absent.  Normal = blue/white. Odd.  
If the XOR color were ill determined, say black,
then the blinking would be white-white-white.....= invisible. 
Or if the XOR color were white, then white-black-white-black..
as it was Earlier today.  Perhaps the XOR color has been
improperly initialized, similar to the improper initialization
of the msyntaxerr integer responsible for the lack of proper
syntax error set/clear in MED editor today?
>Since all the editors had buggy caret together, the problem
is in common to all editors, hence in EJIF or DMF where the
caret engine sits.  I failed to look at the GJIF caret! which
would have distinguished these possibilities.  The caret location
worked properly: correct row/col indications, proper keystroke
conversion into table coordinates.  So it is a caret visibility
problem not a caret math problem. 


30 April 2006 A22: rearrangement of parsers
There are three parsers. From the top down:

  DMF: void vMasterParse()
     - the instigator and the final parser.
     - called by file open/close, menuItemGraying, etc
     - handles absentee editors
     - existing editors have their parse() methods called
     - all high level decisions are made here. 
     - writes to giFlags[GERROR] for overall error code
     - All messages & warnings come out of here.

  OEJIF, REJIF, MEJIF: void parse()
     - called only by DMF:vMasterParse()
     - responsible for complete analysis of XEJIF contents
     - first step is low level call host EJIF:vPreParse()
     - second step is mid level fill in all data arrays.
     - returns subset of giFlags[] data to DMF. 

  EJIF: void vPreParse()
     - since EJIF is merely an editor, this is rather basic.
     - low level extraction of four generic table parameters:
       GNPRESENT, GNLINES, GNRECORDS, GNFIELDS
     - transmits results to client XEJIF.

Works, but there are an excessive number of calls to the 
vMasterParse(): usually two or three.  Sequence is this:

start empty
open Lens.opt
   ChooserLoader
   MasterCount=1
   Constructor Exit
   MasterCount=2
   EJIF: internalFrameActivated
   ..this immediately calls Master(false) to blank title.
   ..Master(false) does not increment MasterCount. 
opt editor appears on screen. 
open Lens.ray
   ChooserLoader
   MasterCount=3
   ConstructorExit
   MasterCount=4
   EJIF: internalFrameDeactivated Lens.opt;
   ..this immediately calls Master(true). 
   ..Master(true) does increment count:
   MasterCount=5
   EJIF: internalFrameActivated Lens.ray
   ..this immediately calls Master(false) to blank title.
   ..Master(false) does not increment MasterCount. 
ray editor appears on screen.

Seems to me that we don't need both a chooser loader and
a skeleton loader and an auto loader: a single constructor
exit loader should work for all fresh loads because every
one has to exit its constructor. 

^^EXCESSIVE CALLS ELIMINATED: now there is a single call
to the parser upon exiting an editor frame. 

For editing tasks, seems to me that it's right to blank
the title (and do no parse) coming active: there are about
to be some unknown changes made.  But going deactive the
editor buffer is going into stasis, a good time to fix
its status.  Closing: another major change, needs a fresh
master parse.  <<WORKS. 


29 April 2006 A22 design
Need an improved textfile garbage identifier. 
A good input text file will have certain attributes:
  - At least four lines else "insufficient number of lines"
  - Starts with a number > 0 else "insufficient active records"
  - Starts with a number < 9999 else "too many active records"
  - Fewer than 1E6 characters else "buffer overload"
  - Third line should be a valid ruler line else "invalid ruler line"
      comprises at least one colon
      length < 2 chars
  - Records 1 through Nrec should have lengths > 0???
  - Then... transition to the syntax error identifier.

Need a table syntax error reporting system showing...
  - which table
  - error message
  - caret placement (field, row) at trouble spot.


26 April 2006 testing...
By marking garbage from another application, 
then pasting it into a BEAM table using Ctrl-V,
and putting an integer into first row of .OPT
and putting an integer into first row of .RAY
I managed to convince BEAM that it had completed
a successful parse! so then it tried to run it!
and crashed horribly: probably with messages to
its (nonexistent) DOS screen (except I ran the .jar)
and bizarre screen responses. 

Idea: write a garbage generator, create GARBAGE.OPT
and GARBAGE.RAY and try to trace them.  <<DONE. 

Yes indeed this reveals lots of errors associated with
the assumption that nticks>=1; fixing LayoutPanel.java.
Need some parsing for nfields! and other reasonable
arrays.  

24 April testing...
Failure to post valid filename atop a blank "new" editor
caused successive error messages from EJIF line 301
public void augmentTitle(String s) which assumed
that myFile.getName() could be called without first
checking for the existence of myFile.  FIXED.
But why were there successive repeated error messages?
I would have thought just one. 

Do2D should include its vertical scale tower within
its Zsort.  The tower is always drawn first, OK when
background, but bizarre when tower is in foreground. <<NOT DONE YET

Twirl center is always the math origin.  But what is
usually wanted is effective center near the caret
or near the center of the picture or the center of
gravity.  To do this, doRotate() should also have
some translations in it, so that it modifies both
cosel & sinel, and also xoff and yoff. 

I think that it should be possible to compute a
center of gravity of all nonclipped x,y,z points
and use this c.g. as an offset to twirl. 

24 April 2006
Revised killCaret() and resumeCaret() logic installed.
Checks out OK, and each popdown menu now has a listener
"blinkerblocker" and each JOptionPane is preceded by
killCaret() and followed by resumeCaret().  <<WORKS.

22 April 2006
New package plan works: file hierarchy is
A22base::com::stellarsoftware::BEAM4
The batch files for compile, run, jar are in A22base.
The source code .java files reside in BEAM4.
Each source file declares 

     package com.stellarsoftware.BEAM4;

Installed JFileChooser modifiers
  setCurrentDirectory(new File("."));     // H&C p.474
  setFileFilter(new ExtFilter(mytExt));   // H&C p.475
that properly begin the navigation in the same
folder that BEAM4.jar dwells.

Problem: flaky caret.  Sometimes the
editor screen has no caret.  Other times the editor
screen has a well behaved caret.  No clue as to why.

Problem identified with editor modes.  Editor is always
in its Table mode, never goes to Text (insert) mode,
ignores the selection made with Options::Editors.


PACKAGES.... See Horstmann & Cornell V1 p.133

Choose a base directory from which to compile, 
for example C:\java\A22
Place there any compiler scripts for example
j.bat:javac com\stellarsoftware\BEAM4\*.java
d.bat:jar cmf MyMan.mf BEAM4.jar com\stellarsoftware\BEAM4\*.class

Hmmm.  Compiler runs OK
Batch jar builder runs OK, 157 kBytes. 
but BEAM4.jar won't run: "Could not find the main class."

trying forward slashesin MyMan.mf = 
Main-Class: com/stellarsoftware/BEAM4/M7
Author: Lampton

HA...that's it!     MyMan.mf *must* have forward slashes.
Yet.....            j.bat and d.bat *must* have backslashes. 



21 April 2006 A21
The following choices create a runnable Jar file BEE.jar:

MyMan.mf:------------------
Main-Class: M7
Author: Lampton

d.bat:--------------
jar cvmf MyMan.mf BEE.jar *.class

This jar can be run in either of two ways:

--command line:  java -jar BEE.jar

--icon: double click it. 

There are some rules that evidently must be obeyed...

1. The Main-Class record must not be the end of MyMan.mf ---
Evidently a CR+LF is mandatory after this record.  To assure
this, I have appended a second record of no other significance.
Each record must start with no whitespace, the keyword has
to be followed by one colon, then exactly one space, then the
key value; the ".class" suffix is forbidden for the Main.class.
The root directory has to be suppressed: relative directory
not absolute.  Never show the C:\ or \root. 

2. This batch job "d.bat" must be run from within the same
directory that holds all the *.class files and the MyMan.mf
file.  Otherwise there is a package requirement on directories
and subdirectories, not yet understood by me, whereby the
relative paths are described by the package hierarchy but with
the dots replaced by backslashes.    The final directive
has to be *.class including the mandatory ".class" suffix. Again
the file descriptors are relative, never absolute.  

Some useful guidance is Horstmann & Cornell V1 pp 525-527. 



http://mindprod.com/jgloss/jar.html#ASSOCIATION
http://mindprod.com/jgloss/dependencies.html
http://java.sun.com/docs/books/tutorial/deployment/jar/index.html


...give them a link to http://www.java.com/getjava
This site is great, and it autodetects the OS and gives people 
the correct JRE. 

http://www.excelsior-usa.com/articles/java-to-exe.html
..says that the jar's manifest file has to contain two
statements...

  Main-Class: MyAppMain
  Class-Path: mylib.jar



20 April 2006: Learning Java p.78-79 discusses how to make
a JAR package runnable with a double click of the mouse.

First create a manifest file that contains a list of records 
of the form  KEYWORD: VALUE such as...

Architect: Lampton
Copyright: (c) 2006 Stellar Software all rights reserved
Distribution: Sales Channel
Other: HajiBaba
Main-Class: m7

It is this Main-Class keyword that allows a GUI mouse click
to trigger the Java operation.  Name this file MyMan.mf
or some such.   Then, construct a JAR archive containing
all the classes, gifs, etc with the command

jar cvmf MyMan.mf BEAM.jar C:\java\A21

where cvmf means create verbose metafile filename.

Golly something sure worked.  I now have BEAM.jar, 391kB 
classified as an Executable JAR file.  I made a copy on
my desktop.  Tried double clicking...

Java Virtual Machine Launcher popped up:
"X Failed to load Main-Class manifest attribute from
C:\Documents and Settings\Mike\Desktop\BEAM.jar

Hmmm. rewriting MyMan.mf to include the full class path...
Main-Class: C:\java\A21\m7

"Could not find the main class.  Program will exit."

Better! but still not functional. 
http://java.sun.com/docs/books/tutorial/deployment/jar/
http://java.sun.com/j2se/1.5.0/docs/guide/jar/jar.html

"# attribute defined for stand-alone applications
This attribute is used by stand-alone applications that are bundled 
into executable jar files which can be invoked by the java runtime 
directly by running "java -jar x.jar".

    * Main-Class :
      The value of this attribute defines the relative path of the 
      main application class which the launcher will load at startup 
      time. The value must not have the .class extension appended to 
      the class name."

http://forum.java.sun.com/thread.jspa?threadID=557868&start=0
http://www.artima.com/forums/flat.jsp?forum=1&thread=61427
   Lavasoft?






9 April 2006 A21: vanishing annotation problem.
Earlier I noticed that not just Layout (complicated)
but also Do1D (simple) have vanishing annotation:
each caret click removes the annotation.  Why? How?
Does AnnoPanel::myAnnoList get destroyed? There are
two ways:
  Line 133, if biTech==null or g2Tech==null;
  Line 623, if forceNewArtwork() gets called. 
Ha. Debugging shows that forceNewArtwork() gets called
twice for each mouse cycle: once (false) mousedown, then
again once (true) mouse released. 

forceNew gets called at..
  Line 587, 601:  mouse wheel zoom in/out
  Lines 609, 615: drag translate/rotate; 
  Line 654: "incrementor" for wheel timer???? why.
  Line 763, mouse down but arg=false. <--this is it, but why?
  Line 796, mouse released arg=true. <--this is it, but why?

OK with these forceNewArtwork calls commented out, there
is no caret cleanup, and the graphic screen becomes littered
with dead carets.  Yuck.  How about something better, namely
turn caret off at mouse down? The caretOff request repaints a
tiny rectangle of the graphic.  It is in DeskMenuFrame which
has recently been rewritten to provide a universal caret engine. 
HA, the mousePressed action includes setting the local flag...

   bMouseDragInterruptCaret = true;

as if there were any local caret control remaining.  I bet this
should be rewritten to address the DeskMenuFrame caret engine. 
Aha: bMDIC is indeed local but is used to modify the choice
of XOR vs repaint.  Local logic is incorrect however! At line 201
the flag should control the painting, not the event. 

Fails to eliminate the dead carets.  Perhaps the caret coords
get changed before the cleansing repaint()?
^^HA that was it.  Now, at AnnoPanel::line 749, the mouseDown
action *first* sets bMouseDragInterruptCaret=true;
then *second* calls doCaret(false), and only then changes 
the mouse coords.  So the blanker sees the previous coords
and does its work properly.  
^^Works!

Yikes! these changes have killed the repainting of rays in layout.
Adding forceNewArtwork(true) at mouseReleased Line 794.
Hmmm: LayoutRays return! good! but annotation vanishes. Bad. 

I need a state diagram to understand this puppy. 
At least, now, I have a clean control of the caret, that does
not depend on total clear & repaint of everything.  

------------------AnnoPanel activity--------------

ZoomIn, ZoomOut: 
  start wheelTimer
  perform quick draw: forceNewArtwork(false)
     ...this includes myAnnoList.clear()
  when WheelTimer=Done:
    perform complete draw: forceNewArtwork(true)
     ...this includes myAnnoList.clear()

Twirl  rightButtonDrag:
  perform quick draw:forceNewArtwork(false)
     ...this includes myAnnoList.clear()
  when buttonReleased:
    perform complete draw: forceNewArtwork(true)
     ...this includes myAnnoList.clear()

Pan = leftButtonDrag:
  perform quick draw: forceNewArtwork(false)
     ...this includes myAnnoList.clear()
  when buttonReleased:
    perform complete draw: forceNewArtwork(true)
     ...this includes myAnnoList.clear()

Click:
  do not clear annotation!
  clear caret using old coordinates
  update mouse caret coords
  enable caret
  do not perform forceNewArtwork(any)
     ...which includes myAnnoList.clear()

To accomplish the above I shall use the flag "bDragged" that
specifies how to process buttonReleased events.  If either Drag
happened, then set bDragged=true, and have mouseReleased
act to forceNewArtwork(true) and to reset bDragged=false. 
This way, a simple click won't forceNewArtwork(any).
THIS DESIGN WORKS. 9 April 2006 MLL.


To accomplish this new design I can leave myAnnoList.clear()
within forceNewArtwork() Line 615, but I must be careful
to NOT call forceNewArtwork() for a simple click & release.
This means I must use and respect the bWasDrag flag. 
    For mousePressed do not set this flag;
    for mouseDragged do set the flag; 
    and for mouseReleased, test the flag before acting. 
need to 










2 April 2006 A21: focus & caret
I discovered that although A20's underlying EJIF-caret properly 
ignites when an overlying EJIF is closed, KeyEvents do not get
to the newly promoted editor.  There is an odd/even effect
in automatic promotion focus: 1st, 3rd, 5th... promotions
are deaf to KeyEvents, while 2nd, 4th.. are OK.  Activated
always works fine, but no focus half the time. 

I discovered on http://forum.java.sun.com ThreadID=604540
that there is a work around: attach a listener for the
internalFrameActivated event to invokeLater a runnable()
that requestFocusInWindow().  Works! see test case
Focus::DesktopOddEven.java;  EJIF line 160, GJIF line 63. 

Armed with this, and the simplification of a central caret
engine located within the DeskMenuFrame, I think I can
streamline and coordinate all the focus & caret work here
in A21.  The prototype for this focus/caret engine is
in C:/java/focus/MenuFrameFocus9.java which sports two kinds
of editor classes representing EJIF and GJIF. 

Installed; works nicely; 3 Aug 2006. 


1 April 2006 A20: Caret requirement
There are three ways a panel & caret get promoted:
  1. application software request
  2. desktop manager request, death of overlying frame
  3. Mouse click in the window.
This third one is bizarre: since the frame is not
focussed, how could it ever receive a mouse click?
Seems to me it has to be via the desktop manager. 
Putting a MouseListener on the panel will surely fail.

Is there a way to install a desktop manager listener?
thereby getting the direct skinny on promotion?

Hmmm. My demonstrators MenuFrameFocusN.java have shown
me an Odd/Even effect; see Java/Bugs/OddEven.java
Given 3 JIFs each with a JPanel;
Top panel is focussed receives KeyEvents ok. Close it.
One beneath becomes active, blinks; but no KeyEvents. Close it.
One beneath becomes active, blinks; gets KeyEvents. 

If you start with just two editor panels this is frustrating
because after closing one, the other is really deaf keyEvents
even though its mouse & caret apparently work fine. 

28 March 2006 A20: Caret summary.

GJIF and DeskMenuFrame have no caret interfaces.

AnnoPanel for graphics has the following...
  has temporary Timer.
  addFocusListener(CaretManager)
  CaretManager extends focusAdapter;
    senses focusGained -> startCaret()
    senses focusLost -> stopCaret()

  Internal CaretBlinker task uses iCaret,jCaret
    and applies XOR atop current screen graphic.

EJIF has an InternalFrameAdapter
  activated -> ePanel.startCaret()
  deactivated -> ePanel.stopCaret()

EdPanel has a temporary Timer and a BlinkTask.



  

26 March 2006 A20: Caret issues.

GJIF caret gets lost as well as EJIF.  Put up some graphics,
each with a caret location; then close the top one:
the one underneath has no caret whatsoever, and no 
amount of clicking can start its caret. Have to select
yet another window (caret OK here!) and then go back to
the noncaret window, whereupon it starts as it should.


New EJIF caret looks nice but has a bug:
when I control EdPanels with mouse clicks,
the caret is well behaved.

Also works well with auto-promotion: closing a front EJIF
pops up the underEJIF complete with functioning caret. 

But...software PROMOTION FAILURE.
When InOut promotes REJIF to the front,
however, the previous front EJIF stays lit up
behind REJIF! and its caret shines through!
as if InOut has not really promoted REJIF. 

16 March 2006 A20---------------------------
..based on InternalFrameFocusCaret.java
Work on a new caret for EJIF/EdPanel
Work on a new caret for GJIF/AnnoPanel

In both cases the caret is written atop the
existing artwork, obtained within the JPanel
using its BlinkTask:
           Graphics gTemp = getGraphics(); 
           if (gTemp != null)
           {
              gTemp.setXORMode(Color.RED); 
              gTemp.fillRect(whatever); 
              gTemp.dispose(); 
           }



15 March 2006 A19------------------------------
The caret-absent bug can be seen by doing this.
Run the program, autoloading some files.
 --JIFs are all shown but inactive.
Click the mouse in a panel
  --JIF becomes active and caret appears.
Close that active JIF.
  --that JIF disappears
  --next JIF beneath lights up: auto activation.
  --but has no caret!
Click this newly active JIF's panel
  --still no caret!
Click this newly active JIF's panel
  --still no caret!
Click this newly active JIF's panel
  --still no caret!
Click this newly active JIF's panel
  --still no caret!
Click this newly active JIF's panel
  --still no caret!
To get a caret, must activate yet another JIF
and then come back to this JIF. 

Probable cause: panel does not receive mouse events
when a JIF is nonactive, or even when it is becoming
active, only after the JIF has become active.
And, somehow, the caret was destroyed when the
initial panel was destroyed, and cannot be resuscitated
by an auto activation. 

Possible fix: associate the caret on/off with the
JIF not with the JPanel?  This way the caret will get
first news and unfiltered news about activation/deactivation. 

Demo is java/focus/InternalFrameFocusCaret.java

Annotator bug---------------------
  annotate a graphic.
  click the mouse.
  Graphic briefly vanishes then reappears.
  Yikes! annotation has gone!

I think this might have something to do with
the ForceNewArtwork() business triggering off
a simple mouse click.  Evidence is the brief
vanishing of the graphic.  Graphic should not
vanish for a simple mouse click. 

No that's not it: Layout briefly vanishes
but the other artworks 1D, 2D, Plot...
don't vanish briefly for each mouse click
yet their annotation also disappears. 


12 March 2006 A19-------------------------------

I have InOut and Auto both running, separate classes,
but they have some methods in common.  Perhaps these common
methods should be moved into a class of their own "SumOfSquares"
to avoid duplication.  The common methods are...

	vSetupArrays()
	iSetupGoals()
	iTrace()
	vDoGoals()
	dGetResid()

but quite a few other Auto methods might be moved into this
new SumOfSquares class. 

Point out to the Users: "Why run AUTO twice?" that
in an initial guess at an optic, many of the desired rays 
can fail to reach their intended endpoints, and will be
ignored for the optimization.  A second AUTO run will keep
any added rays that become viable as a result of the first
AUTO run.  

Bugs:

ZoomIn=pull vs ZoomIn=push: this button affects
only NEW layouts, not any existing layouts. I would prefer
to have all layouts respond immediately to some kind of
broadcast change on this button. 

The caret sometimes gets lost, if a frame changes focus
due to an internal software event e.g. Auto refreshing optEditor.
I can always get it back by clicking a different window then
clicking the window I want, so the click-focus works OK,
it is the internal focus event that my caret ignores. 
Ongoing research is to be found in Focus:InternalFrameFocus.java

When there are a lot of rays: twirling shows skeleton, GOOD.
But wheel zoom does not show skeleton, it always tries to
redraw enchilada, BAD, because this is slow.  The wheel should
use the same hierarchy (skeleton then rays) that the drag uses.
Since the wheel lacks the convenient mouse button UP flag
for total redraw, I'll need to use a one-shot extending timer;
wheel events trigger the skeleton and rezero the timer while
timeOut event triggers the complete redraw. 
Ongoing research on one-shot timers: Focus:Reminder.java

When there are no adjustables, the AutoAdjust menu option
should be grayed out.  But it stays bold, and when clicked
it obliges "Auto:SNH: no adjustables" -- I think the ngoals
flag has not yet been interfaced to the Grayer. <<FIXED


2 Jan 2006 A19  Syntax Errors
It would be very nice to have a RUN menuitem ShowError that is grayed
out when there are no table syntax errors but which lights up when a
syntax error is detected (making all the other RUN items gray).  What
this menuitem should do is bring forward the faulty table and position
the blinking caret at the start of the first field where an error is
sensed.  At present there is an error message on System with the table
and row and field information, but it needs to become a GUI feature.

Even better: no RUN menu item but instead, when RUN is selected,
in addition to the current titlebar message "Ray table syntax error",
have two other things happen: Ray table comes to front, and caret goes
to beginning of faulty field.  (Is highlighting the field possible??)

InOut has a bug: does not verify syntax of goals, and thereby gives
bizarre RMS posting when a goal delivers its NaN to the RMS calc.
This bug actually should have been caught earlier, during the RUN
qualification testing of the .RAY table, which does successfully catch
syntax errors in other fields.  REJIF? 
^^^Yes: fixed, syntax check now includes all goal fields. 

1 Jan 2006 A19--------------------------
  Work on AutoAdjust. 

29 Dec 2005 A19-----------------------------

What host methods in Auto are needed to support LM?  There are five:

       double getSos(parms)         // could fail; return BIGVAL
       boolean buildResid(parms)    // returns pass/fail status.
       boolean buildJacobian()      // returns pass/fail status.
       double getJac(i,j)           // cannot fail.
       double getResid(i)           // cannot fail. 

These methods have to interface the capricious arrangement of params,
goals, and ray attributes within the .OPT and .RAY tables, and organize
them into tidy dense one dimensional arrays of parms[] and resid[].

To coordinate reading of inputs from the tables and the writing of
results into the tables there will have to be some helper lookups
introduced.  

PARMS: In the search for adjustable parms, each discovery will have
(a) .OPT surfnum, or 0 if .RAY;  (b) row;  (c) field; (d)attribute,
(e) hasSlaves flag. 
By sweeping through .OPT and .RAY looking for "?" tags, each adjustable
parm will be discovered and added to the LUT list and its starting
value will be parsed and copied into parms[].  ArrayList would work. 
Element should be an object of class ParmDescriptor.

GOALS: Each goal field in the .RAY table brings in its own goal values.
Compute npts = Ngoalfields * nGoodRays.   A lookup table for discovering
and reading/writing goals should have fields for (a) row, (b) goalfield,
(c) ray attribute, (d) rayfinal field (-1 if absent), (e) tag letter,
(f) double initialGoalValue. 
Element should be an object of class GoalDescriptor. 

The organization of the table should have all goals for ray 1, then all
goals for ray 2, etc -- this way when ray one is traced, all the data
can be filled in, then go on to ray 2, etc. Computations will run on a ray
by ray basis and this is the most efficient way to evaluate the resid[].



27 Dec A19:
Two advantages of constructing & storing the Jacobian matrix,
as opposed to numerous piecemeal calls to dfdp(i,j,parms):

 1. There are three places in lmOuter where dfdp() is needed:
one place in the calc for beta, and two places in the calc for alpha.
Wny do three ray traces when just one would serve?

 2. When goals are averaged, deltaParms will affect all of the
elements contributing to the average, and hence all of those will
contribute effects to dResidual.  It is not just the function f(i,p)
that is changing, it is the goals also!  and to permit ganging with
correct derivatives all elements of the average have to be included.
This is easy if all the flow handles all the Jacobian elements in a
unified way....

  newParsms -> (newFuncs - zeroGoals) -> Residuals
  then Resduals = Residuals - average of gangedResiduals

  and similarly for the Jacobian: for each parm "j", 

  Jac = dFunc/dParms for entire matrix;
  then Jac =  Jac - average of gangedJac for that j. 

but essentially impossible to do piecemeal since the differentiator
would have to know about the ganging.


I will convert LM2 to LM3 to include the explicit Jacobian.


25 Dec 2005: Rewriting LMfit to make it a class

Instead of burying LMouter & LMinner as a static methods within
a host calculation, mingling LM support and LM constants with the
host equipment, as I migrate into AutoAdjust I want to have
LM become a class with simple clean interfaces.  My test article
in this work is \java\LMfit\LM2.java and I am migrating all the
LM specific out of the general fitter task LM2 into class LM.
Also, there, I have moved all the ray tracer parts into class RT. 

private class LM
  static void fit(): sets up nadj, npts, parms[npts], resid[npts]
     also transfers a callback method pointer  boolean getFunc() from
     the host, that owns getFunc(), to LM whenever it needs to
     reevaluate resid[].  I use resid[] not fit[] and data[]
     because both fit[] and data[] need updating at each call:
         fit is a function of parms through the optical model;
         data is a function of fit through averaged goals.
     fit() repeatedly uses getFunc() for values and derivatives.
     fit() exits when parms[] have reduced resid[] acceptably.

I will ignore weight[] or sigma[], assuming resid[] to be scaled.

Meanwhile the host's getFunc() does the following:
  1. Unpack parms[] from shared dense 1D list to optics 2D sparse list
  2. Perform any renormalizations, Eulers, etc: prep for optics
  3. Trace each bGood ray and verify that these are *all* still good;
        if not: return false! to force abandonment of the minimization
  4. Perform any needed goal averaging
  5. Calculate resid[] which is dense 1D list shared with LM;
  6. Return true, allowing LM to proceed. 

The key to this arrangement is the two way communication through the
  host method boolean getFunc().   


20 Dec 2005: InOut written, works OK.

18 Dec 2005 A19: Plan for InOut w/ floating goals:

1. Perform all preliminary table validity checking

2. Establish nsurfs, nrays, nfields, ngoals. 

3. REJIF will have counted the goals: Gparse.giFlags[RNGOALS]
   If there are any goals...
      create and fill iatt[igoal], ifield[igoal];
      create double fvals[ngoals][nrays+1];
      create double gvals[ngoals][nrays+1]; 
      fill gvals[][] from ray table;
      create boolean bGood[nrays] and bDone[nrays].

4. Run each ray.  For each:
     Post results to the ray table: numbers or blanks if bad.
     If (ngoals>0)
       set bGood[kray] = ok; 
       if ok, 
         fvals[iatt][kray] = result from RT13.
     
5. if ngoals>0, 
   Search all goal fields for ganged averages by tag char.
     If tagchar
       if bGood[]
         average fvals[]
       if nraysTag > 0
         replace gvals[] with average;
         post gval[] onto ray table goal field. 
   Be sure to check off each ray bDone[] when it is processed. 

6. if ngoals>0, 
     compute rms from set of good rays using the gvals;
     if ngood > 0 
       post the rms in a dialog box
     else
       post an explanation of what went wrong. 


10 Dec 2005 A19:

How about three layout ruler lengths not merely on/0ff:
  ( ) Long
  (.) Short
  ( ) None


1-2 Dec 2005 Batavia A19: Autoadjust

  *  All other methods & fields are private not static.
  *  The constructor triggers the search & identification of the
  *  adjustable parms and the master/slave goals, and sets up
  *  the working ArrayLists.  Note: some of this work is already
  *  needed within InOut, to compute the SoS when goals exist. 
  *  So maybe start with InOut goal processing. 
  *
  *  --------Mathematical activity--------
  *  LMouter loop:
  *    calc ganged goals
  *    calc residuals
  *    calc Jacobian
  *    calc alpha and beta
  *    LMinner loop:
  *      damp
  *      invert
  *      trial step
  *      trial sos
  *      decision
  *    Post results of this iteration
  *    decision
  *  Outer loop complete: post final summary results
  *

  Beyond the mathematics, there is the implementation plan that
  has to map the data structures of the problem onto the math:

  1.  THE ADJUSTABLE PARAMETERS have to be discovered, counted, and 
  indexed as a one dimensional list, entries describing each master parm:
  (a) Opt vs Ray; (b) rowNo;  (c) fieldNo; (d) value, (e) bHasSlaves.
  With this, we get a compact 1-dim array of parms[nadj]
  or at least a way to fake this using pointers to an ArrayList.
  A portion of this nadj->nparms lookup is already implemented
  within LMfit() but it does not yet use ArrayList.

  Complication: add this later...
  Each parameter may have some slaves and some antislaves.  
  Although these are not independent (hence their
  nomenclature!) they must be updated after each iteration, before
  the next func evaluation is computed.   So the eval() routine
  -- even the finite difference dfdf() routine -- has to go and
  change the slaves to perform its magic.  This slave/antislave
  business ought to be built into the eval() so that higher level
  math need not remember this annoyance.  

  2. THE GOOD RAYS have to be counted by running ray loop and
  building a pointer list kray[igood], 0<=igood<ngood. 
  But! there may be more than one goal per ray! and so...
  
  3. THE GOALS have to be discovered, listed, indexed and classified
  according as to (a) fieldNo; (b) attribute, (c) value, (d) tag char. 
  ^^ common with InOut. 

  Can I work this the same way as in InOut, namely
  after each parmstep, average any goals before doing Jacobian,
  so the SOS never has to know about any averaged goals? and
  the Jacobian stays simple, thinking all its goals are independent.
  Complication -- add this ^^ later...

  4. AND THEN... calculate npts = ngoals * ngood, and set up the
  arrays for the residual vector and for the Jacobian matrix. 

  ??. THE MODEL results have to be discovered, listed etc in perfect
  1:1 agreement with the goals.  Some added information is however
  needed for each iteration: (a) fieldNo;  (b) value. 

  ...so I am thinking that PARMS is a one-dim ArrayList
  with five fields per item, and the RESULTS is a one-dim ArrayList
  with 7 fields per item. These lists and the jacobian are fully 
  internal to the Auto class.

  Complication: add this later...
  What do we do about sigma? Follow the lead in B4 which I think is 
  just to set all sigmas = 1.0?

  This implementation plan is intended to be really easy to use 
  in the sense that all i/o data can be found in a unified way, so
  that none of the i/o work has to discover any data sources.
  Instead each parm, goal, model, residual comes into the problem
  fully qualified in terms of heritage.  Posting each iteration
  for example is easy since each value is part of an object whose
  fields describe its home location. 

  Should each master parm have its own dedicated list of slaves?
  Or should there be an addendum, with pointer, to the principal
  list of parms, along with some special index value declaring which
  segment is independent parms and which is the tag-along remainder.




29 Nov 2005 A19 Berkeley: editor fixes

Although the Edit menu driven Cut, Copy, Paste, Delete, SelectAll
have worked well, the corresponding accelerators ctl-X,C,V,D,A
have not yet been written.  I wrote these today: a sensor within
the EdPanel keystroke processor detects the isControlDown() state
of the key event and uses a switch statement to call the proper
editing action myEJIF.doCut()...myEJIF.doSelectAll().   Works. 

27 Nov 2005

Although Layout and Plot show random rays nicely,
P1D, P2D, and MTF do not.  The random rays seem to not
effect the appearance of these plots.  Fooling with the
mouse triggers a repaint that reveals the added rays have
in fact been received.

There is a difference between these two classes.  Layout
and Plot have random rays added on top of the base graphic;
the others require a complete destroy/rebuild cycle, e.g.
by deleting g2Tech.  So maybe the trouble lurks in trying
to apply a randList atop the base drawing, or some such.

FIXED: added the boolean field bClobber to AnnoPanel,
and each extension sets this true (P1D, P2D, MTF) or
false (Layout, Plot) as is appropriate.  Then, within
the redo() method, I have added the artwork killer

   if (bClobber)
     g2Tech=null; 

so that the following repaint() rebuilds the entire
artwork for those cases needing it.   Seems to work.



25-27 Nov 2005 A19 Berkeley: the Zoom fix, done.

I have developed a reasonably clean double-precision clipper that
takes various line segments, classifies their intercept possibiliies,
clips where necessary, and returns "true" if there is something visible.
Seems to work and is quick, << 30 microsec/segment.  C:\Java\Clip.

How to introduce this into AnnoPanel::renderList() with the fewest
headaches?  Here's a plan...

  0. Replace float quads with double quads. <<DONE
     Rewrite AnnoPanel::renderList to stash doubles x,y not ints i,j.<<DONE.

  1. Before rendering, feel the entire TechList for radius: <<DONE.
       double r = Math.max(Math.abs(x), Math.abs(y)); 
     If any vertex lies beyond say 100000 points from the center origin,
     (remember DuctusRenderer crash at 999949!) clip & restack this TechList, 
     else continue artwork with the original TechList.  <<DONE.

  2. To rebuild, copy TechList into TempList and empty TechList. <<DONE.
     Set up a MaxRadius viewing square = 1000 points.
     Step through the TempList, placing only safe items into the TechList. 
     No more polylines: decompose all polylines into line segments. 
     Clip each segment before installing it into the TechList, using
     MOVETO to start it, and STROKE to end it.
     Delete all polylines that end in FILL.  (This will require a
     polyline buffer, I think, or else a lookahead mechanism.)
     Include all singletons whose radius is less than MaxRadius, delete
     the others.  <<DONE using new class Clipper. 

  3. What to do about FILL? Just abandon filling at high magnification,
     may as well keep the visible line segments since we won't know if 
     a series of PATHTO instructions ends with a STROKE or FILL.  <<DONE.

  4. What to do about Z.  Seems to me that for screen graphics there is no need
     to fret about z.  However, DXFs maybe want to zoom? Worry about this later;
     could always do a parametric clip so that when x clips y it clips z also,
     according to length-along-line.  Zoomed DXFs are, right now, the least
     of my developer worries. I'll set superzoomed Z's to zero. <<DONE.

Here's a possible snippet of a read/write loop that restacks a TechList
into a collection of separately clipped disconnected segments, discarding
those that are not visible:

   int skipto = 0; 
   double vec[] = new double[4]; 
   XYZO myXYZO; 
   for (int t=0; t<aList.size(); t++)
   {
      if (t<skipto)
        continue; 
      myXYZO = (XYZO) aList.get(t); 
      double x = myXYZO.getX(); 
      double y = myXYZO.getY(); 
      int op = myXYZO.getO();

      switch(opcode)
      {
         case MOVETO:  // start decomposing this polyline...
           vec[2] = x; 
           vec[3] = y; 
           break; 
         case PATHTO:  // these are the same now
         case STROKE:  // these are the same now
         case FILL:    // these are the same now
           vec[0] = vec[2]; 
           vec[1] = vec[3]; 
           vec[2] = x; 
           vec[3] = y; 
           if (clip(vec))
           {
              addQuad(vec[0], vec[1], 0.0, MOVETO); 
              addQuad(vec[2], vec[3], 0.0, STROKE); 
           }
           break; 
         default:  // handle all the visible singletons
      }
   }









21 Nov 2005

Needed: Autoadjust
Needed: random rays into P1D, P2D, MTF don't show by themselves
  (Layout & plot are OK) but do show if I perturb with the mouse.
  Need some kind of repaint() function for each batch. 
Needed: Zernikes, torics, cylinders
Needed: owner's manual.
Needed: chars in DXF.
Needed: row-delete in editor.


20 Nov 2005 A19  The Zoom Bug

When I zoom in too far, onto a focus or some such, after a
point, layout blows up.  I need to find out where the dynamic
range gets in trouble and fix it or limit the zoom. 
For the time being I have set the limit in AnnoPanel...

    if (dBiggest < 200000)  // avoid DuctusRenderer bug at 999949
    {
        uxspan *= ZOOMOUT;
        uyspan *= ZOOMOUT; 
    }

To determine if a line segment intersects a rectangular screen,
decompose this into 4 possible edge intercepts, any of which mean yes:
(R.Sedgwick, "Algorithms" p.313, 1983).  There is also another "yes"
case namely line segment lies entirely within the screen, so perhaps
that should be worked first, before the four edges.  It would be good
to write a clipper tester to try out these schemes on random line
segments.  

static boolean within(Point P, Rect R)
{
    return ((Px-Rx1)*(Px-Rx2)<=0.0) && ((Py-Ry1)*(Py-Ry2)<=0.0)); 
}

static boolean intersect(Line A, Line LB)
{
    return((straddle(A,B) && straddle(B,A));
}

static boolean straddle(Line A, Line B)
{
    double dx = Ax2 - Ax1; 
    double dy = Ay2 - Ay1; 
    double dx1 = Bx1 - Ax1;
    double dy1 = By1 - Ay1;
    double dx2 = Bx2 - Ax2;
    double dy2 = By2 - Ay2;
    return (dx*dy1 - dy*dx1)*(dx*dy2 - dy*dx2) < 0.0;
}

Given an intersection with a horizontal line H at height Hy,

    x = Bx1 + (Hy - By1) * (Bx2 - Bx1)/(By2 - By1)

or given an intersection with a vertical line V at position Vx,

    y = By1 + (Vx - Bx1) * ( By2 - By1)/(Bx2 - Bx1)

Repair work:  
(1) replace float quads with double quads. Should allow zoom=1e6.
If zoom > 100, 
(2) decompose polylines into separate double line segments
(3) intercept each of these with the screen. 
  - those that miss, abandon
  - those that are visible, convert to ints at edge, and
    then draw only the visible part
(4) fill panels? dangerous! drop them if zoom>100.  



20 Nov 2005 A19 The Ruler Bug

Zooming in and out, most ruler calcs are OK but now and then
I get one that has 3 equal segments, and its four ticks are labelled
(-4, -3, -2, 0)  or (-2, 0, 2, 3) or similar.  What can this be. 
Maybe some kind of roundoff of a double getting converted to a
cardinal?  Let me dump some ruler doubles pre-cardinalizing, and see.
Hmmm, does not show up in C:\ruler\rulertest.

I find it difficult to make this bug reappear.

FIX: I adopted ruler of Paul Heckbert pp.61-63 in GRAPHICS GEMS 1990,
who uses the logarithm method to get a nice segment size and a
nice ruler length.  Looks similar to Lampton's ruler but I hope it
does not have that darn bug.  Installed in U.java utilities; runs OK.

20 Nov continued...

Now that character positioning and sizing appears OK in .PLT, I have
still three more tasks remaining:
  * coordinate pen color with ray color         <<DONE
  * implement dotted lines                      <<DONE
  * implement bold vs normal weight line & pen. <<KISSOFF


20 Nov 2005 (Berkeley) A19

Yes, referring to my "HP 7475A Grapohics Plotter" manual
(HP part number 07475-90001, 1983), I have a few observations about
the programming language.  For best interoperability, use no spaces
within each instruction.  There is a two-letter op code followed by
zero or more numbers, comma separated, followed by a semicolon.  The
numerical data can be integer -32768 to +32767, or decimal format
-128.000 to +127.999, or for scaled inputs there is scaled decimal
format -32768.000 to +32767.9999.  Label fields are special.
Plotter machine units are 1/1021 inch = 24.88 microns. There is a 
pair of guide points P1, P2 in machine units, always integers, 
default to paper size dependent values: A = (250,596),(10250, 7796). 
These can be respecified with the IP instruction.
Scaling to user units SCux1,ux2,uy1,uy2; these parameters are truncated
to integers but the x,y plot values can be any scaled decimal values
including the range 0..1.   RO90 rotates 90 deg from RO0 and also moves
the origin so that again all machine unit coords are positive; with RO90
size A default = (154,244),(7354,10244) so it is taller than wide. 

Character sizes use the SIxcm,ycm; command with xcm=width in cm and
ycm=height in cm.  For A size,default box is xcm=0.187, ycm=0.269. 
Around each char there is an invisible box, twice as tall and 1.5 times
as wide as the char, which I do not use.  The character artwork origin 
is its lower left corner. I find a good offset to use is....
  xoff = -0.3 * fontsizePoints; 
  yoff = -0.3 * fontsizePoints; 


18 Nov 2005 (Paris) A19

It is entirely possible that the .PLT scaling capability extends to
floating point inputs.  There is no problem for example with
fractional centimeter char sizes in plots.  I want to do a test.
If successful, I can revert to the B4Win plot method using the
native zero-center-points +Y=up coordinate system, but with 
fractional points addresses.  In reverting I would obtain the
char orientation benefit of the RO0/RO90 instruction.

The test article might include the old coord remapper..
IN;SI0.25,0.4;SP1;RO90;IW;IP1000,2000,7000,8000;SC-200,200,-200,200;

except altered for unit square data to emphasize the fractional
coordinate arguments.... 
IN;SI0.25,0.4;SP1;RO90;IW;IP1000,2000,7000,8000;SC-1,1,-1,1;
and of course with a feeder that reduces the x,y values by a factor
of 200. 

DONE;works.  UNITSQ.PLT shows fractional user units being sent
to an A size plot, looks great, even though all the coord values
are between -1 and +1. 

So let's abandon homemade affine in favor of the original scaling
command directly from zero center points native coord values.  <<DONE



15 Nov 2005 (Marseille) A19

Further testing of .PLT file constructor:

1. Portrait plots come out not centered in the portrait page
but rather snugly packed into the lower left corner.  Maybe
add a Y shift upwards somehow?

2. Although the font centering at 12 point looks perfect,
using the offsets created yesterday,

 int ixoffset = (int) (-1.25 * hpgxs * fontsize);  // sorry, not 0.25
 int iyoffset = (int) (-0.5  * hpgys * fontsize);

when I change fontsize to 24, the chars move way off center,
towards the lower left, by about one character.  Perhaps the
chars want a fixed offset?? rather than an offset that depends
on fontsize?    YES OF COURSE because I have not yet interfaced
the char size instructions to the plotter! so it is putting the
unchanged charsize

   SI0.25,0.4; 

into the graphic, but translated by the user fontsize.

Really I should stash current fontsize locally, init=12,
and whenever it changes I output an instruction "SIw.ww,h.hh"
to handle this font.  There may even be a boldness modifier.

How to do this: probably best to choose a char size scaled for
the same appearance as on the screen, i.e. 

   fontsizePoints/winsizePoints = SIheight_cm/PlotSize_cm

and since PlotSize_cm = 2.54 * PlotSizeMils/1000, use...

   double SIheight_cm = 2.54 * (PlotSizeMils/1000)*fontsize/winsize;
   double SIwidth_cm = 0.6 * SIheight_cm;
   String sw = U.fwd(siWidth_cm,8,2).trim() + ',';
   String sh = U.fwd(siHeight_cm,8,2).trim() + "; ";
   pw.println("SI" + sw + sh); 

----------------

Another issue: handling Portrait and Landscape.
Perhaps the best way to do this is to manage the affines,
which scale to the plot size, but also to the orientation.
A generalization lets them swap x and y, hence do the 90deg
reorientation:

  double hpgxc, hpgxx, hpgxy;
  double hpgyc, hpgyx, hpgyy;

where the constant terms are chosen to center the plot on
the landscape page, and the cross terms are
zero for landscape (nominal presentation for drawings)
or for portrait the xx and yy terms are zero and one
cross term is negative.  

  hpgxc (always landscape) = 500 * 11 inches for A
  hpgyc (always landscape) = 500 * 8.5 inches for A
  hpgxx = bPortrait ? 0.0 : +6000mils/500points;
  hpgxy = bPortrait ? -6000mils/500points : 0.0; 
  hpgyx = bPortrait ? +6000mils/500points : 0.0;
  hpgyy = bPortrait ? 0.0 : +6000mils/500points;

Then when drawing, use...

  xout = hpgxc + hpgxx*xraw + hpgxy*yraw;
  yout = hpgyc + hpgyx*xraw + hpgyy*yraw;

There is a coupled pair of questions about which way is up
for +y in portrait and for landscape, and how to assure that
the char height has the proper sign, so that the chars come
out rightside up and properly rotated.  Reason: the individual
vertices are located entirely by my choice of hpg's, but only
the locations and not the char glyphs of the chars are affected
by my choice of hpg's.  So I may well need to use RO0 and RO90
to get the char rotations right, and therefore need to use that 
RO0 and RO90 environments for my vertices as well. 

In view of this issue, my next whack at .PLT will use the RO0
and RO90 instructions, and will continue to assume that I will
expand CenterOriginPointsPlusY_Up coordinates into mils. 








14 Nov 2005 continued

When I double click a trial file LENS.PLT what runs is
CorelDRAW_9 and the first thing it wants to preverify is
my selection of pen sizes and colors. Default pen library....

	pen 1  Black   0.35mm
	pen 2  Blue    0.35mm
        pen 3  Red     0.35mm
        pen 4  Green   0.35mm
        pen 5  Magenta 0.35mm
        pen 6  Yellow  0.35mm
        pen 7  Cyan    0.35mm
        pen 8  Brown   0.35mm

All other pens are unused, in this default library.
It would be rather nice to have my colors agree with
CorelDraw pens.  Except for odd colors, the drawing
looks nice although not quite centered or sized right.

TROUBLE SITUATION with .PLT files: the scaling is currently
set so that the plotter can be addressed in a centered 
square, -200<x<+200 and -200<y<+200.  This gets mapped onto
a square in plotter mils units with the statement

IN;SI0.25,0.4;SP1;RO90;IW;IP1000,2000,7000,8000;SC-200,200,-200,200;

which initializes everything, rotates 90 deg, and then sets
the internal 6inch square (1000, 2000)(7000, 8000)
to map onto an address square (-200, +200)(-200, +200)
This works.  But, the addresses are integers! and so they
are very coarse on a plotter.  Roughly, pixel coarse. 
I doubt if fractions are permitted since plotters are rather
dumb instruments.  So I am thinking, eliminate this explicit
setup of rescaling, go without it, work in plotter mils, but
perform an internal double precision affine on the quadlist
retaining all its precision, and send integer mils to the
plotter.  More work for me, but what the hey that's what
I get paid to do.

Wait! Some entries in the setup string are decimal fractions:
SI0.35,0.5;  means set char width height = 0.35cm, 0.5cm.
Perhaps it is my error to pass integer pixels.
Perhaps I could send decimal fractional parts also. 

Hmmm. In CorelDRAW views of a .PLT, the text appears, but
is located about a half inch lower left of where it should
be.  Size is OK.  Perhaps the offsets are in the wrong coord
system?  Or maybe they did not get converted properly, i.e
they were not in points?  Also (hint!) when there is a char
pair, e.g. "-2", there is an offset in both the X and Y coords
for the two chars.  The tick ruler is at -165 pixels, and...

 PDPA -165,79;
 PDPA -161,79;
 PDPA -165,79;
 PDPA -165,158;
 PDPA -161,158;
 PDPA -165,158; PU;
 PUPA -222,-180; LB -
 PUPA -220,-183; LB 2
 PUPA -222,-101; LB -
 PUPA -219,-103; LB 1
 PUPA -218,-24; LB 0
 PUPA -219,55; LB 1
 PUPA -220,133; LB 2
 PUPA -229,-60; LB +
 PUPA -267,-83; LB X

The corresponding quads agree with that -165, but their charcenters
are very near the ruler:

   707   -165.00000000     79.36508179      0.00000000      21 PATHTO
   708   -161.50000000     79.36508179      0.00000000      21 PATHTO
   709   -165.00000000     79.36508179      0.00000000      21 PATHTO
   710   -165.00000000    158.73016357      0.00000000      21 PATHTO
   711   -161.50000000    158.73016357      0.00000000      21 PATHTO
   712   -165.00000000    158.73016357      0.00000000      22 STROKE
   713   -177.60000610   -158.73016357      0.00000000  120045 -
   714   -170.60000610   -158.73016357      0.00000000  120050 2
   715   -177.60000610    -79.36508179      0.00000000  120045 -
   716   -170.60000610    -79.36508179      0.00000000  120049 1
   717   -170.60000610      0.00000000      0.00000000  120048 0
   718   -170.60000610     79.36508179      0.00000000  120049 1
   719   -170.60000610    158.73016357      0.00000000  120050 2
   720   -186.00000000    -39.68254089      0.00000000  120043 +
   721   -179.00000000    -39.68254089      0.00000000  120088 X

Now of course the char coords are not the center, they are 
supposed to be translated to the lower left corner of the char.
This means I need to introduce the halfwidth "hw" and half
height "hh" in pixels units, and subtract.  However the association
of hh and hw with x and y depends on the orientation of the chars.
The quadlist reveals 12 point type, and the x spacing in the
quadlist is 12/2 + 1 = 7 pixels, and the vertical x axis in
this Layout has its ruler at x=-165, so the values of 
-177.6 and -170.6 for "-" and "2" are good choices.  The "x=-2"
tick is at y=-158.73 so it is correct to see -158.73 as the ycoord.

The deviations must come in when some offset is introduced
to manage the center-to-corner correction.

Hmmm. Rewrote the DXF driver, now outputs raw mils, and uses
explicit affines hpgxc, hpgxs, hpgyc, hpgys, and live pointsize.
Offsets are computed from pointsize and current affines. But
result is: good x, excessively negative y.
FOUND that bug: used op = op % 10000 needed op = op / 10000.
ALSO the xoffset for a char has to be -1.25*fontsize, not the
initially guessed -0.25*fontsize, don't know why.  The yoffset
works just fine with the guessed -0.5*fontsize. 

NEEDS FURTHER TESTING with various font sizes and portrait.
I know the affines won't center in either portrait or 
landscape; the constants aren't orientation sensitive yet.
There will be some interaction with RO0 and RO90.





14 Nov 2005 (Marseille) A19

The DXF user units question raises a larger question:
in what units are the quads written?  Seems to me
best that all quadWriters adopt some common system, for
example ZeroCenterPoints or ZeroCenterUnitSquare, to
facilitate the quad interpreter's life in displaying,
printing, CAD-ing etc.  But for DXF at least there
should be some record of the affines that convert user
units to quadlist units, so that a client (like DXFwriter)
that needs special information can de-quad its information.

I am thinking that the current setting of UO_GRAPH_SIZE
and (protected int) UOpixels should not have any effect
on the contents of a DXF, except the placement of the rulers
if any.  The user optics and rays should be uninfluenced by
the display pixel count/size. 

Also, the current settings of Pan and Zoom and Rotate influence
the affines (userUnits -> screenUnits) so it is these modified
affines that must be used to invert screenUnits -> userUnits. 

Plan:
  1 Discover the units of each quad list.
     Layout: ZeroCenterPixels; 3D
     Plot:   ZeroCenterPixels; 2D
     P1D:    ZeroCenterPixels; 2D
     MTF:    ZeroCenterPixels; 2D
     P2D:    ZeroCenterPixels; 3D!
     Test:   ZeroCenterPixels; 3D
     
  2 Discover if/how these are decoded, e.g. by screen or PS
     Screen shows them as ZeroCenterPixels (no conversion)
     PS shows them as ZeroCenterPoints (i.e. no conversion)

  3 Make any unifications that are indicated.

Should the current affines be made available to all quad writers
via a central AffineDocumenter within AnnoPanel?  Affines used are...
  Layout: buildScaledItem(xyz, op, bRand) for rays
          addScaledItem(xyz, op) for optical elements
  Plot:   buildScaledItem(x, y, op, bRand) for rays
          addScaledItem(x, y, op)  for rulers ticks etc
  P1D:    Initially sets uxcenter=0, uxspan=EXTRAROOM, 
          and sets       uycenter=0, uyspan=EXTRAROOM.
          (This is for CenteredUnitSquare coords.)
          (Actual binsize, vertsize are scaled internally.)
          addScaledItem(x, y, op)  for rulers etc
Within AnnoPanel, buildScaledItem() merely uses the three affines...
   getax(xyz[0]), getay(xyz[1]), getaz(xyz[2]).
where....
   getax(ux) = (ux-uxcenter)*dUOpixels/uxspan; 
   getay(uy) = (uy-uycenter)*dUOpixels/uyspan;
   getaz(uz) = uz*dUOpixels/uyspan; 
Notice this bizarre melange of 2D and 3D affine logic!
Anyway there is the opportunity to create two methods

    void addAffines()
    // stash user affine consts & slopes for pix->user
    {
       addXYZO(uxcenter, uycenter, 0.0, USERCONSTS); 
       double d = (dUOpixels > 0) ? dUOpixels : 500.0; 
       addXYZO(uxspan/d, uyspan/d, uyspan/d, USERSLOPES);
    }

and have every quadlist generator call these before writing
any artwork, to establish the decoding in case DXFs are wanted.

Then, within CAD::DXF, have default consts=0 and slopes=1
which apply, unless declared consts & slopes are discovered
and replace these defaults.  In this way CAD::DXF will not
much care about negligent quadWriters. 

Or! if I decide I prefer to have default DXFs appear in
inches, I could have the default const=4.00 and slope=1/72,
so that centered quads will appear offset to positive coords
with changes in inches.  

Then, in Layout or wherever, I can install the calls to the
addAffineConsts() and addAffineSlopes(), enabling the 
rescaling from quadPoints to UserUnits. 

New problem: layout artwork nicely acquires user unit sizes,
rulers etc are correct, Adobe Illustrator handles the tiny
size of the drawing (2 or 3 "points") through magnification.
BUT the chars and offsets remain at ten points, much huger
than the optic.  I need some way to specify char sizes in
DXF so they scale as well.  (N.B. MS-Win edition has all
its chars vanish! so never any problem. I'll do that, too,
for time being. But would prefer long term fix.) 

DXF strings should be trimmed; some interpreters do not
enjoy leading blanks. << DONE.

PLOTTER OUTPUT is there a way to set PlotCenter and PlotScale
so that the quadlist coords will fit nicely onto the plots
with no need for explicit re-affine?  I think we already use
plotter-internal affines for handling size A...E so why not
go a bit further.  Plotter units are normally in integer mils,
with origin in a corner I think.  




FACT ABOUT .PNG AND .JPG PIXEL SIZES
  Although user requests Graphics::WindowSize=500 pixels,
the artwork within the window is smaller, 490x467 pixels.
Reason is the 5 pixel wide frame at left, bottom, right,
and the 28 pixel wide top icon/title bar at top. 

13 Nov 2005 (Marseille) A19

Test files TEST.OPT and TEST.RAY; one surface and one ray.
B4Win makes TEST2DWin.DXF; AdobeIllustrator OK no warnings
B4Win makes TEST3DWin.DXF; AdobeIllustrator OK no warnings.
B4Java makes TEST2DJ.DXF; AdobeIllustrator warns "VERTEX", final seg absent
B4Java makes TEST3DJ.DXF: AdobeIllustrator warns "VERTEX", final seg absent

I conclude there is some key difference between B4Win output and
B4Java output.  Studying the .DXFs ought to pinpoint the difference. 

Hmmm.  At line 1144 of TEST2DJ.DXF there is an orphan VERTEX -- 
not part of a polyline.  Maybe this orphan (a) is a VERTEX
in an unexpected place hence the warning; and (b) this VERTEX
is the missing end point of the seq.  As if, the ENDSEQ is
declared *before* the final vertex gets translated.

Also: line 896, 792, 672, 576, 480, 384, 288, 192, 96.

Two birds, one stone.

Notice that the B4Win does not have any dangling VERTEX
statements.  Its are all sandwiched neatly between bookends:
First, the POLYLINE declaration; then a string of VERTEX
definitions; finally an ENDSEQ terminator. 

So:   MOVETO -> POLYLINE, VERTEX, bPolyStarted=true;
      PATHTO -> VERTEX;
      STROKE or FILL -> VERTEX, ENDSEQ, bPoly=false.  

This makes me wonder why have bPolyStarted.  
It does nothing.  << GONE.
Implemented the PATHTO logic above <<DONE.
Ha, it now works: no VERTEX warnings, not missing
terminator arcs.

Remaining in DXF is to replace points with UserUnits.
I think I can do this using a special quad SETSCALE
that sets up the scale factors for X, Y, and Z so
the DXFs can be built in users choice of points or
UserUnits. 




8 Nov 2005 A19

Setting background color in PostScript: 
Fill a huge rectangle with color before drawing on it.

        if (bBkg)
        {
            pw.println("0 0 0 setrgbcolor"); 
            pw.println(sXL+sYB+" moveto"); 
            pw.println(sXL+sYT+" lineto"); 
            pw.println(sXR+sYT+" lineto"); 
            pw.println(sXR+sYB+" lineto"); 
            pw.println("closepath fill"); 
            pw.println("1 1 1 setrgbcolor"); 
        }

With this fix, PostScript now has a functional white/black
background.  The background setter is the first element of
the TechList, prior to all appearances of writing, so that
no art will get obliterated by a background cover-up.

With all font size & boldness information built into the
quadlists, each renderer can handle font changes as they
happen, allowing the free mixing of preset Tech fonts and
subsequent varieties of annotation fonts.

I have abandoned PostScript sethsbcolor and adopted its 
slightly more fundamental sister,  setrgbcolor, for all
the foreground background work.



6 Nov 2005   A19

Abandoning the LowerLeftOrigin owing to wanting to be able
to render chars centered on caret and blinker.    Sigh. 
Actually it is an easy reversal to accommodate CenterOrigin:

  * renderers now have to remember pxoffset,pyoffset
    and apply the offsets whenever drawing a char...

          pxoffset = 1 + fpoints/4;
          pyoffset = fpoints/3; 

  * blinker has to track changes in UOAnnoFontSize. I am using
    width = h/2 and height = (2*h)/3 nicely centered...

    private void paintCaret(Graphics2D g2)
    {
        if (g2 != null)
        {
            int h = getUOAnnoFont(); // points
            g2.setXORMode(Color.RED); 
            g2.fillRect(icaret-h/4, jcaret-h/3, h/2, (2*h)/3); 
        }
    }

  * artists have to locate the centers, not the LLCorners:
    HaxisTicks use dmid = 0.5*(nchars-1) not 0.5*nchars;
       and  hyoffset = -0.7*scaledH; not -scaledH; 
    Vaxisticks use vhrgap = -0.2 not 0.2
        in x = xruler + scaledW*(k-nchars-vrhgap); 
       and vyoffset = 0.0;  not -0.4*scaledH; 

6 Nov 2005  A18 continued

Yikes, if the chars are not centered on their addresses, then
the annotator fails to place chars atop the caret.  The caret
coordinates are the center of the crosshair and the center of
the blinker.  These caret coordinates make sense.  It's dumb
to have the char coordinates differ, because then there must
be separate renderers for text and anno. 

Prefer to unify the renderers.  


6 Nov 2005   A18

I have got into an error situation.  The design plan has been
to have each art generator regard characters as located at
a defined place on each char, nominally the center.

Therefore the artist needs to know char height
and width, to properly locate them appropriate distances from
axes and ticks.  

But the artist should never need to know the offsets associated 
with any specific font or renderer.  For example the screen 
Monospaced font needs a yoffset of 0.4*height.  The PostScript
offset is different, and plotter chars different still.

My error yesterday was to try and tune the artwork generators
to best center characters on screen.  Today I will remove that
tuning and instead install tuning into the renderers, the only
place where the specific output format corrections make sense.

Q: where is the best assumed "location" of a character?
In Java, the origin is lower left corner (baseline & LLBound).
In PostScript, ditto. 

A: My hope was that if artists assume the center is the origin,
then the artists need know nothing about the font size.
But! if there is a string longer than one character to position,
the FontMetrics become crucial, to position that string --- this
position has to be put into the art generator's quadlist. 

This means that height (for vertical separation) and width must
both be visible to the artwork generator during the construction
process.  OK, since any change in UO_GraphicsFont will necessarily
trigger a new artwork generation. 

IMPLEMENTING ORIGIN-AT-CENTER-OF-CHAR POLICY
  Haxisticks:   
            double yoffset = 0.5 * scaledcharheight; 
            String s = U.fwd(ticks[i], 16, nfracdigits).trim();
            int nchars = s.length(); 
            double dmid = 0.5*(nchars - 1);  
            for (int k=0; k<nchars; k++)
            {
                int ic = (int) s.charAt(k) + iFontcode; 
                double x = ticks[i] + scaledcharwidth*(k-dmid); 
                addScaledItem(x, yruler-yoffset, 0.0, ic);
            }

  Vaxisticks:
            double rhgap = 0.2;
            String s = U.fwd(ticks[i], 16, nfracdigits).trim();
            int nchars = s.length(); 
            for (int k=0; k<nchars; k++)
            {
                int ic = (int) s.charAt(k) + iFontcode; 
                double x = xruler + scaledcharwidth*(k-nchars-0.5-rhgap); 
                addScaledItem(x, ticks[i], 0.0, ic);
            }


IMPLEMENTING ORIGIN-AT-LLCORNER-OF-CHAR POLICY
  Haxis ticks:
            double yoffset = -scaledH; 
            ...
            String s = U.fwd(ticks[i], 16, nfracdigits).trim();
            int nchars = s.length(); 
            double dmid = 0.5*nchars;  
            for (int k=0; k<nchars; k++)
            {
                int ic = (int) s.charAt(k) + iFontcode; 
                double x = ticks[i] + scaledW*(k-dmid); 
                addScaledItem(x, yruler+yoffset, 0.0, ic);
            }

  Vaxis ticks:
            double yoffset = 0.5*scaledH; 
            double rhgap = 0.2; 
            ...
            String s = U.fwd(ticks[i], 16, nfracdigits).trim();
            int nchars = s.length(); 
            for (int k=0; k<nchars; k++)
            {
                int ic = (int) s.charAt(k) + iFontcode; 
                double x = xruler + scaledcharwidth*(k-nchars-rhgap); 
                addScaledItem(x, ticks[i]+yoffset, 0.0, ic);
            }

Conclusion: there's not a lot to prefer one over the other!
In particular both implementations require both metrics, 
scaledcharheight and scaledcharwidth, to properly adjust their
vertical and horizontal char locations.  

ACTION: change all char artwork to LLO format. << DONE.
ACTION: change all renderers to LLO format.    << CAD yet to come.
QUESTION: is DXF a special problem? 


5 Nov 2005   A18

There's a little problem with using z for font/bold information.
Some uses (Test, for example) use all 3 coords (x,y,z) to locate
text strings in three dimensions.   Commandeering z for fonts
ruins that freedom.  Better would be to include an extended opcode
perhaps outside the 0..255 range for font stuff, for example

   int opint = (ASCII) char + 1000* bold + 10000*font;

which can be decoded...

   op = opint % 1000;  // nominally no effect
   font = opint/10000; 
   bold = opint/1000 - font*10;
   ibold = (fontcode/1000) % 2; 
or

   ibold = fontcode/1000 - 10*font; 

To implement this idea, all the renderers (CAD; AnnoPanel)
will first have to have the op = opint % 1000 business installed.

Only then can we go install font specifiers, which if using the
unit square destination scaling box may need..

        int fontcode = getUOGraphicsFontCode();  
        int charheight = fontcode / 10000;            // points
        int charwidth = charheight / 2;               // points
        double xcharwidth = charwidth * uxspan / dUOpixels; 
        double xtick = 0.5 * charwidth * uxspan / dUOpixels; 
        double ytick = 0.5 * charwidth * uyspan / dUOpixels;  
        double yoffset = 0.8 * charheight * uyspan / dUOpixels; // not 0.7

The renderers will need to generate their own local values of...

   fsize, points
   ibold, 0 or 1
   pxoffset = fsize/4; points
   pyoffset = fsize/2; points

and to keep track of changes, compare (fontcode != fontcodeprev).

 

1 Nov 2005 A18: Building font into ArrayLists

STEP 1: AnnoPanel should offer four built-in methods
to itself & clients, and these should be used universally
whenever doArt() is called, for UO font info:   <<DONE

   int getUOAnnoFont();     // private anno use
   int getUOAnnoBold();     // private anno use
   double getUOAnnoCode();      
   int getUOGraphicsFont(); // protected client use
   int getUOGraphicsBold(); // protected client use
   double getUOGraphicsCode(); 

STEP 2: Within AnnoPanel, wherever annotation is generated,
for each anno char, compute current value using the above
methods, to accompany every (x,y,z,c) AnnoQuad.  <<DONE

STEP 3: Each extension to AnnoPanel becomes responsible 
for installing its font info in its TechList alongside
each character. Rewrite Layout, Plot, P1D, P2D, MTF, Test
so that every char written includes its current zcode,
computed from current 100*fontsize+iBold. 


STEP 4: Rendering: start with an izold=0, and 
when a char emerges for rendering, see if it has
a differing new iz, and if so, emit a change of font
and then set izold=iz.  The protected ints within the
renderer that need updating at each font change are:

   protected int fontsize;
   protected int charheight; << = fontsize. Eliminate?
   protected int charwidth;  << get from FontRenderContext

MASSIVE CLEANUP: ELIMINATE THESE THREE VARIABLES EVERYWHERE
thereby avoiding stale font information;
ok to use local vars within a client's art method
but be sure they are discarded when that method exits.

   if (izfont != izprev)
   {
       if ((izfont < 333) || (izfont > 5000))
         izfont = 1200;  
       fontsize = izfont/100;
       charheight = fontsize; 
       iBold = izfont % 2; 
       Font f = g2x.setFont("Monospaced", iBold, fontsize); 
       FontRenderContext frc = g2x.getFontRenderContext();
       charwidth = (int) f.getStringBounds("a", frc).getWidth(); 
       izprev = izfont; 
   } 

May I please simplify this, delete charheight use only fontsize,
and delete charwidth use only fontsize/2?  It's approx correct
and eliminates a method. 




1 Nov 2005 A17: Building font into ArrayLists

The present situation on font control is messy.

(a) Each art generator needs to know fontsize so it can
offset chars, label axes, etc;

(b) Font management occurs many places within AnnoPanel, 
divided between the users where font definition is needed:

    paintComponent() gets UO preferences, makes TechFont & AnnoFont;
    renderList() needs fontsize, gets it globally;
    renderList() needs iBold, gets it through an argument;
    doCAD() needs fontsize & bBold, sends to CAD:doCAD();
    doPrint() will need fontsize & bBold for its fonts.

Seems to me desirable to eliminate the current arrangement
for furnishing the renderer with font information, where I
have an explicit argument bBold, and a parallel global
int "fontsize", both of which control the rendering.

Better would be to have an ArrayList opcode SETFONT
whose arguments would be x=fontsize in points, and
y=boldness: y=0.0 means plain, y=1.0 means bold.

This way the generator of the ArrayList would merely
build its font preferences into the quads, and the
renderer would handle font definition in real time
for its destination.  Fewer interfaces! and easier
printing and CAD generation.  

Changes to:  Constants,  AnnoPanel renderList(),
and each artwork generator class: LayoutPanel, 
P1DPanel, P2DPanel, PlotPanel, MTFPanel, TestPanel.

So many changes! let's move on to A18 for this work. 

Also let's drop Test2Panel, and rename Test1Panel
to become TestPanel. << DONE. 




30 Oct 2005, A17: TEXT AND GRAPHICS CONTRASTED

TEXT DISPLAY AND PRINTING

I use implicit buffer (style 1) in A17 EJIF classes EdPanel for
screen, and class PrintText for printing text.  In style 1 
a commanded paint or print menu item triggers a succession of 
string fetches from the host's ePanel, and draws each string 
directly to the given print context using...

    for(int i=topline; i<=botline; i++)
      g2.drawString(ePanel.getLine(i), 0, fontsize*(i-topline+1)); 

This method is completely adaptable to display formats, and
is perfectly okay for static information.  

Editing text is dynamic work. When editing text,
each keystroke that changes the charTable[][] triggers a 
repaint of the screen.  Quick enough for typing. 

GRAPHICS DISPLAY AND PRINTING

Here I use a variant of STYLE 4 (vector + biTech + blit)
in which there are three ArrayList vectors:

  myTechList for the technical drawing
  myAnnoList for the annotation char sequence
  myBatchList for a short batch of random adornments.

A general purpose renderList() accepts any given ArrayList
and any given Graphics2D context, and draws the list. 

For screen output redrawing, 

  myTechList -> renderList() -> g2Tech+biTech -> blit to screen;

then 

  myAnnoList -> renderList() -> directly onto screen. 

This direct write allows editing, backspacing etc of annotation
with immediate feedback because of the complete screen feedback.
The blit obliterates any backspaced char. 

For random output batches, the timer triggers a batch of
ray calcs, each of which is appended to myBatchList.  
When timer batch is over, Random:timer calls AnnoPanel:redo()...

  myBatchList -> g2Tech+biTech -> blit to screen.

There are two problemos with this arrangement.

PROBLEMO UNO: too slow to redraw when zoom/pan/twirl.
  Layout: let's repaint *only* the bare bones optics, no shading, 
  no rays, since there can be hundreds of rays.  Fix: have a
  bMouseUp flag, Layout draws only a skeleton when mouse=down,
  draws the whole enchilada when mouse=up. By passing bMouseUp
  to each GPanel, that GPanel can be entirely responsible for
  deciding if there is to be a division of artwork between
  partial=quick vs enchilada=slow.  <<DONE.
  Plot: enchilada
  1D:  enchilada
  2D:  enchilada
  MTF: enchilada 

PROBLEMO TWO-O: cannot print random buildup images.  
  Each random image gets stored only on the current biTech buffer,
  which of course is discarded when going to CAD or printer.  So
  I need another list, myRandList, in which I accumulate all the
  randoms, not discarding after each batch.
  This list must be size limited to keep RAM from exploding. 
  This list must be rezeroed whenever there is a pan/zoom/twirl.



Annoyance: when I change plot spots from diamond to square, then
go back and run more randoms, I continue to get diamonds.  But if 
I nudge the picture, the old randoms vanish and the new spots become
squares.   Could I have the old artwork continue through nudging,
but the new symbols appear when I change them???  Notice that if
I can solve Problemo Two-o, I can maybe eliminate this annoyance
the same way, namely retain some/all of the preceding random events
and continue to build new ones into myRandList. 





23 Oct 2005, A17

AutoAdjust needs work:
  Install a JDialog progress monitor display
  Install a JTimer to drive iterations
  Install a parser/organizer for adjustable parameters
  Install an optimizer


23 Oct 2005  A17
Editor work: repaired a glitch involving Alt-Equals sensing
and action -- equals was faulty, and plus was faulty.  Now
I have processing for Alt-Equals, Shift-Equals, and Equals
all confined within the KeyPressed VK_EQUALS routine, and
I have the KeyTyped process blocked for both '=' and '+'.

Editor needs: 
  Text edit as an alternative to Table edit;
  Show file paths
  Show row/col
  and please test the colons/tabs switch
  and test spreadsheet compatibility
  and test multiplatform files again
  and test excessively large file sizes: widths, heights.



22 Oct 2005, A17

OFFSCREEN DRAWING PLAN

I have fully adopted the offscreen drawing paradigm of LJ p.589
to build the technical artwork and to accumulate random additions
to the technical artwork.  Basic idea is to create a buffered
image biTech and secure a Graphics2D toolkit for it, and use
these for each technically expensive art item.  When it's time
to view biTech, call repaint() and have paintComponent()
perform the blit: g.drawImage(biTech, 0, 0, null).  

Annotation is far smaller & simpler, and benefits from an
undo backspace action, so I don't fuse the annotation into the
biTech image.  Instead, I redraw directly from myAnnoList
onto the screen using the g2Local context that is passed thru
the paintComponent() call.

The same general purpose renderList() is used for all three. 

  * General artwork: myTechList -> g2Tech -> biTech.
  * Random artwork:  myRandList -> g2Tech -> biTech.
  * Annotation art:  myAnnoList -> g2Local -> screen.

IMPLEMENTATION PLAN

Random artwork from Layout and Plot: for these, the method
doRandomRay() puts a random ray art item onto myRandList.
Later, when a bunch of random rays are to be refreshed onto
the screen, Random calls AnnoPanel:redo() that renders 
myRandList onto biTech using g2Tech, then clears myRandList,
and calls repaint().  This way the random artwork does not
accumulate into an infinite list, but rather just gets
recorded within biTech, and can run "forever". 

For the simpler cases of P1D, P2D, MTF, the random ray
buildup is contained within a constant size histogram.
The method doRandomRay() merely increments the histogram. 
Later, redo() renders a picture of the histogram or
its Fourier transform. 

There's a bug in Layout that causes failed ray dotted
extensions to appear in strange places.  << FIXED: RT13

Editor lacks editing commands.  << FIXED.


16 Oct 2005, A17

Here's maybe a way to have random rays painted atop a base
graphic (for Layout or Plot) that is distinct from the total
repaint of histograms P1D, P2D, and MTF:

  (a) the random ray command comes, as usual, to the Layout.
  (b) Layout runs one ray and stashes it in a short TechList.
  (c) Layout asks AnnoPanel to render it atop its existing art.

This requires AnnoPanel to have a plot-on-demand capability.
Call it renderOver().

Q: How to gain access to AnnoPanel's helper methods?

A: Perhaps have a minimum set of helpers that act on any given
ArrayList, rather than on the built-in TechList.  Or, have the
short ArrayList dwell within AnnoPanel, unused except for this
random additive art. Here is a set of two helpers that can
serve to write to AnnoPanel:myTempList if bRandom=true, or
to AnnoPanel:myTechList if bRandom=false:

   AnnoPanel:buildXYZO(opcode, bRandom);
and
   AnnoPanel:buildScaledItem(xyz, opcode, bRandom);

Having this argument flag allows the same routine

   Layout:drawOneRay(kray, bRandom)

that can handle either tableRays->myTechList, or later
it can handle randomRays->myTempList. 



15 Oct 2005, A17

Bug introduced this morning:
Altering the user option strings for Random broke 
the user option stash system.  Now, every time
I run B4J, it fails to recognize its valid OPTIONS.TXT file
and reimposes factory options.  This should happen once,
to initialize the new user option names, but should not
then repeat.  With this bug, B4J always imposes factory
options.

Cause: duplication of an option name? << NO
Cause: wrong number of strings?       << NO

OPTIONS.TXT gets read in by the constructor of Registry,
when DeskMenuFrame makes its startup Registry.

Clue: UO_COUNT=106, this is correct
also OPTIONS.TXT contains 106 lines of text.
But:  nlinesReadIn = 59.
And:  OPTIONS.TXT line 59, 60, 61 read as follows:

    Random rays per refresh=1000
    Stop at ray starts ==99999
    or at ray finishes ==99999

I think the problem is that my new dialog constant
strings 60, 61 end with an equals sign:

    "Random rays per refresh", // 58
    "Stop at ray starts =",    // 59
    "or at ray finishes =",    // 60

No other option strings end with an equals sign.  

Removing my terminal equals signs....

    "Random rays per refresh", // 58
    "Stop at ray starts",      // 59
    "or at ray finishes",      // 60

Ha, this ends the problem.  Lesson: do not terminate
any of the UO_STRINGS with an equals sign.  Evidently
the equals sign is employed by the data parser, or
something similar. 



14 Oct 2005, A17

Got Random maxtries, maxgood, percent working.
Got Random "Stop" and "Done" button labels working.
Got Random JDialog to properly float above DeskMenuFrame.
  - would not float when I set first arg JFrame = null;
  - does float when I specify DeskMenuFrame as first arg. 
  - so I guess first arg of JDialog constructor stipulates
  what the dialog should float over. 

08 Oct 2005  A17

Working on Random.  Random is used to (a) augment graphics
Layout and Plot, and (b) accumulate events into 1D and 2D.
The repainting requirements are different for thest two
situations.  Random does nothing but manage messages to
Layout, Plot, 1D, 2D asking for a random ray and receiving
a boolean in return to monitor the successes.   The random
ray work is within RT13, and the response is specific to
each GJIF. 

Layout and Plot: need to somehow paint atop an existing
drawing of the base information, without having to repaint
all the previous rays.  This means "additive" artwork.  
How to do this??  Perhaps a variant of annotation?

1D and 2D: here, Random merely places additional events into
a 1D or 2D array, and every few hundred rays, repaints the
entire picture based on the augmented array.  No additive
artwork is needed.  The new artwork replaces the old.  So
a simple "repaint" instruction will rebuild the picture. 




02 Oct 2005  A17

Yikes, cannot delete editor lines with swipe-Ctrl-X.

Having explored the use of JDialog to monitor and control
an ongoing task (a timer demo task) in dialogs.java,
I would like to transition the BEAM standalone math tasks
InOut, Random, and AutoAdjust to use the Dynamic Engine
model.  With this model, to run a task, the DeskMenuFrame
has only to instantiate an object of the desired class:

    InOut myIO = new InOut();

whereupon the task starts up and runs invisibly to completion,
or if there is ongoing monitoring & control needed, it pops
up a JDialog with numerical or string displays and a DONE button.

With the Dynamic Engine idea, all fields and methods of the
class are private, and only the constructor is public to the
world.   Cleanup is automatic when the caller goes out of scope.
No timer tasks are left running. 

When the JDialog is present, clicking its DONE button or clicking
its exit box shuts down everything and exits, letting the
caller go out of scope, whereupon garbage collection occurs.

For engines that need access to the tables, artwork, etc the
necessary references can be passed via the constructor, I think. 
For example Random() will need to know.. is it driving a layout,
or a 1D, or a 2D, or a plot?  But most of the needed methods
are static within DeskMenuFrame so that for the most part
the engines can simply call DeskMenuFrame.getFrontGJIF() or
whatever they need. 


25 Sept 2005 A16

Fooled around a bit with javax.swing.ProgressMonitor,
a special purpose dialog that has a graphical bar showing
job progress, and a unique string "note" that can be
updated live by a method "setNote()"  --- see dialogs.java
that includes a progress monitor and a timer tick task.

But really I think I'd prefer a more general purpose
JFrame, onto which I can write some text at specified
locations now and then, perhaps altering JLabels or
substituting one JLabel for another, or something. 
Because: ray generation monitoring is not a closed end
sort of task, and I have three strings to keep updated:

  Number of Tries
  Number of Successes
  Percent OK

The usual modal JDialog box or JOptionPane won't serve because
they are built from Strings and Strings are immutable. 

Ha: the JLabel has a method setText() that can perhaps
be used to revise the text of an already-displayed JLabel.
If my variable reporting fields were JLabels, I could update
their contents by calling setText(myNewString) on each.

Since JLabel is a perfectly OK component to build into a
JOptionPane, I can try this variable display method using
my JOptionPane demonstrator. 

Oops, won't work with result=JOptionPane.showDialog(XXXX...)
because it pops up the dialog and does not allow further 
code to execute until it returns its exit code. I guess this
is what they mean by saying JOptionPane is modal. 

However might work with a JDialog, for which there is a
method JDialog.setDefaultCloseOperation(int op) that specifies
what happens upon user closing.  Default is DISPOSE_ON_CLOSE.
To clean up, kill timer, whatever, use addWindowListener()
to the JDialog. 

JDialog has a method update() which redraws all its components,
so that if one or more has changed, they will be refreshed.
I might use this in conjunction with a bunch of JLabels, each
with setText(), and call myJDialog.update() to display them anew.

Every JDialog is like a JFrame, namely it has a default contentPane
and a default LayoutManager.  Components should be added to its
ContentPane not to the JDialog. 

23 Sept 2005 A16

Need major redesign of random. Rather than extend the size
of the TechList, which might grow beyond reason, should we not
have a separate RandList carrying just one block of random ray
artwork  --  e.g. 100 rays worth --  to be painted atop the
existing gTech, by a special call "addRandom()" rather than a
more general "repaint()" This way excessive painting would merely
obliterate marks within the fixed size array gTech. 

18 Sept 2005 A16

Introduced mouse left button drag position,
right button drag for Elev and Azim; works. 

Introduced P1D, P2D, MTF including U.fourn(),
working on Random. 



2 Sept 2005 A15

Little bug: mouse wheel is OK on first window, but becomes
unavailable on successive windows.  No no seems to test OK.
I wonder why my mouse wheel ceased. 

30 August 2005  A15

Idea of A15 is to disassemble the graphic elements
in LayoutPanel, zsort them separately, then repaint
them in Z order.  Each "element" is a quadrant of each
graphic optic.  24 elements per surface = 8 shade + 16 arc.  
Some work here! hence the separate version number.

Q: Will the rays, not being zsorted, look odd, lying
atop the properly sorted solids?

A: no they look pretty good. 

Q: Instead of viewelaz() doing cosines and sines, could we
please precompute the cosaz..sinel coefficients and stash them 
somewhere, so that there are separate calls to InitViewElAz()
and UseViewElAz() with no need to recompute the cosines and
sines every time we need some more viewed points???

A: Done. 


28 August 2005, A14 continued

Plan: eliminate frame size control of "pixels"
and instead always user option "uopixels" setting in AnnoFrame.
Also, make sure the default AnnoFrame size is pixels.
If the user changes the window size, the artwork may 
be clipped etc -- let it clip.  <<DONE. Works.

Install user option "wheel push = zoomin" vs
"wheel pull = zoomin"  <<DONE. Works.

Install drivers for PNG and JPEG which are
built into javax.imageio.* and javax.imageio.stream.*
This will require that I interface a BufferedImage
to the doCAD method. These output drivers are
available in javax.imageio.*;    <<DONE. both work. 



27 August, A14 continued

Installing CAD functions. 
Need a better design for linear sizes <=> paper sizes
since "pixels" in affine will vary with window size.
Also issue of font size.  PS works.  PLT works. DXF works.

Angular pivoting should take place about the currently
selected (x,y,0) caret point, not just the (0,0,0) origin.


26 August, A14 continued

Installing CAD functions for QuadList, PostScript etc.
This will take quite a bit of testing but is apparently
going smoothly.  QuadList goes first for best visibility.


22 August 2005, A14

Would it not be terrifically wonderful to have -- in addition
to mouse left button drag to relocate the center of action --
to have a mouse right button drag redefine the elevation (vert)
and azimuth (horiz) angles of the Layout display???  This way the
mouse could be used to explore the XY space and also the angular
space display.    << DONE. WORKS GREAT, 23 AUGUST

Or maybe, hold the LH button down, have the mouse wheel
control the azimuth; or hold the RH button down and 
have the mouse wheel steer the elevation???  
   ^^ NOPE,CLUMSY: NEEDS TWO FINGERS AT ONCE

Oh wow

While I'm at it, could maybe the repainting occur continuously
as the linear drag and the motion continues, rather than
simply as one call at the occasion of MouseUp?  This way give
the User an indication as to the progress of the Mousing?

I'M ON IT...DONE 25 AUGUST



22 August 2005, A14

Fixed a little problem that AnnoPanel's renderList() was being
used to set up background color twice: first, rendering the 
gTechList, then rendering the gAnnoList.  Naturally the second
call background setting completely obliterates all the artwork
from the first run.   Answer is to have the background interpreter
act only on the explicit SETBLACKBKG or SETWHITEBKG opcodes, and 
have these opcodes only appearing as the first opcodes
in the gTechList run, never in the gAnnoList sequence.  
To obtain a contrasting color for annotation, I use a call
to gTech.getBackground() and pick a contrasting setPaint(). 

19 August 2005, A14

Annoying bug, fixed, but not understood in A14:  <<FIXED

In A13 popping up a new GJIF graphics frame works great,
it pops to front, "Selected" and does not bruise any background
frame displays.

But in A14, where the bulk of the workload is done by
AnnoPanel not a GJIF, there is no easy way for a JPanel to
claim the front, and bizarre effects occur if I try to set
MyPanel.toFront().

What combination of flag settings gives a clean presentation?

As of 21 August 2005 here is the best I can do:

m7::main creates a new DeskMenuFrame();
DeskMenuFrame builds a new JDesktopPane jdp;
  it sets its contentpane = jdp; 
  it adds each EJIF and GIFJ to jdp; 
  it repaint()s each time there is such an addition; ??
Each GJIF installs its preferred aPanel in constructor
  and sets show(); 
AnnoPanel makes no notice of the above machinations.
LayoutPanel etc do NOT call show(), toFront(), repaint().
  (Those are appropriate for frames, not panels.) 

THE FIX IS THAT A JPANEL CANNOT BE "SELECTED."
ONLY A JINTERNALFRAME CAN BE SELECTED.
SO THE "SELECTION" REQUEST HAS TO BE SENT TO THE
JDESKTOPPANE IN THE FORM OF A SETSELECTION() REQUEST.


Completed the demo Anno21 which reorganizes graphics
into four classes:

   Anno21 class simply runs main, which installs...
   MyFrame whose initializer installs...
   MyPanel which supplies artwork and extends...
   AnnoPanel with viewer, annotator, drag/pan, zoom.

This organization completely removes GJIF from its
artwork duties, leaving it to handle the communications
to/from DeskMenuFrame and the Registry of Information.

Also this organization puts MyPanel and AnnoPanel into a
base/super relationship, for easiest protected communications
of pan zoom state, redraw status, etc. 

To do in A14: 
  Simplify GJIF so it becomes a manager not an artist;    <<DONE
  Have GJIF install a LayoutPanel or PlotPanel etc;       <<DONE
  Write LayoutPanel class etc as extensions of AnnoPanel. <<DONE

Next to do:
  Bring layout artwork into LayoutPanel;  <<DONE
  Bring plot artwork into PlotPanel;      <<DONE
  Bring P1D artwork into P1DPanel;
  Bring P2D artwork into P2DPanel;
  Fix up communication of user pixels -> artwork;
  Fix up communication of user fontsize -> artwork;
    and associated WCHAR, XCHAR, local definitions.
  Fix up CAD. 
  Write random ray generator
  Write autoadjust
  odd bug: a fresh graphics window will get a free
    blinking caret from an earlier graphics window,
    although this caret will be ineffectual. It is
    as if old caret failed to be destroyed when prev
    window lost focus.  



27 June 2005, A13

Approach to annotation that is not hindered by sitting atop
complex graphics:  Have a 3-layer paintComponent() activity.

  Layer 1: foundation tech graphic, written to a backbuffer
  bitmap, constructed from the current window size.  If win
  size stays constant, and zoom is constant, this bitmap does
  not need replotting, just blit to the screen. 

  Layer 2: annotation list of chars.  Typically 0-100 chars,
  hence quick to paint.  These paint onto their own backbuffer
  bitmap, again constructed from current window size.  If win
  size stays constant, and charlist = constant, this bitmap
  does not need replotting, just blit to the screen, XOR atop
  Layer 1.

  Layer 3: the caret is drawn directly on the current Graphics2D
  context of the JPanel.  Not triggered by repaint/paintComponent,
  but timer driven from within the GainFocus() LoseFocus() code. 

With this plan, the annotation delay excludes the complex graphics
redraw, which remains locked down in its own backbuffer.  The time
needed to annotate one char is the time to repaint the charlist
onto its backbuffer, plus an XOR blit. The caret repaint delay
is even quicker: just a drawRect() atop the existing blits, or
the two blits to erase the Rect. 

Details being worked in anno11.java; see earlier plotb3.java.


18 June 2005: A13

Need a better way to handle extreme zoom.
How about this: have a flag bOOB = boolean OutOfBounds
that starts false at the beginning of each polyline,
but if any x or y is huge, the entire polyline is abandoned.
This can be built into Layout or into GPanel. 

This abandonment might be difficult to implement within
the artwork generator.  Or easy?

Would be easier within the renderer: before rendering, 
zip through each MOVETO..LINETO..(STROKE || FILL) group
remembering the MOVETO index, examine flag, then if OK
render the polyline, else move on. 

Max integer in ipoly[] jpoly[] is 2 billion, not much
dynamic range for zoom in labframe; OK in view frame.

Better: use double xpoly[], ypoly[], vast dynamic range.
Now, alist can be in labframe or viewframe, equally good. 

I'd like to have Layout draw its object in object space,
3D, independent of view, and have the renderer do any
needed conversion of double->SafeInts, and centering,
so that DXF can always be in userspace never pixelspace.
How/where to construct ipoly[] or xpoly[]?

Another gripe: I don't like having to repaint the whole
enchilada for each caret blink.  I'd rather paint the
artwork to a bitmap, then copy to a second bitmap, then
modify #2 with the caret, then display #2.  This can
be quick using bitBlt.  I think.   Or, if the screen can
be directly careted, keep the original bitmap uncareted,
and copy to screen, and put the caret onto the screen.
Let the damage happen to the screen.  Damage will vanish
when the repainting occurs.  My ignorance is: how to write
directly to the screen?  "Single buffering"??



17 June 2005: A13
Got the editor doPrint() method installed, seems to work.

Need to install a graphics doPrint() method written & working.
Note that GPanel already has a print() method.

Need to fix the zoom-in bug: If I zoom in 29 times, there
is an explosion of java messages about invalid path.  Maybe this
is numerical overload?  Anyway I need to clip my magnification.
Perhaps there is a drawPolyline() that accepts double, or float?
and hence handles the needed dynamic range for clipping? Nope.
The crash at zoomx>16384 smells of using a 16 bit int somewhere. 
If a 16 bit int were to overflow, it might mangle some memory
location and produce an invalid path memory fault? 
I am using U.SAFEINT which clips at 30000 pixels. 
Changing it to clip at 10000 does not help. 
Limiting zoomx to < 10000 ends the crashes, but of
course does not provide the dynamic range I want.
I will run some experiments on drawPolyline().

Crash details running LENS.OPT, LENS.RAY
  zoomin #28 is OK, zoomx=16384; 
  but #29 crashes, with the message blizzard starts with...
sun.dc.pr.PRException: endPath: bad path
  at sun.dc.pr.Rasterizer.endPath(Unknown Source)
  at sun.java2d.pipe.DuctusRanderer.createShapeRasterizer(Unknown Source)
  at sun.java2d.pipe.DuctusShapeRenderer.renderPath(Unknown Source)
  at sun.java2d.pipe.PixelToShapeConverter.drawPolyline(Unknown Source)
  at sun.java3d.SunGraphics2D.drawPolyline(Unknown Source)
  at GPanel.showAlist(GPanel.java:354)
  at GPanel.paintComponent(GPanel.java:81)
  at javax.swing.JComponent.paint(Unknown Source)
  ...


        //// testing drawPolyline() or drawPolygon() ///////
        int big = 999949; 
        int ibig[] = {10, big, big, 10}; 
        int jbig[] = {10, 10, big, big}; 
        polycount = 4; 
        g2.drawPolygon(ibig, jbig, polycount); 
        polycount = 0; 
        ////if big=999948,OK; if big=999949, bad path crash //////


5 June 2005: A13
Installing a charTable[][] editor from java\editors\ee

This major change allows eliminating iTextInfo[] and the
concept of (a) storing caret info (b) recovering caret info
from the array.  Now, with the "ee" style editor, we eliminate
the stored data and replace it with actual real time methods.

Bunch of bugs in parsing tables.   Working. 


30 May 2005: A12

I notice that the graphics text annotator is sluggish when I have
a complicated drawing such as TMA68 layout.   Perhaps I need
a stashed bitmap? 

Work on a 2D table editor is progressing: see java\editors\ee
This editor has full clipboard and printing capability, both portrait 
and landscape.  No postscript.  But it is merely an ePanel
within an EdFrame, with the frame carrying the menus, and
the ePanel responding to mouse wheel, keystrokes.  No drag-n-drop.

Meanwhile I have purged the EJIF extensions of references to 
the host JTextArea, replacing those with protected method calls,
so as to better insulate the extensions from details of the edit
engine. 

I screwed up and rewrote some of the method args to be (x,y) instead
of the inherent Java 2D array sequence(y,x) or (row,col).
Specifically, the methods below getFullField(f,r) and getTrimField(f,r)
should get unrewritten so as to be consistent with all the
other calls (r,f).  <<< No no! although the private table indexing
is indeed [row][col] to allow subdimensioning into strings,
all the public methods should move to (field, row) logical sequence.
So keep the (field, row) public methods. 

------------------- EJIF methods--------------------------

    abstract void parse();             // each extension supplies this.

    public String getTrimField(f,r)    // all extensions
    public char   getTag(f,r)          // all extensions

    public void putField(f,r,s)        // inout
    public void putFieldDouble(f,r,d)  // inout
    public void putBlank(f,r)          // inout

    public EJIF()                      // DeskMenuFrame
    public void pleaseSave()           // DeskMenuFrame
    public void pleaseSaveAs()         // DeskMenuFrame
    public boolean bExitOK()           // DeskMenuFrame
    public boolean areYouEmpty()       // DeskMenuFrame
    public boolean areYouDirty()       // DeskMenuFrame
    public void setClean()             // DeskMenuFrame
    public boolean doYouNeedParsing()  // DeskMenuFrame
    public boolean areYouMarked()      // DeskMenuFrame
    public void runTest(which)         // early testing only
    public static void setOverwrite()  // bimodal only


---------------------protected EJIF methods----------------------
    protected boolean bHaveBuffer()
    protected int getNumRecords()    

------------------------private EJIF-------------------------
    private void updateAndShowInfo()
    private String getFullField(int field, int row)
    private void putTag(int field, int row, char c)


24 April 2005: A12

The table editor is easy, and works nicely.  See it at
C:\java\editors\ed  where I take a JPanel that displays
field[][] of chars, and wrap it with a JScrollPanel,
and then use the caret motion to drive the scroller.
The drive method to force scrolls is...

   Rectangle r = new Rectangle(iCaret*ISIZE, jCaret*JSIZE, 40, 40);
   scrollRectToVisible(r);                       

which basically asks the scroller to make a given rectangle
visible through its viewport.  Seems to work. 

To get mouse wheel action, I make my EdPanel into a formal
MouseWheelListener by declaring that interface and implementing
public void mouseWheelMoved() to drive the caret and force any
needed scrolling. 

20 April 2005: A12
Another task is to write a table editor.
How hard can this be? Don't know until I have done it.
Ongoing work is at C:\java\editors\ed  where an approach
is based on a two dimensional char array  field[][].
Read, write, widen, narrow, parse, mark, unmark, are OK
One tricky bit is getting scrollers.  The JScrollPane
has invisible hooks into its client:

   JScrollPane jsp = new JScrollPane(ePanel);

that communicate to/from ePanel.  But communications lie
at the heart of an editor scroller, need to listen to the
actions of the caret.  Since my caret is homemade, the
communications fail to connect.  Better might be to set
up a home made eScrollPane that includes the ePanel and
an optional Vscroller and an optional Hscroller.

19 April 2005: A11
I am thinking how difficult it is, to arrange to have
two parallel drawing lists, one specific for 3DDXF in
floats, the other being all ints.  They are so similar
yet so different.  

I am thinking to revert to the B4 plan, have only one
drawing quadlist, float float float int, that serves all
functions.  As in B4 there will have to be a few
stashed variables (twipx, hmid, vmid) to permit
integer reduction at the point of rendering.  These
could be placed into the first few quads a la B4. 

In this plan, for non layout artwork, the unit of 
graphic distance would be the pixel, or the twip,
or the inch = 1440 twips. 

This will become A12. 



15 April: Bug in Layout
If Diams are not specified, an xrange forces DiamX but
does not inflate DiamY, showing a slender lens.  When
using default diams estimated from ray traces, inflate
both DiamX and DiamY from the estimate. << FIXED


14 April; A11

I have installed a line-extender to the table editor
that is part of putField().  Before performing the
textArea.replaceRange(), I check to see if the end
of field would extend into the next line; if so, I
insert sufficient blanks at the insertion point to
make the line long enough to accept the replacement.

Now it works better, but a seriously ragged right
table still gets messed up somewhat.  Perhaps a quick
fix would be to extend all lines to the right hand
margin during input?  << yes this works nicely; it
fills out the ratty file a.ray upon being input.
This new routine >> fillRagged() << in EJIF is called when
initializing an editor with a new file, and on starting
an InOut session.  It will also be needed when AutoAdj()
starts up to avoid problems writing to the .OPT and .RAY
tables.  


13 April, A11
Installed full functionality to "shape" columns for
effortless testing with existing files.  Works.
If however an "A" asphericity column is present, 
it will override any shape data.  TMA63 tests OK.

Need to implement a plan for C, CX, CY data that
provides for quadratic vs toric surface resolution.

Need to create a 3D-to-2D converter for use within
Layout that will handle extreme zooms without scads
of error messages.  This converter should also be
able to generate 3D DXF files in user coordinates,
when that mode has been requested. 

Editor problem: backspace can shorten a line thereby
spoiling the column arrrangement rightward.  Should
never do this.  


12 April 2005, A11
Yikes, discovered that InOut corrupts its ray table
when it is outputting numbers into it.  Example is
the single flat mirror file A.OPT  A.RAY. <<< Ah; this
happens when InOut tries to write into a record that
is shorter than it needs.  Rather than lengthening it
first, it merely overwrites the terminal \n thereby
destroying the line break.   Should be easy to fix.
Does not happen if all the lines have enough chars to
accommodate the output. 

Also discovered that going to Edit=textmode fails
to reestablish the pushright "insert" behavior.

11 April 2005, A11
Installed improved graphics into Layout: now the
iris has its beauty marks, and now the simple gratings
have grooves.  Also I installed a user-selectable
Anti-Alias process that makes graphics look less jaggy.
Now, if only I could figure out how to add the same
anti aliasing to my textAreas so as to smooth my fonts
and make the typeface look less jaggy.  Unfortunately
that may require access to the G2 graphics environment,
which for textAreas is evidently nonaccessible.  ??


20 March 2005: A11
Exploring how to implement the random ray feature.
Starting with the UI: menu dropdowns, dialog boxes.




12 March 2005

Got the blinking caret to work.
Method is to include the caret artwork as an
addendum to paintComponent(), but with restricted clip region:

    void showCaret(Graphics2D g2)
    /// uses global txcaret, tycaret, caretColor
    {
        if ((g2!=null) && (tycaret!=ABSENT))
        {
            g2.setPaint(caretColor); 
            int px = (TPP*pxmid + txcaret)/TPP - WCARET/2; 
            int py = (TPP*pymid - tycaret)/TPP - HCARET/2;
            g2.fillRect(px, py, WCARET, HCARET); 
        }
    }

while at the same time have the blinker repaint "everything"
within the tiny prespecified clip region:

    class Blinker extends TimerTask
    // inner class eases communications
    {
        public void run()
        {
            if (focussed)
            {
               if (caretColor==Color.red)
                 caretColor = Color.blue;
               else
                 caretColor = Color.red; 
               System.out.println(caretColor); 
               int px = (TPP*pxmid + txcaret)/TPP - WCARET/2; 
               int py = (TPP*pymid - tycaret)/TPP - HCARET/2;
               repaint(px, py, WCARET, HCARET);
            }
        }
    }

The other part of the trick is to have the blinker and the
timer start fresh with each focusGained, and shut down
entirely when focusLost:

    public class MyFocusListener extends FocusAdapter
    {
        public void focusGained(FocusEvent f)
        {
            focussed = true; 
            System.out.println("Gaining focus, starting timer");
            if (caretTimer!=null)
            {
                caretTimer.cancel(); 
                caretTimer = null;
            } 
            caretTimer = new java.util.Timer(); 
            blink = new Blinker(); 
            caretTimer.schedule(blink, 0, 500);  
        }

        public void focusLost(FocusEvent f)
        {
            System.out.println("Losing focus...."); 
            if (caretTimer!=null)
            {
                System.out.println("...and cancelling Timer."); 
                caretTimer.cancel(); 
                caretTimer = null; 
            }
            focussed = false; 
            repaint();  // clean up dead caret
        }
    }


22 Feb 2005

A10: Here I merge the functionality of AnnoPanel into the
general graphics system GJIF + GPanel.  To do this I evolved
AnnoPanel into the same broad configuration as GJIF + GPanel,
including the use of Constants and local variable names.
Then I hauled the AnnoPanel methods into Gpanel.  Division
of responsibility is as follows:

GJIF is the base class, implements Constants
  it owns one private ArrayList, initially empty
  it contains protected ArrayList methods
  it instantiates one Gpanel at startup

GPanel is the artwork displayer/annotator
  its constructor receives a reference to GJIF's AList
  it has listeners for mouse & keyboard
  it augments host's AList when annotating
  it displays the AList artwork when repainting

Layout, Plot... extend GJIF
  each instance therefore has a unique AList
  each instance has access to AList methods
  through GJIF, it owns a GPanel.


16 Jan 2005

A8: Introducing the ArrayList of IJC objects into GJIF for
creating graphics.  Recall that in A7, I used a fixed
size array of int[MAXTRIPS][3]; now I can add objects
willy nilly.  (Trouble?!)

10 Jan 2005

Initial runs of the A7 article with Layout is encouraging.
Many little bugs and absences abound however....

* The darn editor often corrupts good tables, dropping chars.
   Looks random, have not figured out where why.
* Serious trouble loading more than 99 records. Ugly messages.
* Want Options activated by Control-O
* Want submenus to be letter-keystroke activated.
* Graying does not work properly yet.
* Odd unwanted extra "ray" showing in Layout. Poorly terminated line?
   It's there even when only one ray is showing. 
* Perhaps introduce user-adjustable graying in Layout? 
   Various output devices might display best with differing grays.
* Perhaps introduce user-adjustable font size in Annotate?
   Various output formats may work best with differing font sizes.
* How about a pictorial layout of checkboxes for Linecode, Shadecode?
   Idea is to eliminate numerical codes in favor of a picture. 
   One concept is a cartoon circle and cross with boxes.
   Clickable arcs & radii! Bold=ON, faint/dotted=OFF. 
* Convert annotator into tripList, units=twips, and check it out.
   Then install it into GJIF and start debugging Plot etc. 
* Add main menu "Font" and choose PointSize 10..20 and BOLD/plain
    for the tables, and separately for the Annotator.  For an
    example, see C\Java\Plot\FontSize.java
* Now that the new 2D paradigm tripList is reality, I shall have
   to write a separate kind of 3D DXF generator for Layout,
   and of course some 2D generators for Plot/1D/2D which can use
   the ordinary triplist and should be trivial.  That 3DDXF 
   might take some special sweat however!  

This new 2D paradigm works nicely and is easy to debug
since there are no longer two managers. Layout etc is
fully in charge, GJIF is merely a repaint() task manager
and does not need to know anything about the drawing.
GJIF owns and operates the trips[][] list, and the 
artists take charge of building this list.  I am using
the zeroth element of this trips list to specify the size
of the table but could I not get it more cleanly from the
ArrayList function .size()?

Currently the scale factor TPP "twips per pixel" = 16. 

The 2D GJIF concept means that there will be no support
for 3DDXF via GJIF.  Indeed, in twips, there is no
support for 2DDXF where the units correspond to optical
dimensions.  The other formats (PostScript, PDF, plotter)
are 2D and handle hardware scaling (points, mils, pixels) 
and will work OK.

This means that unlike the non-DXF graphics, Layout will
have to have its own 3D output file writer routine in
DXF.  It will have to go around GJIF to do its job.

Some specific additions needed:

* annotation: cursor, caret, char triplets
* zoom in, zoom out, rebuilding of rulers
* pan left right up down scrollers

7 January 2005
Do I need a whole new paradigm?  At present, GJIF nicely
handles the display of quadX and quadY and ignores quadZ.
It cannot handle Az,El.  Its purpose is the display of 
2-D objects like Plot and 2D.  I have been putting the
Az,El matrix into Layout (the only 3D graphic) and projecting
onto the 2D (H,V,D) viewspace. 

How would this go: for display, have Layout etc be self
contained, make no quads or anything except for special
needs such as 3D-DXF.  Instead, Layout, Plot, etc etc 
generate XY drawing lists in integer or float pixels.
Idea is to eliminate any smarts from the repaint, which
would continue to reside within GJIF as a "thin" base class
without smarts. 

Let's not worry about the megaflop cost of having to 
recompute a layout for various zooms or viewangles.
The only megaflop concern is the quick repaint, which
can handled by a block of 2D integers, pixel XY pairs,
perhaps with color code and/or a symbol code. 

Move this on to directory A7.   Done.

Issue: the screen is not high resolution.  It looks crappy
when rendered on a high-res device like a printer.  

For Postscript, deal in Points and fractional points.
A point is approx one screen pixel, so we don't want
integer points we shall require floating points, or 
perhaps some kind of "drawing unit" comparable to the 
1200 dpi printer pixel. 

For Plotter formats the usual plot unit is the mil.
Again, could be float or integer with about 14x the
magnification of the screen pixel.  

Since divide by 16 goes with the speed of a right shift,
and 16 * 75dpi = 1200 dpi, ~ printer resolution, we could
adopt listUnit = 1/1200 inch.   Plotter format could use
this although the graphics would somewhat overfill the
paper unless a demagnification factor of 0.8 were applied.
NB: a twentieth of a point is called a twip, and there are
1440 twips to the inch.  So I could name a sixteenth of a
point the sip.  

It occurs to me that my screen is not particularly high res.

If Layout, Plot, etc generate drawing lists (int,int,int)
then the plot unit should be approx one mil.  Screen
refresh would redraw with only an integer divide time cost.
Or with (float, float, int) there could be a simple truncate
to integer.  

ORIGIN: Where should the origin be?  Nice to eliminate the 
truncation glitch at the origin: perhaps keep the origin in 
the UL corner? No this is rather too platform specific.
Instead, let's have the origin in the CENTER of the window,
so that window resizings (at least!) don't require a new
plotlist.  The center origin can easily be accommodated by
the Postscript setup "312 504 translate" statement, and
the plotter formats can use a coded translation. 
 
ADDITIONAL DATA on how many triples might be carried in a
separate datum, not buried into the starting zone, or perhaps
be the zeroth element of the triplets vector. 

Zoom would have to be handled by the artist, not by GJIF.
GJIF handles repaint() only.  The artist will have to 
accept the new zoom request factor, redo all its chars
and rulers to make a nice picture in totality.


Jan 3, 2005
Installing pixel-based artwork into the GJIF quad display.
This requires a QUAD1PIXEL that conveys deltaX, deltaY = 1 pixel,
so that the quad coords x,y can be encoded by the artist.

Artwork scaling concepts and definitions-- 
1. The default graphic window size nompixels = 300x300 pix = 100x100mm
      --- This size can be altered via Options:Graphics menu
2. EXTRAROOM lies entirely within the artist, not in GJIF
3. Enlarging/shrinking the window enlarges/shrinks artwork
       -- so the display pix/meter depends on windowsize!
3A. Alternatively: have artwork const in pixels, so that
   enlarging/shrinking windowframe merely controls the amount
   of exposure of the artwork.   ?? which?  >> THIS: go
   with 3A for now. Makes the nompixels a critical const.
   We can use Registry.up_ss[UO_GRAPH_SIZE]="300" to mean
   300 pixels nominal graph, or "100" to mean 100mm and
   implicitly assume 3pix/mm which is kinda standard.
4. Quantitatively...
        size = actual measured extent in user coords;
        size * EXTRAROOM = window size in user coords;
        pixels = min(Win.width, win.height);
        pixels / (size * EXTRAROOM) = autoscale;
        manualscale = pixels per user unit H or V; see PLOT
        ZoomIn key multiplies scale by 1.4141;
        ZoomOut key multiplies scale by 0.7071;
5. For LAYOUT: adopt "full size" display including extraroom
     What about StickyZoom? when set=true, capture the
     current scale factor somewhere (where?), and instead of 
     using a freshly computed scale at layout startup, use
     the stashed zoom.  Could this be a field in LAYOUT?
6. We still need a current QUAD1PIXEL scale factor for chars,
  that remains usable during zooms.  It should be always valid.
  Note: this does not depend on current pixels! only nominal pixels!
  It depends only on current extents and zoomfactor, i.e.
     dx1pixel = size * EXTRAROOM / nompixels
  Can be generalized to 2D: dx1pixel and dy1pixel.

-------------


Need to install: ray color system: in REJIF...
   public char ccolors[MAXRAYS+1]  ..A thru z
   public int  icolors[MAXRAYS+1]  ..BLACK thru WHITE 
     to index an array? an array of Color[]? 
Need to install: plot diam scaling & manual scaling
Need to fix: editor "delete" or "enter" key spoils Table
Need to create: layout


Dec 2004
Q:Why are there two successive readings of OPTIONS.TXT
at startup?  The newly installed registry should need only one.
Perhaps I am forcing an extra one somewhere.
A:Ooops, I had *two* registries present! one created by
DeskMenuFrame at startup, and another by OptionMenu. <<FIXED

Why does the initial run of Plot show all ray values
zero, yet the second, third, .... are OK?  Perhaps
something in failing to initialize nsurfs or nrays or
something??   <<HINT: if I run InOut first, then the first
Plot is OK.  Something to do with ray tracing, not graphics.
Also, the InOut is correct from its very first run, again as
if it is properly initializing some ray vars that Plot fails
to initialize. Perhaps Gparse is messed up?
Not just an autoloader problem: same deal for hand loaded files.
HA: I had used RT13.getSurf(opcode) which relied upon the
previously stored value of nsurfs to truncate at "final"
-- this works OK if RT13.runray(k, nsurfs) is called before
RT13.getSurf(opcode) is called becaused runray() stashes nsurfs.
-- this fails if RT13.runray(k, nsurfs) is called after getSurf().
In my InOut, it is runray() that is called first, worked OK.
In my Plot, it is getSurf() that is called first: failed.
FIX is to transmit current nsurfs along with opcode:
   RT13.getSurfs(opcode, nsurfs)  -- always current. << FIXED. 





Q: if *every* call to XEGIF.putField(item+2, string)
   is offset by the +2, can we please rewrite the +2 
   so that it occurs within the putField method, and 
   the caller remember to do the addition?

Dec 30 2004, M6
Effort has been to install a UserOptions system.
Plan has three parts: 
  - create & debug a free standing options interface application
  - rewrite it as OMenu, an extension to JMenu
  - install this into DeskMenuFrame.
Initial problem was: Registry "reg" belonged to optionMenu.
Makes it nigh impossible to communicate this to any other
dynamic object! since what if optionMenu vanishes?
Initial solution is: have DeskMenuFrame instance "dmf"
instantiate "reg" so it can pass it on to all JMenu objects
including optionMenu.  

A way to include text annotation in graphics:
for the text char opcodes 32-127, use the following
interpretation:  X = xpixel, Y=ypixel, z=unused.
When user has the caret at (x,y) and presses backspace,
*search the quadlist* and if there is a char near that (x,y)
change it to blank=32 and repaint. 

How to perform graphics on demand, when OS calls paintComponent(g)?
The only argument is Graphics g.
In particular, no quadlist is part of the OS call.
So the paintComponent() must reside in a place where quads[] are known.

1.  If paintComponent() dwells in GJIF it can use the local quads.
But of course GJIF is a special JInternalFrame not a JPanel.
A JInternalFrame cannot draw on itself; it needs a JPanel to draw.

2.  If paintComponent() dwells in a separate class PPanel, 
how would PPanel ever get the quads? If it had a constructor
that was passed a pointer to the quads at startup, and it kept
this pointer, it could grab quads whenever it needed to plot them.
However there are no pointers in Java.

3.  If paintComponent() dwells in LGJIF, PGJIF, D1GJIF etc,
then it has access to the quads.  But here it needs to be 
duplicated.  

I'm going with #1, and placing the PPanel *inside* the GJIF class
as an inner class, so it can see all the local arrays and methods.



// Dec 2004
// Need to distinguish specific graphicSetup() = populate the QuadList,
// versus generic graphicShow() which shows the QuadList on screen. 
//
// Let's have GJIF be generic, includes quadlist and showQuads
// ... its constructor creates a JPanel but does not fill quadlist.
// Let's have LGJIF extend GJIF, adding Layout setup of quads
// Let's have PGJIF extend GJIF, adding Plot setup of quads
// Let's have D1GJIF extend GJIF, adding D1 setup of quads
// Let's have D2GJIF extend GJIF, adding D2 setup of quads
//
// Let's have DeskMenuFrame instantiate a graphic extension XGJIF.
// then XGJIF constructor calls super (which is GJIF)
//       GJIF constructor calls super (which creates a JIF)
//       GJIF constructor creates its JPanel.
//       GJIF constructor arranges font, background; exits
//      XGJIF constructor fills the quadlist; exits
//      OS somehow gets notified that a new JIF needs painting
//      GJIF's JPanel receives a paintComponent(g) message
//      GJIF runs its doPaint quadpainter routine
//      ... the graphic appears!
// For printing, we'll use our Marty Hall remote printer,
// send XGJIF a paintComponent(gprint) request. 
//
// Scale factor responsibility:
// Quads describing Xscale etc are initially set within XGJIF
//  to give a reasonable starting display center & magnification.
// Subsequent Slide & Zoom keystrokes go to XGJIF also, but are handled
//  within its parent GJIF, which modifies the QuadScales and
//  requests a repaint. 

Dec 2004: reworked RunMenuGraying; turns out the individual parsers
require a fresh updateInfo() to reliably get textArea info. 

Nov-Dec 2004:
* removed test class rtxx, substituted class RT13
* rearranged the ray index defs so that the nine coefs in raystarts[]
 form a linear sequence so that raystarts can be densely packed.
 These are 0..8: RX,RY,RZ,RU,RV,RW,RPATH,RWAVEL,RORDER.
* Got the media LUTs going nicely, but need to verify empty names
 of wavels and media do not falsely match up.
* Abandoned OSHAPE parameter -- it was not working.
* HYPER serves as a nice null test. 
* Path needs to be implemented. 
* Abandoned the use of EMPTY indicating unspecified fields.
  instead, Double.NaN for non numeric contents; +0.0 for empty field. 

* Discovered a way to make JTextArea blind to F10: use an
 abstract action "doNothing" and link it into the keystroke
 action lookup table associated with the JTextArea. Details:

    Action doNothing = new AbstractAction()
    {
       public void actionPerformed(ActionEvent e) {}
    };

    // block response to built-in F10 keystroke....
    // http://java.sun.com/docs/books/tutorial/uiswing/misc/keybinding.html
    // http://java.sun.com/docs/books/tutorial/uiswing/components/generaltext.html

    textArea.getInputMap().put(KeyStroke.getKeyStroke("ESCAPE"), "doNothing"); // fails
    textArea.getInputMap().put(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE,0), "doNothing"); // fails
    textArea.getInputMap().put(KeyStroke.getKeyStroke("F10"), "doNothing"); // works
    textArea.getActionMap().put("doNothing", doNothing); // action defined below.

* There's a way to ask JTextArea to perform CaretDown action.
 I need this as part of CopyDown() method.
 Keycombo (say, Ctrl-N) is easy:

    InputMap inputMap = textPane.getInputMap();
    key = KeyStroke.getKeyStroke(KeyEvent.VK_N, Event.CTRL_MASK);
    inputMap.put(key, DefaultEditorKit.downAction);

CopyDown() starts with an F9.  I could make
the keymap from F9, then copy the field.
This works to get downAction:

  textArea.getInputMap().put(KeyStroke.getKeyStroke("F9"), DefaultEditorKit.downAction); 


// Gparse builds two public LUTs:  
//   gO2M[jsurf=1....] gives media record number 1..NREC
//   by comparing each oglasses[j] against mglasses[irec]
//
// And....           
//   gR2M[kray=1....] gives media field number 1...NF
//   by comparing each rwaves[kray] against mwaves[field]
//   Blank names are excluded from matching. 
//
//   jsurf = 1...NSURFS
//   mrec = 1...NGLASSES
//   kray = 1...NRAYS
//   mwavesfield = 1...NWAVES
//
//   absent fields or records: ABSENT which is =-1
//
// Napproaching(jsurf,kray) = media[Gparse.gO2M[jsurf], Gparse.gR2M[kray]]; 


/**
  * Consts.java  -- an interface carrying static global constants.
  *  uses nothing. 
  * 
  *  Each user class must declare "implements Globals"
  *  See LJ p.155.
  *  No methods or instance fields are legal here.
  *  All fields here are always public static final. (H&C p.206)
  * 
  *************** parser return value policy ********************
  *
  *  returning PRESENT:  0=FALSE means absent, 1=TRUE is present.
  *  returning a count of lines etc: return the actual count
  *  returning SYNTAXERR: 0=OK=noerr,   >0 = trouble = line+field
  *  Gparse GERROR field: 0=GNOFILES; see list below and messages.
  *  This policy means: default initializer to zero is sufficient.
  * 
  *************** indexing working arrays ************************
  * 
  *  caution: rays are numbered 1...nrays, not 0...nrays-1.
  *  caution: surfaces are numbered 1...nsurfs,  not 0..nsurfs-1.
  *  caution: media are numbered 1...nmedia, not 0...nmedia-1. 
  *  Each member[0] has special meaning, not part of the table.
  *
  ********************* lookup table ABSENT *******************
  *
  *  Lookup tables are explicitly initialized to ABSENT=-1.
  *  Benefit is immediate crash if ABSENT is not handled explicitly.
  * 
  ************* these arrays dwell in RT13 **********************
  * 
  *  public static double[][] surfs = new double[MAXSURFS+1][ONPARMS]; 
  *  public static double[][] raystarts = new double[MAXRAYS+1][RNPARMS];     
  *  public static double[][] media = new double[MAXMEDIA+1][MAXFIELDS]; 
  * 
  ************ this array dwells in Gparse *********************
  * 
  *  public  static int giFlags[] = new int[NFLAGS];   
  *
  *  @author M.Lampton STELLAR SOFTWARE (c) 2004 
*/


/*---------------------files------------------------------------*/

      m7.java -- DeskMenuFrame class
        uses nothing. 
      EJIF.java == EditorJInternalFrame; abstract class.
        uses m7
        uses U for debugging
      OEJIF extends EJIF, is optics editor
        uses U for suckInt() etc also debugging
      REJIF extends EJIF, is ray editor
        uses U for suckInt() etc also debugging
      MEJIF extends EJIF, is media editor
        uses U for suckInt() etc also debugging
      RJIF.java == RunJInternalFrame; abstract class.
        uses m7
        uses U for debugging
      LRJIF extends RJIF, is layout generator
        uses RT13
        uses U for debugging
      PRJIF extends RJIF, is plot generator
        uses RT13
        uses U for debugging
      D1RJIF extends RJIF, is D1 generator
        uses RT13
        uses U for debugging
      D2RJIF extends RJIF, is D2 generator
        uses RT13
        uses U for debugging
      TRJIF extends RJIF, is test generator
      U.java == utilities, formatters -- static methods only
        uses U for debugging
      Consts.java --consts interface.  Users "implement Consts"
        uses U for debugging
      RT13.java -- the ray tracer.  runray(int kray) does a trace. 
        uses U for debugging or unit testing. 
      InOut.java - single static method run()
        uses RT13
        uses REJIF
      Gparse.java -- invoked at every loss of focus; 
        parse() sets all permission flags 
        returns one overall integer. 

/*------------ flag index macrodefs ------------------------------------*/

    static final int OPRESENT         = 0;    // MISSING=-1 else OK=0
    static final int ONLINES          = 1; 
    static final int ONCHARS          = 2; 
    static final int ONSURFS          = 3; 
    static final int ONFIELDS         = 4; 
    static final int OMEDIANEEDED     = 5; // 1=needed
    static final int OGRATINGPRESENT  = 6; // 1=present 
    static final int OALLDIAMSPRESENT = 7; // 1=allPresent else 0
    static final int OSYNTAXERR       = 8; // 0=OK, else badField+100*badline

    static final int RPRESENT         = 11; // MISSING=-1, else OK=0
    static final int RNLINES          = 12;
    static final int RNCHARS          = 13;
    static final int RNRAYS           = 14; 
    static final int RNFIELDS         = 15; 
    static final int RWAVEFIELD       = 16; // MISSING=-1 else field num
    static final int RWAVESNUMERIC    = 17; // 1=allNumeric, else 0=mixed
    static final int RUVWCODE         = 18; 
    static final int RUSERPATHZERO    = 19; // 1=P0 specified, else 0=not
    static final int RSYNTAXERR       = 20; // 0=OK, else badField+100*badline

    static final int MPRESENT         = 21; // MISSING=-1 else OK=0
    static final int MNLINES          = 22;
    static final int MNCHARS          = 23;
    static final int MNMEDIA          = 24; 
    static final int MNFIELDS         = 25; 
    static final int MNWAVES          = 26; 
    static final int MSYNTAXERR       = 27; // 0=OK, else badField+100*badline

    ///////// there will be some global parse permission flags yet to come

    static final int NFLAGS = 30; // this will grow

/*------------------------features--------------------------------------*/  
  
Features to incorporate:  
        tolerancing
        pupil maps: point to point, distortion
        user specified functions & slick s/w interface
        Zernikes
        hot links to Excel
        aberrations as derived functions
        aberrations as optimization targets
        glorious graphics
        autoadjust in layout
        distinguish vacuum from air
        negative refractive index
        options and preferences system
        through focus sequences: dialog list of variable values
        retro
        global optimization: simulated annealing
        Offense against the sine condition: X versus U
        user choice: shapes or asphericity
        user choice: radii or curvatures
  


   

       

      ----------- flags and arrays set by Oparse()---------------------------

    flags[OPRESENT] = 0; 
    flags[ONLINES] = 0; 
    flags[ONCHARS] = 0; 
    flags[ONSURFS] = 0; 
    flags[ONFIELDS] = 0; 

    flags[OREFRFIELD] = 0;       subsume into ofield[oattrib] 
    flags[OZFIELD] = 0;          subsume into ofield[oattrib]
    flags[OMEDIANEEDED] = 0;     nonnumeric refraction
    flags[OSYNTAXERR] = 0; 
    flags[OGRATINGPRESENT] = 0; 
    flags[OALLDIAMSPRESENT] = 0; 

    idOI2F[] = ofield[oattrib] = which field has given attribute
    idOF2I[] = oattrib[ofield] = which attrib is in field f
    oglasses[jsurf] = list of names of refractive media; blank=vacuum

      ------------- flags and arrays set by Rparse() ---------------------

    flags[RPRESENT] = 0; 
    flags[RNLINES] = 0; 
    flags[RNCHARS] = 0; 
    flags[RNRAYS] = 0; 
    flags[RNFIELDS] = 0; 

    flags[RWAVESPRESENT] = 0; 
    flags[RWAVESNUMERIC] = 0; 
    flags[RSYNTAXERR] = 0; 
    flags[RUVWCODE] = 0; 
    flags[RUSERPATH0] = 0; 

    rayStarts[rattrib][kray] = ray start info;
    rfield[rattrib] = which field has given attribute
    rattrib[rfield] = which attrib is in field f
    rwaves[kray] = wavelength names, some may be blank

      ------------- flags and arrays set by Mparse() ---------------------

    flags[MPRESENT] = 0;
    flags[MNLINES] = 0; 
    flags[MNCHARS] = 0;
    flags[MNMEDIA] = 0;
    flags[MNFIELDS] = 0; 

    flags[MMEDIAALLFOUND] = 0;  // decided by Gparse
    flags[MSYNTAXERR] = 0; 

    media[?][?]  organization not yet specified
    mfield[oattrib] = which field has given attribute
    mattrib[ofield] = which attrib is in field f
    mglasses[] = media names
    mwaves[] = wavelength names

      ---------- flags set by Gparse, after O,R,M ------------------------


Logical relationships within texttables:

OCONSTS: OPRESENT, ONCHARS, ONSURFS, ONLINES, ONFIELDS, OSYNTAX, OMEDIANEEDED, 
   OMEDIAFIELD, OALLDIAMS, OGRATING
RCONSTS: RPRESENT, RNCHARS, RNRAYS, RNLINES, RNFIELDS, RSYNTAXIGNOREW, RWAVEFIELD, 
   RNUMERICWAVES
MCONSTS: MPRESENT, MNCHARS, MNMEDIA, MNLINES, MNFIELDS, MSYNTAXERR

Logical indices of OB[][], RB[][], MB[][] binaries

OB:  OX, OY, OZ, .....ONATTR
RB:  RX, RY, ... RWAVEL, RLOOKUP.
MB:  no fixed assignments; parser has to assign the indices. 

It's important to reparse any table that gets edited, and also redo the
general logic calc to see if something critical has changed. 

    parseOpt(); 
    if (!opresent)
      bailout("Optics table is not loaded"); 
    if (Nchars <1)
      bailout("Optics table is empty"); 
    if (Nsurfs <=0)
      bailout("No optical surfaces have been specified in upper left corner"); 
    if (Nlines <4)
      bailout("optics table has no records")
    if (Nfields <1)
      bailout("optics table has no fields"); 
    if (OsyntaxerrIgnoreIndex)
      bailout("Optics table has a syntax error at line LL field FF"); 
    if (OallDiamsPresent)
      permit(Layout); 
    
    parseRay(); 
    if (!rpresent)
      bailout("Ray table is not loaded"); 
    if (Nchars <1)
      bailout("Ray table is empty"); 
    if (Nrays <=0)
      bailout("No rays specified in upper left corner of table"); 
    if (Nlines < 4)
      bailout("Ray table has no records"); 
    if (Nfields < 1)
      bailout("Ray table has no fields"); 
    if (RsyntaxerrIgnoreWavel)
      bailout("Ray table has a syntax error at line LL field FF"); 
    if (OGRATING) && RNONNUMWAVES)
      bailout("Ray table needs numeric wavelengths for gratings"); 
    

    if (OMEDIANEEDED)
    {
        parseMed(); 
        if (!Mpresent)
          bailout("Media table is not loaded"); 
        if (Nchars <1)
          bailout("Media table is empty"); 
        if (Nrays <=0)
          bailout("No media specified in upper left corner of table"); 
        if (Nlines < 4)
          bailout("Media table has no records"); 
        if (Nfields < 2)
          bailout("Media table has no fields"); 
        if (RsyntaxerrIgnoreWavel)
          bailout("Media table has a syntax error at line LL field FF"); 

           use negative indices to indicate which row of media table.
           every surface has to be represented in media, if nonnumeric
           but of course not every medium need be in use. 

        int iAbsent = -1;      no absent glassnames yet 
        for (int i=0; i<ONSURFS; i++)
        {
            String s = Oparse.getField[i][OMEDIAFIELD]);    getField() includes trim()
            double d = suckDouble(s);  
            boolean found = true; 
            if (d > 0)
              OTABLE[i][OINDEX] = d;
            else
            {
                found = false; 
                for (int j=0; j<MNMEDIA; j++)
                {
                    if s.equals(Mparse.getField(j,0))     getField() includes trim()
                    {
                        OB[i][OINDEX] = (double) -j; 
                        found = true; 
                        break; 
                    }
                }
                if (!found)
                {
                    iAbsent = i;    could not match this glass name
                    break; 
                }
            }
        }
        if (iAbsent > -1)
          System.out.println("Glass name absent from media at optics record = "+iAbsent);  

           Most general requirement (lens + grating) will require BOTH numer val & lookup.
           so we will need two columns in RB: one for numerical waves, one for lookup.
           The ray parser Rparse will fill in numerical waves RWAVEL.
           Here, the global parser Gparse will fill in RLOOKUP = which column of MB. 
           every wavel has to appear somewhere in media but not conversely

        iAbsent = -1;     no missing wavels yet
        for (int i=0; i<RNRAYS; i++)
        {
            String s = Rparse.getField[i][RINDEXFIELD];    include trim()
            double d = suckDouble(s); 
            boolean found = true; 
            if (d > 0.0)
            {
                RB[i][RWAVEL] = d; 
                RB[i][RLOOKUP] = -1;     no lookup wanted
            }
            else
            {
                found = false; 
                for (int f=1; f<MNFIELDS; f++)
                {
                    if (s.equals(Mparse.getHeader(f))     getHeader() includes trim()
                    {
                        RB[i][RLOOKUP] = f; 
                        found = true; 
                        break; 
                    }
                }
            }
            if (!found)
            {
                iAbsent = i;      could not match this wavelname
                break; 
            }
       }
       if (iAbsent > -1)
         System.out.println("Wavel name absent from media at ray record = "+iAbsent);     

-------------------- parser management---------------------------------

There are at least two designs for parsing...

(Type 1) (Fortran style) is to have all editors be the same. Each is
an instance of class EJIF.   Every parser is separate and free-standing. 
When an editor loses focus, a separate m7 manager pulls a copy of the JTextArea
from the losing editor, and calls up the appropriate parser giving it the JTA. 
The parser outputs its decisions into the gFlags[] in the common Globals.

(Type 2) (Java style) is to have EJIF be only a base class, from which we extend
three types of specialized editor: OJIF, RJIF, MJIF.  Each extension includes
all EJIF features but also has specialized parsing capabilities, that get
invoked upon loss of focus.  

Type 1 creation within m7:

              case NEWOPT:
              case NEWRAY:
              case NEWMED: 
              case OPENOPT:
              case OPENRAY:
              case OPENMED:
                  boolean toOpen = (index > 2); 
                  int whicheditor = index % 3; 
                  String edext = new String(extensions[whicheditor]); 
                  ejif[whicheditor] = new EJIF(whicheditor, edext, fileMenuItem[whicheditor], fileMenuItem[whicheditor+3], toOpen); 
                  ejif[whicheditor].setLocation(iLast, iLast); 
                  iLast = (iLast + 20) % 200; 
                  jdp.add(ejif[whicheditor]); 
                  ejif[whicheditor].show(); 
                  try {ejif[whicheditor].setSelected(true);} 
                  catch(java.beans.PropertyVetoException pve) {} 
                  break; 

Type 1 focusLoss within EJIF:

    private class taFocusLossListener extends FocusAdapter
    {
        public void focusLost(FocusEvent fe)
        {
            updateFieldCols(); 
            switch (mynumber)
            {
                case 0: Oparse.run(textArea); break; 
                case 1: Rparse.run(textArea); break; 
                case 2: Mparse.run(textArea); break;
                default: System.out.println("FocusLost has invalid ID number"); 
            }
        }
    }

Type 2 creation within m7: eliminate ejif[], instead use three distinct objects,
  namely oejif, rejif, mejif.  

    case NEWOPT:
    case OPENOPT:  boolean toOpen = (index > 2); 
                   oejif = new OEJIF(fmi1, fmi2, toOpen); 
                   iLast = (iLast + 20) % 200; 
                   jdp.add(oejif); 
                   oejif.show(); 
                   try {oejif.setSelected(true);}
                   catch(java.beans.PropertyVetoException pve) {}
                   break; 
    case NEWRAY:
    case OPENRAY:  boolean toOpen = (index > 2); 
                   rejif = new REJIF(fmi1, fmi2, toOpen); 
                   iLast = (iLast + 20) % 200; 
                   jdp.add(rejif); 
                   rejif.show(); 
                   try {rejif.setSelected(true);}
                   catch(java.beans.PropertyVetoException pve) {}
                   break; 
    case NEWMED:
    case OPENMED:  boolean toOpen = (index > 2); 
                   mejif = new MEJIF(fmi1, fmi2, toOpen); 
                   iLast = (iLast + 20) % 200; 
                   jdp.add(mejif); 
                   mejif.show(); 
                   try {mejif.setSelected(true);}
                   catch(java.beans.PropertyVetoException pve) {}
                   break;

Type 2 focusLoss within EJIF which becomes an abstract class lacking parse():

    private class taFocusLossListener extends FocusAdapter // inner class
    {
        public void focusLost(FocusEvent fe)
        {
            updateFieldCols(); 
            parse();  // virtual method demands implementation 
        }
    }

    abstract void parse();   // supplied by extensions

Type 2 destruction when JIFrame vanishes (code is within EJIF):

            public void internalFrameClosed(InternalFrameEvent ife)
            {
                switch (mynumber) // destroy this editor
                {
                    case 0: DeskMenuFrame.oejif = null; break; 
                    case 1: DeskMenuFrame.rejif = null; break; 
                    case 2: DeskMenuFrame.mejif = null; break; 
                }
                textArea = null; 
                jmi1.setEnabled(true);
                jmi2.setEnabled(true);
                System.out.println("Destroyed editor " + mynumber); 
            }

Type 2 destruction of RJIFs:

            public void internalFrameClosed(InternalFrameEvent ife)
            {
                myjmi.setEnabled(true);
                System.out.println("Destroying graphic " + mynumber);   
                DeskMenuFrame.rjif[mynumber] = null;      
            }
    

Development plan for Type 2: 
  At first, OEJIF REJIF MEJIF don't have to add any
  new functionality except the virtual method parse() which can be empty. 
  Later the functionality can be added.  
  However m7.java requires a total overhaul, eliminating ejif[] and
  replacing with separate object instances.  

Q: where should the various parser subarrays reside?
  String[] oHeaders    << within oejif
  String[] oGlassNames << within oejif
  String[] rHeaders    << within rejif
  String[] rWaveNames  << within rejif
  String[] mWaveNames  << within mejif
  String[] mGlassNames << within mejif
  global int giFlags[] << within Globals

Q: Gparser() location? << within Globals is illegal; interfaces may have only abstract methods
   Gparser() use an instance of a class Gparser.
Q: Gstrings[] location? << within m7? Globals?

For Type 2, the simpler iTextInfo[] was originally mostly caret info.
I plan to enlarge that array so as to accommodate the local parser info,
NFIELDS etc.,  plus add the long arrays 
    private static int     lineStarts[] = new int[G.MAXLINES];      // LineStarts
    private static int     fieldStarts[] = new int[G.MAXFIELDS];    // x-coords of field starts
    private static String  headers[] = new String[G.MAXFIELDS];     // header strings
    private static String  oglasses[] = new String[G.MAXLINES];     // glass names
    private static int     formats[][] = new int[G.MAXFIELDS][3];   // W,D,E for each field
    private static int     oI2F[] = new int[G.ONATTR];              // Oindex-to-fieldNumber
    private static int     oF2I[] = new int[G.MAXFIELDS];           // fieldNumber-to-Oindex

oh. EJIF already includes some of this, for getField() etc:

    private boolean         bColSeparator;
    private int[]           iTextInfo;   // the parser will need to see this.
    private int[]           iLineStarts; // and this.. 
    private int[]           iFieldStarts;// and this....  
    private int[]           iFieldTags; 
    private int[]           iFieldWidth; 
    private int[]           iDecPlaces; 
    private boolean[]       bExpFormat;
    private static boolean  bOverwrite=true;

all it needs added is headers[], glassNames[]....
so the OEJIF class will not need the entire Oparse() functionality
but only that portion that is not supplied within EJIF. 



        /////// ruler parser concept ///////////////////////////////

        int rulerlen = LSindex[3] - LSindex[2] - 1;   // exclude EOL
        System.out.println("Rulerlen excluding EOL = "+rulerlen); 
        if (rulerlen < 3)
          return; 
        line = text.substring(LSindex[2], LSindex[3]); // includes \n

        Nfields=0; 
        boolean bPrevColon = true; 
        for (int i=0; i<rulerlen; i++)  // excludes EOL: CHECK FINAL CHAR
        {
            // A fieldstart is... BOL -> noncolon or colon -> noncolon.   
            // A chain of consecutive colons is not a chain of fieldstarts.  
            // A tag is a transition noncolon->colon.

            boolean bColon = (line.charAt(i) == ':'); 
            boolean bStart = bPrevColon && !bColon;
            if (bStart)
            {
                fieldstarts[Nfields] = i; 
                if (Nfields < MAXFIELDS-1)
                  Nfields++;
            }
            bPrevColon = bColon; 
        }
        fieldstarts[Nfields] = rulerlen; // beyond final char final field. 
        if (Nfields < 1)
          return; 

        System.out.println("Nfields = " + Nfields); 
        for (int f=0; f<=Nfields; f++)
          System.out.print(U.fwi(fieldstarts[f],4)); 
        System.out.println(); 

        //////////// header line /////////


        line = text.substring(LSindex[1], LSindex[2] - 1);  // exclude EOL 
        int linelen = line.length(); 
        for (int f=0; f<Nfields; f++)
        {
            int istart = fieldstarts[f]; 
            int istop = fieldstarts[f+1]; 
            if (istop > linelen)
              istop = linelen; 
            if (istop > istart)
              headers[f]= line.substring(istart, istop).trim();
            else
              headers[f] = ""; 
        } 

        for (int f=0; f<Nfields; f++)
          System.out.print(headers[f] + "  "); 
        System.out.println(); 

        //////// end ///////////
